{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Obsidian Notes \u00b6 Publish your public notes with MkDocs Hello World! \u00b6 The index.md in the /docs folder is the homepage you see here. The folders in /docs appear as the main sections on the navigation bar. The notes appear as pages within these sections. For example, Note 1 in Topic 1","title":"Obsidian Notes"},{"location":"#obsidian-notes","text":"Publish your public notes with MkDocs","title":"Obsidian Notes"},{"location":"#hello-world","text":"The index.md in the /docs folder is the homepage you see here. The folders in /docs appear as the main sections on the navigation bar. The notes appear as pages within these sections. For example, Note 1 in Topic 1","title":"Hello World!"},{"location":"Features/LaTeX%20Math%20Support/","text":"LaTeX Math Support \u00b6 LaTeX math is supported using MathJax. Inline math looks like \\(f(x) = x^2\\) . The input for this is $f(x) = x^2$ . Use $...$ . For a block of math, use $$...$$ on separate lines $$ F(x) = \\int^a_b \\frac{1}{2}x^4 $$ gives \\[ F(x) = \\int^a_b \\frac{1}{2}x^4 \\]","title":"LaTeX Math Support"},{"location":"Features/LaTeX%20Math%20Support/#latex-math-support","text":"LaTeX math is supported using MathJax. Inline math looks like \\(f(x) = x^2\\) . The input for this is $f(x) = x^2$ . Use $...$ . For a block of math, use $$...$$ on separate lines $$ F(x) = \\int^a_b \\frac{1}{2}x^4 $$ gives \\[ F(x) = \\int^a_b \\frac{1}{2}x^4 \\]","title":"LaTeX Math Support"},{"location":"Features/Mermaid%20Diagrams/","text":"Mermaid diagrams \u00b6 Here's the example from MkDocs Material documentation : graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!];","title":"Mermaid diagrams"},{"location":"Features/Mermaid%20Diagrams/#mermaid-diagrams","text":"Here's the example from MkDocs Material documentation : graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!];","title":"Mermaid diagrams"},{"location":"Features/Text%20Formatting/","text":"Text Formatting \u00b6 You can have lists like this first second third Or checklist lists to Get things done Also, get highlights and strikethroughs as above (similar to Obsidian). More formatting options for your webpage here . (but not compatible with Obsidian)","title":"Text Formatting"},{"location":"Features/Text%20Formatting/#text-formatting","text":"You can have lists like this first second third Or checklist lists to Get things done Also, get highlights and strikethroughs as above (similar to Obsidian). More formatting options for your webpage here . (but not compatible with Obsidian)","title":"Text Formatting"},{"location":"Topic%201/Note%201/","text":"Note 1 \u00b6 Example: link to Mermaid Diagrams under Features","title":"Note 1"},{"location":"Topic%201/Note%201/#note-1","text":"Example: link to Mermaid Diagrams under Features","title":"Note 1"},{"location":"Topic%201/Note%202/","text":"Note 2 \u00b6","title":"Note 2"},{"location":"Topic%201/Note%202/#note-2","text":"","title":"Note 2"},{"location":"ysyx/RISCV64%20%E6%8C%87%E4%BB%A4%E5%AD%A6%E4%B9%A0/","text":"\u6307\u4ee4\u7c7b\u578b\u4e0e\u5bc4\u5b58\u5668 \u00b6 \ud835\udc79\ud835\udc70\ud835\udc7a\ud835\udc6a-\ud835\udc7d \u57fa\u7840 | suda-morris \u4e2a\u4eba\u535a\u5ba2 RV32I 47 32\u4f4d\u5730\u5740\u7a7a\u95f4\u4e0e\u6574\u6570\u6307\u4ee4,\u652f\u630132\u4e2a\u901a\u7528\u6574\u6570\u5bc4\u5b58\u5668 RV32E 47 \u4ec5\u652f\u630116\u4e2a\u901a\u7528\u6574\u6570\u5bc4\u5b58\u5668 RV64I 59 64\u4f4d\u5730\u5740\u7a7a\u95f4\u4e0e\u6574\u6570\u6307\u4ee4,\u4ee5\u53ca\u4e00\u90e8\u520664\u4f4d\u548c32\u4f4d\u7684\u6307\u4ee4 RV128I 71 128\u4f4d\u5730\u5740\u7a7a\u95f4\u4e0e\u6574\u6570\u6307\u4ee4,\u4ee5\u53ca\u4e00\u90e8\u520664\u4f4d\u548c32\u4f4d\u7684\u6307\u4ee4 \u6269\u5c55\u6307\u4ee4\u96c6 \u6307\u4ee4\u6570 \u63cf\u8ff0 M 8 \u6574\u6570\u4e58\u6cd5\u4e0e\u9664\u6cd5\u6307\u4ee4 A 11 \u5b58\u50a8\u5668\u539f\u5b50\u64cd\u4f5c\u548cLoad-Reserved/Store-Conditional\u6307\u4ee4 F 26 \u5355\u7cbe\u5ea6(32bit)\u6d6e\u70b9\u6307\u4ee4 D 26 \u53cc\u7cbe\u5ea6(32bit)\u6d6e\u70b9\u6307\u4ee4,\u5fc5\u987b\u652f\u6301F\u6269\u5c55\u6307\u4ee4 C 46 \u538b\u7f29\u6307\u4ee4,\u6307\u4ee4\u957f\u5ea6\u4e3a16\u4f4d \u5bc4\u5b58\u5668 ABI \u540d\u5b57 \u63cf\u8ff0 Saver x0 zero \u786c\u4ef6\u8fde\u7ebf0 - x1 ra \u8fd4\u56de\u5730\u5740 Caller x2 sp \u6808\u6307\u9488 Callee x3 gp \u5168\u5c40\u6307\u9488 - x4 tp \u7ebf\u7a0b\u6307\u9488 - x5-x7 t0-t2 \u4e34\u65f6\u5bc4\u5b58\u5668 Caller x8 s0/fp \u4fdd\u5b58\u7684\u5bc4\u5b58\u5668/\u5e27\u6307\u9488 Callee x9 s1 \u4fdd\u5b58\u5bc4\u5b58\u5668 \u4fdd\u5b58\u539f\u8fdb\u7a0b\u4e2d\u7684\u5173\u952e\u6570\u636e\uff0c \u907f\u514d\u5728\u51fd\u6570\u8c03\u7528\u8fc7\u7a0b\u4e2d\u88ab\u7834\u574f Callee x10-x11 a0-a1 \u51fd\u6570\u53c2\u6570/\u8fd4\u56de\u503c Caller x12-x17 a2-a7 \u51fd\u6570\u53c2\u6570 Caller x18-x27 s2-s11 \u4fdd\u5b58\u5bc4\u5b58\u5668 Callee x28-x31 t3-t6 \u4e34\u65f6\u5bc4\u5b58\u5668 Calle \u516d\u79cd\u6307\u4ee4\u683c\u5f0f \u6240\u6709\u6307\u4ee4\u5728\u5185\u5b58\u4e2d\u4ee5\u5c0f\u6bb5\u5b58\u653e rs:\u6e90\u5bc4\u5b58\u5668 rd:\u76ee\u7684\u5bc4\u5b58\u5668 imm(immediate):\u7acb\u5373\u6570 func3:3\u4f4d\u529f\u80fd\u7801 func7:7\u4f4d\u529f\u80fd\u7801 opcode \u4e0e func3\u3001func7 \u5171\u540c\u51b3\u5b9a\u6bcf\u6761\u6307\u4ee4\u7684\u529f\u80fd \u7acb\u5373\u6570\u8868 opcode \u5bf9\u5e94\u8868 \u4f2a\u6307\u4ee4 + \u8d4b\u503c\u6307\u4ee4 move mv rd , rs # \u7b49\u6548\u4e8e addi rd, rs, x0 + \u52a0\u8f7d\u7acb\u5373\u6570 load immedia li rd, 13 # \u7b49\u6548\u4e8e addi rd, x0, 13 + \u51fd\u6570\u8c03\u7528\u548c\u8fd4\u56de jal my_foo # \u51fd\u6570\u8c03\u7528 ret # \u51fd\u6570\u8fd4\u56de\uff0c\u7b49\u6548\u4e8e jr ra\uff0c\u7b49\u6548\u4e8e jalr x0, ra, 0 cpu-test \u00b6 // INSTPAT_START(); // INSTPAT(\"0000000 ????? ????? 000 ????? 01100 11\", add, R, R(dest) = src1 + src2); // INSTPAT(\"??????? ????? ????? 000 ????? 00100 11\", addi, I, R(dest) = src1 + src2); // INSTPAT(\"??????? ????? ????? 000 ????? 00110 11\", addiw, I, R(dest) = SEXT(BITS(src1 + src2, 31, 0), 32)); // INSTPAT(\"0000000 ????? ????? 000 ????? 01110 11\", addw, R, R(dest) = SEXT(BITS(src1 + src2, 31, 0), 32)); // INSTPAT(\"0000000 ????? ????? 111 ????? 01100 11\", and, R, R(dest) = src1 & src2); // INSTPAT(\"??????? ????? ????? 111 ????? 00100 11\", andi, I, R(dest) = src1 & src2); // INSTPAT(\"??????? ????? ????? ??? ????? 00101 11\", auipc, U, R(dest) = src1 + s->pc); // INSTPAT(\"??????? ????? ????? 000 ????? 11000 11\", beq, B, if (src1 == src2) s->dnpc = s->pc + dest); // INSTPAT(\"??????? ????? ????? 101 ????? 11000 11\", bge, B, if (S64(src1) >= S64(src2)) s->dnpc = s->pc + dest); // INSTPAT(\"??????? ????? ????? 111 ????? 11000 11\", bgeu, B, if (U64(src1) >= U64(src2)) s->dnpc = s->pc + dest); // INSTPAT(\"??????? ????? ????? 100 ????? 11000 11\", blt, B, if (S64(src1) < S64(src2)) s->dnpc = s->pc + dest); // INSTPAT(\"??????? ????? ????? 110 ????? 11000 11\", bltu, B, if (U64(src1) < U64(src2)) s->dnpc = s->pc + dest); // INSTPAT(\"??????? ????? ????? 001 ????? 11000 11\", bne, B, if (src1 != src2) s->dnpc = s->pc + dest); // INSTPAT(\"0000001 ????? ????? 100 ????? 01100 11\", div, R, R(dest) = S64(src1) / S64(src2)); // INSTPAT(\"0000001 ????? ????? 101 ????? 01100 11\", divu, R, R(dest) = U64(src1) / U64(src2)); // INSTPAT(\"0000001 ????? ????? 101 ????? 01110 11\", divuw, R, R(dest) = SEXT(U32(BITS(src1, 31, 0)) / U32(BITS(src2, 31, 0)), 32)); // INSTPAT(\"0000001 ????? ????? 100 ????? 01110 11\", divw, R, R(dest) = SEXT(S32(BITS(src1, 31, 0)) / S32(BITS(src2, 31, 0)), 32)); // INSTPAT(\"??????? ????? ????? ??? ????? 11011 11\", jal, J, R(dest) = s->pc + 4; s->dnpc = s->pc + src1); // INSTPAT(\"??????? ????? ????? 000 ????? 11001 11\", jalr, I, R(dest) = s->pc + 4; s->dnpc = ((src1 + src2) & (~U64(1)))); // INSTPAT(\"??????? ????? ????? 000 ????? 00000 11\", lb, I, R(dest) = SEXT(Mr(src1 + src2, 1), 8)); // INSTPAT(\"??????? ????? ????? 100 ????? 00000 11\", lbu, I, R(dest) = Mr(src1 + src2, 1)); // INSTPAT(\"??????? ????? ????? 011 ????? 00000 11\", ld, I, R(dest) = Mr(src1 + src2, 8)); // INSTPAT(\"??????? ????? ????? 001 ????? 00000 11\", lh, I, R(dest) = SEXT(Mr(src1 + src2, 2), 16)); // INSTPAT(\"??????? ????? ????? 101 ????? 00000 11\", lhu, I, R(dest) = Mr(src1 + src2, 2)); // INSTPAT(\"??????? ????? ????? 010 ????? 00000 11\", lw, I, R(dest) = SEXT(Mr(src1 + src2, 4), 32)); // INSTPAT(\"??????? ????? ????? 110 ????? 00000 11\", lwu, I, R(dest) = Mr(src1 + src2, 4)); // INSTPAT(\"??????? ????? ????? ??? ????? 01101 11\", lui, U, R(dest) = src1); // INSTPAT(\"0000001 ????? ????? 000 ????? 01100 11\", mul, R, R(dest) = src1 * src2); // INSTPAT(\"0000001 ????? ????? 000 ????? 01110 11\", mulw, R, R(dest) = SEXT(BITS(src1 * src2, 31, 0), 32)); // INSTPAT(\"0000000 ????? ????? 110 ????? 01100 11\", or , R, R(dest) = src1 | src2); // INSTPAT(\"??????? ????? ????? 110 ????? 00100 11\", ori, I, R(dest) = src1 | src2); // INSTPAT(\"0000001 ????? ????? 110 ????? 01100 11\", rem, R, R(dest) = S64(src1) % S64(src2)); // INSTPAT(\"0000001 ????? ????? 111 ????? 01100 11\", remu, R, R(dest) = U64(src1) % U64(src2)); // INSTPAT(\"0000001 ????? ????? 111 ????? 01110 11\", remuw, R, R(dest) = SEXT(U32(BITS(src1, 31, 0)) % U32(BITS(src2, 31, 0)), 32)); // INSTPAT(\"0000001 ????? ????? 110 ????? 01110 11\", remw, R, R(dest) = SEXT(S32(BITS(src1, 31, 0)) % S32(BITS(src2, 31, 0)), 32)); // INSTPAT(\"??????? ????? ????? 000 ????? 01000 11\", sb, S, Mw(src1 + dest, 1, BITS(src2, 7, 0))); // INSTPAT(\"??????? ????? ????? 011 ????? 01000 11\", sd, S, Mw(src1 + dest, 8, src2)); // INSTPAT(\"??????? ????? ????? 001 ????? 01000 11\", sh, S, Mw(src1 + dest, 2, BITS(src2, 15, 0))); // INSTPAT(\"??????? ????? ????? 010 ????? 01000 11\", sw, S, Mw(src1 + dest, 4, BITS(src2, 31, 0))); // INSTPAT(\"0000000 ????? ????? 001 ????? 01100 11\", sll, R, R(dest) = src1 << src2); // INSTPAT(\"000000? ????? ????? 001 ????? 00100 11\", slli, I, R(dest) = src1 << src2); // INSTPAT(\"000000? ????? ????? 001 ????? 00110 11\", slliw, I, R(dest) = SEXT(BITS(src1 << src2, 31, 0), 32)); // INSTPAT(\"0000000 ????? ????? 001 ????? 01110 11\", sllw, R, R(dest) = SEXT(BITS(src1 << BITS(src2, 4, 0), 31, 0), 32)); // INSTPAT(\"0000000 ????? ????? 010 ????? 01100 11\", slt, R, R(dest) = S64(src1) < S64(src2)); // INSTPAT(\"??????? ????? ????? 010 ????? 00100 11\", slti, I, R(dest) = S64(src1) < S64(src2)); // INSTPAT(\"??????? ????? ????? 011 ????? 00100 11\", sltiu, I, R(dest) = U64(src1) < U64(src2)); // INSTPAT(\"0000000 ????? ????? 011 ????? 01100 11\", sltu, R, R(dest) = U64(src1) < U64(src2)); // INSTPAT(\"0100000 ????? ????? 101 ????? 01100 11\", sra, R, R(dest) = S64(src1) >> src2); // INSTPAT(\"010000? ????? ????? 101 ????? 00100 11\", srai, I, R(dest) = S64(src1) >> src2); // INSTPAT(\"010000? ????? ????? 101 ????? 00110 11\", sraiw, I, R(dest) = SEXT(S32(BITS(src1, 31, 0)) >> src2, 32)); // INSTPAT(\"0100000 ????? ????? 101 ????? 01110 11\", sraw, R, R(dest) = SEXT(S32(BITS(src1, 31, 0)) >> BITS(src2, 4, 0), 32)); // INSTPAT(\"0000000 ????? ????? 101 ????? 01100 11\", srl, R, R(dest) = U64(src1) >> src2); // INSTPAT(\"000000? ????? ????? 101 ????? 00100 11\", srli, I, R(dest) = U64(src1) >> src2); // INSTPAT(\"000000? ????? ????? 101 ????? 00110 11\", srliw, I, R(dest) = SEXT(U32(BITS(src1, 31, 0)) >> src2, 32)); // INSTPAT(\"0000000 ????? ????? 101 ????? 01110 11\", srlw, R, R(dest) = SEXT(U32(BITS(src1, 31, 0)) >> BITS(src2, 4, 0), 32)); // INSTPAT(\"0100000 ????? ????? 000 ????? 01100 11\", sub, R, R(dest) = src1 - src2); // INSTPAT(\"0100000 ????? ????? 000 ????? 01110 11\", subw, R, R(dest) = SEXT(BITS(src1 - src2, 31, 0), 32)); // INSTPAT(\"0000000 ????? ????? 100 ????? 01100 11\", xor, R, R(dest) = src1 ^ src2); // INSTPAT(\"??????? ????? ????? 100 ????? 00100 11\", xori, I, R(dest) = src1 ^ src2); // INSTPAT(\"0000000 00001 00000 000 00000 11100 11\", ebreak, N, NEMUTRAP(s->pc, R(10))); // R(10) is $a0 // INSTPAT(\"??????? ????? ????? ??? ????? ????? ??\", inv, N, INV(s->pc)); // INSTPAT_END(); \u6ce8\u610f\uff1a \u9700\u8981\u7279\u522b\u6ce8\u610f \u5206\u652f\u6307\u4ee4 \uff0c\u548c\u79fb\u4f4d\u6307\u4ee4\uff0c\u6709\u7b26\u53f7\u6570\u548c\u65e0\u7b26\u53f7\u6570\u9700\u8981\u7279\u522b\u6307\u5b9a dummy.c \u00b6 \u6700\u7b80\u5355\u7684\u7a0b\u5e8f int main () { return 0 ; } \u53cd\u6c47\u7f16\u5982\u4e0b Disassembly of section .text : 0000000080000000 < _start > : 80000000: 00000413 li s0 , 0 //\u7b49\u6548\u4e8e addi s0 x0 0 80000004: 00009117 auipc sp , 0x9 80000008: ffc10113 addi sp , sp ,- 4 # 80009000 <_end> 8000000 c: 00 c000ef jal ra , 80000018 < _trm_init > 0000000080000010 < main > : 80000010: 00000513 li a0 , 0 80000014: 00008067 ret 0000000080000018 < _trm_init > : 80000018: ff010113 addi sp , sp ,- 16 8000001 c: 00000517 auipc a0 , 0x0 80000020: 01 c50513 addi a0 , a0 , 28 # 80000038 <_etext> 80000024: 00113423 sd ra , 8 ( sp ) 80000028: fe9ff0ef jal ra , 80000010 < main > 8000002 c: 00050513 mv a0 , a0 80000030: 00100073 ebreak 80000034: 0000006 f j 80000034 < _trm_init + 0x1c > \u6d89\u53ca\u6307\u4ee4 \u00b6 addi jal \u8df3\u8f6c\u5e76\u94fe\u63a5\u6307\u4ee4\uff08jal\uff09\u5177\u6709\u53cc\u91cd\u529f\u80fd\u3002\u82e5\u5c06\u4e0b\u4e00\u6761\u6307\u4ee4 PC + 4 \u7684\u5730\u5740\u4fdd\u5b58\u5230\u76ee\u6807\u5bc4\u5b58\u5668\u4e2d\uff0c\u901a\u5e38\u662f\u8fd4\u56de\u5730\u5740\u5bc4\u5b58\u5668 ra\uff08\u89c1\u56fe 2.4\uff09\uff0c\u4fbf\u53ef\u4ee5\u7528\u5b83\u6765\u5b9e\u73b0\u8fc7\u7a0b\u8c03\u7528\u3002\u5982\u679c\u4f7f\u7528\u96f6\u5bc4\u5b58\u5668\uff08x0\uff09\u66ff\u6362 ra \u4f5c\u4e3a\u76ee\u6807\u5bc4\u5b58\u5668\uff0c\u5219\u53ef\u4ee5\u5b9e\u73b0\u65e0\u6761\u4ef6\u8df3\u8f6c\uff0c\u56e0\u4e3a x0 \u4e0d\u80fd\u66f4\u6539\u3002\u50cf\u5206\u652f\u4e00\u6837\uff0cjal \u5c06\u5176 20 \u4f4d\u5206\u652f\u5730\u5740\u4e58\u4ee5 2\uff0c\u8fdb\u884c\u7b26\u53f7\u6269\u5c55 \u540e\u518d\u6dfb\u52a0\u5230 PC \u4e0a\uff0c\u4fbf\u5f97\u5230\u4e86\u8df3\u8f6c\u5730\u5740\u3002 jalr \u4e66\u4e2d\u7ffb\u8bd1\u51fa\u9519\uff0cfun3 \u4e0d\u662f 010\uff0c\u53c2\u8003\u539f\u7248\u53d1\u73b0\u4e3a 000. add.c \u00b6 lw addw addiw sub sltiu bne beq fact.c \u00b6 sw mulw","title":"\u6307\u4ee4\u7c7b\u578b\u4e0e\u5bc4\u5b58\u5668"},{"location":"ysyx/RISCV64%20%E6%8C%87%E4%BB%A4%E5%AD%A6%E4%B9%A0/#_1","text":"\ud835\udc79\ud835\udc70\ud835\udc7a\ud835\udc6a-\ud835\udc7d \u57fa\u7840 | suda-morris \u4e2a\u4eba\u535a\u5ba2 RV32I 47 32\u4f4d\u5730\u5740\u7a7a\u95f4\u4e0e\u6574\u6570\u6307\u4ee4,\u652f\u630132\u4e2a\u901a\u7528\u6574\u6570\u5bc4\u5b58\u5668 RV32E 47 \u4ec5\u652f\u630116\u4e2a\u901a\u7528\u6574\u6570\u5bc4\u5b58\u5668 RV64I 59 64\u4f4d\u5730\u5740\u7a7a\u95f4\u4e0e\u6574\u6570\u6307\u4ee4,\u4ee5\u53ca\u4e00\u90e8\u520664\u4f4d\u548c32\u4f4d\u7684\u6307\u4ee4 RV128I 71 128\u4f4d\u5730\u5740\u7a7a\u95f4\u4e0e\u6574\u6570\u6307\u4ee4,\u4ee5\u53ca\u4e00\u90e8\u520664\u4f4d\u548c32\u4f4d\u7684\u6307\u4ee4 \u6269\u5c55\u6307\u4ee4\u96c6 \u6307\u4ee4\u6570 \u63cf\u8ff0 M 8 \u6574\u6570\u4e58\u6cd5\u4e0e\u9664\u6cd5\u6307\u4ee4 A 11 \u5b58\u50a8\u5668\u539f\u5b50\u64cd\u4f5c\u548cLoad-Reserved/Store-Conditional\u6307\u4ee4 F 26 \u5355\u7cbe\u5ea6(32bit)\u6d6e\u70b9\u6307\u4ee4 D 26 \u53cc\u7cbe\u5ea6(32bit)\u6d6e\u70b9\u6307\u4ee4,\u5fc5\u987b\u652f\u6301F\u6269\u5c55\u6307\u4ee4 C 46 \u538b\u7f29\u6307\u4ee4,\u6307\u4ee4\u957f\u5ea6\u4e3a16\u4f4d \u5bc4\u5b58\u5668 ABI \u540d\u5b57 \u63cf\u8ff0 Saver x0 zero \u786c\u4ef6\u8fde\u7ebf0 - x1 ra \u8fd4\u56de\u5730\u5740 Caller x2 sp \u6808\u6307\u9488 Callee x3 gp \u5168\u5c40\u6307\u9488 - x4 tp \u7ebf\u7a0b\u6307\u9488 - x5-x7 t0-t2 \u4e34\u65f6\u5bc4\u5b58\u5668 Caller x8 s0/fp \u4fdd\u5b58\u7684\u5bc4\u5b58\u5668/\u5e27\u6307\u9488 Callee x9 s1 \u4fdd\u5b58\u5bc4\u5b58\u5668 \u4fdd\u5b58\u539f\u8fdb\u7a0b\u4e2d\u7684\u5173\u952e\u6570\u636e\uff0c \u907f\u514d\u5728\u51fd\u6570\u8c03\u7528\u8fc7\u7a0b\u4e2d\u88ab\u7834\u574f Callee x10-x11 a0-a1 \u51fd\u6570\u53c2\u6570/\u8fd4\u56de\u503c Caller x12-x17 a2-a7 \u51fd\u6570\u53c2\u6570 Caller x18-x27 s2-s11 \u4fdd\u5b58\u5bc4\u5b58\u5668 Callee x28-x31 t3-t6 \u4e34\u65f6\u5bc4\u5b58\u5668 Calle \u516d\u79cd\u6307\u4ee4\u683c\u5f0f \u6240\u6709\u6307\u4ee4\u5728\u5185\u5b58\u4e2d\u4ee5\u5c0f\u6bb5\u5b58\u653e rs:\u6e90\u5bc4\u5b58\u5668 rd:\u76ee\u7684\u5bc4\u5b58\u5668 imm(immediate):\u7acb\u5373\u6570 func3:3\u4f4d\u529f\u80fd\u7801 func7:7\u4f4d\u529f\u80fd\u7801 opcode \u4e0e func3\u3001func7 \u5171\u540c\u51b3\u5b9a\u6bcf\u6761\u6307\u4ee4\u7684\u529f\u80fd \u7acb\u5373\u6570\u8868 opcode \u5bf9\u5e94\u8868 \u4f2a\u6307\u4ee4 + \u8d4b\u503c\u6307\u4ee4 move mv rd , rs # \u7b49\u6548\u4e8e addi rd, rs, x0 + \u52a0\u8f7d\u7acb\u5373\u6570 load immedia li rd, 13 # \u7b49\u6548\u4e8e addi rd, x0, 13 + \u51fd\u6570\u8c03\u7528\u548c\u8fd4\u56de jal my_foo # \u51fd\u6570\u8c03\u7528 ret # \u51fd\u6570\u8fd4\u56de\uff0c\u7b49\u6548\u4e8e jr ra\uff0c\u7b49\u6548\u4e8e jalr x0, ra, 0","title":"\u6307\u4ee4\u7c7b\u578b\u4e0e\u5bc4\u5b58\u5668"},{"location":"ysyx/RISCV64%20%E6%8C%87%E4%BB%A4%E5%AD%A6%E4%B9%A0/#cpu-test","text":"// INSTPAT_START(); // INSTPAT(\"0000000 ????? ????? 000 ????? 01100 11\", add, R, R(dest) = src1 + src2); // INSTPAT(\"??????? ????? ????? 000 ????? 00100 11\", addi, I, R(dest) = src1 + src2); // INSTPAT(\"??????? ????? ????? 000 ????? 00110 11\", addiw, I, R(dest) = SEXT(BITS(src1 + src2, 31, 0), 32)); // INSTPAT(\"0000000 ????? ????? 000 ????? 01110 11\", addw, R, R(dest) = SEXT(BITS(src1 + src2, 31, 0), 32)); // INSTPAT(\"0000000 ????? ????? 111 ????? 01100 11\", and, R, R(dest) = src1 & src2); // INSTPAT(\"??????? ????? ????? 111 ????? 00100 11\", andi, I, R(dest) = src1 & src2); // INSTPAT(\"??????? ????? ????? ??? ????? 00101 11\", auipc, U, R(dest) = src1 + s->pc); // INSTPAT(\"??????? ????? ????? 000 ????? 11000 11\", beq, B, if (src1 == src2) s->dnpc = s->pc + dest); // INSTPAT(\"??????? ????? ????? 101 ????? 11000 11\", bge, B, if (S64(src1) >= S64(src2)) s->dnpc = s->pc + dest); // INSTPAT(\"??????? ????? ????? 111 ????? 11000 11\", bgeu, B, if (U64(src1) >= U64(src2)) s->dnpc = s->pc + dest); // INSTPAT(\"??????? ????? ????? 100 ????? 11000 11\", blt, B, if (S64(src1) < S64(src2)) s->dnpc = s->pc + dest); // INSTPAT(\"??????? ????? ????? 110 ????? 11000 11\", bltu, B, if (U64(src1) < U64(src2)) s->dnpc = s->pc + dest); // INSTPAT(\"??????? ????? ????? 001 ????? 11000 11\", bne, B, if (src1 != src2) s->dnpc = s->pc + dest); // INSTPAT(\"0000001 ????? ????? 100 ????? 01100 11\", div, R, R(dest) = S64(src1) / S64(src2)); // INSTPAT(\"0000001 ????? ????? 101 ????? 01100 11\", divu, R, R(dest) = U64(src1) / U64(src2)); // INSTPAT(\"0000001 ????? ????? 101 ????? 01110 11\", divuw, R, R(dest) = SEXT(U32(BITS(src1, 31, 0)) / U32(BITS(src2, 31, 0)), 32)); // INSTPAT(\"0000001 ????? ????? 100 ????? 01110 11\", divw, R, R(dest) = SEXT(S32(BITS(src1, 31, 0)) / S32(BITS(src2, 31, 0)), 32)); // INSTPAT(\"??????? ????? ????? ??? ????? 11011 11\", jal, J, R(dest) = s->pc + 4; s->dnpc = s->pc + src1); // INSTPAT(\"??????? ????? ????? 000 ????? 11001 11\", jalr, I, R(dest) = s->pc + 4; s->dnpc = ((src1 + src2) & (~U64(1)))); // INSTPAT(\"??????? ????? ????? 000 ????? 00000 11\", lb, I, R(dest) = SEXT(Mr(src1 + src2, 1), 8)); // INSTPAT(\"??????? ????? ????? 100 ????? 00000 11\", lbu, I, R(dest) = Mr(src1 + src2, 1)); // INSTPAT(\"??????? ????? ????? 011 ????? 00000 11\", ld, I, R(dest) = Mr(src1 + src2, 8)); // INSTPAT(\"??????? ????? ????? 001 ????? 00000 11\", lh, I, R(dest) = SEXT(Mr(src1 + src2, 2), 16)); // INSTPAT(\"??????? ????? ????? 101 ????? 00000 11\", lhu, I, R(dest) = Mr(src1 + src2, 2)); // INSTPAT(\"??????? ????? ????? 010 ????? 00000 11\", lw, I, R(dest) = SEXT(Mr(src1 + src2, 4), 32)); // INSTPAT(\"??????? ????? ????? 110 ????? 00000 11\", lwu, I, R(dest) = Mr(src1 + src2, 4)); // INSTPAT(\"??????? ????? ????? ??? ????? 01101 11\", lui, U, R(dest) = src1); // INSTPAT(\"0000001 ????? ????? 000 ????? 01100 11\", mul, R, R(dest) = src1 * src2); // INSTPAT(\"0000001 ????? ????? 000 ????? 01110 11\", mulw, R, R(dest) = SEXT(BITS(src1 * src2, 31, 0), 32)); // INSTPAT(\"0000000 ????? ????? 110 ????? 01100 11\", or , R, R(dest) = src1 | src2); // INSTPAT(\"??????? ????? ????? 110 ????? 00100 11\", ori, I, R(dest) = src1 | src2); // INSTPAT(\"0000001 ????? ????? 110 ????? 01100 11\", rem, R, R(dest) = S64(src1) % S64(src2)); // INSTPAT(\"0000001 ????? ????? 111 ????? 01100 11\", remu, R, R(dest) = U64(src1) % U64(src2)); // INSTPAT(\"0000001 ????? ????? 111 ????? 01110 11\", remuw, R, R(dest) = SEXT(U32(BITS(src1, 31, 0)) % U32(BITS(src2, 31, 0)), 32)); // INSTPAT(\"0000001 ????? ????? 110 ????? 01110 11\", remw, R, R(dest) = SEXT(S32(BITS(src1, 31, 0)) % S32(BITS(src2, 31, 0)), 32)); // INSTPAT(\"??????? ????? ????? 000 ????? 01000 11\", sb, S, Mw(src1 + dest, 1, BITS(src2, 7, 0))); // INSTPAT(\"??????? ????? ????? 011 ????? 01000 11\", sd, S, Mw(src1 + dest, 8, src2)); // INSTPAT(\"??????? ????? ????? 001 ????? 01000 11\", sh, S, Mw(src1 + dest, 2, BITS(src2, 15, 0))); // INSTPAT(\"??????? ????? ????? 010 ????? 01000 11\", sw, S, Mw(src1 + dest, 4, BITS(src2, 31, 0))); // INSTPAT(\"0000000 ????? ????? 001 ????? 01100 11\", sll, R, R(dest) = src1 << src2); // INSTPAT(\"000000? ????? ????? 001 ????? 00100 11\", slli, I, R(dest) = src1 << src2); // INSTPAT(\"000000? ????? ????? 001 ????? 00110 11\", slliw, I, R(dest) = SEXT(BITS(src1 << src2, 31, 0), 32)); // INSTPAT(\"0000000 ????? ????? 001 ????? 01110 11\", sllw, R, R(dest) = SEXT(BITS(src1 << BITS(src2, 4, 0), 31, 0), 32)); // INSTPAT(\"0000000 ????? ????? 010 ????? 01100 11\", slt, R, R(dest) = S64(src1) < S64(src2)); // INSTPAT(\"??????? ????? ????? 010 ????? 00100 11\", slti, I, R(dest) = S64(src1) < S64(src2)); // INSTPAT(\"??????? ????? ????? 011 ????? 00100 11\", sltiu, I, R(dest) = U64(src1) < U64(src2)); // INSTPAT(\"0000000 ????? ????? 011 ????? 01100 11\", sltu, R, R(dest) = U64(src1) < U64(src2)); // INSTPAT(\"0100000 ????? ????? 101 ????? 01100 11\", sra, R, R(dest) = S64(src1) >> src2); // INSTPAT(\"010000? ????? ????? 101 ????? 00100 11\", srai, I, R(dest) = S64(src1) >> src2); // INSTPAT(\"010000? ????? ????? 101 ????? 00110 11\", sraiw, I, R(dest) = SEXT(S32(BITS(src1, 31, 0)) >> src2, 32)); // INSTPAT(\"0100000 ????? ????? 101 ????? 01110 11\", sraw, R, R(dest) = SEXT(S32(BITS(src1, 31, 0)) >> BITS(src2, 4, 0), 32)); // INSTPAT(\"0000000 ????? ????? 101 ????? 01100 11\", srl, R, R(dest) = U64(src1) >> src2); // INSTPAT(\"000000? ????? ????? 101 ????? 00100 11\", srli, I, R(dest) = U64(src1) >> src2); // INSTPAT(\"000000? ????? ????? 101 ????? 00110 11\", srliw, I, R(dest) = SEXT(U32(BITS(src1, 31, 0)) >> src2, 32)); // INSTPAT(\"0000000 ????? ????? 101 ????? 01110 11\", srlw, R, R(dest) = SEXT(U32(BITS(src1, 31, 0)) >> BITS(src2, 4, 0), 32)); // INSTPAT(\"0100000 ????? ????? 000 ????? 01100 11\", sub, R, R(dest) = src1 - src2); // INSTPAT(\"0100000 ????? ????? 000 ????? 01110 11\", subw, R, R(dest) = SEXT(BITS(src1 - src2, 31, 0), 32)); // INSTPAT(\"0000000 ????? ????? 100 ????? 01100 11\", xor, R, R(dest) = src1 ^ src2); // INSTPAT(\"??????? ????? ????? 100 ????? 00100 11\", xori, I, R(dest) = src1 ^ src2); // INSTPAT(\"0000000 00001 00000 000 00000 11100 11\", ebreak, N, NEMUTRAP(s->pc, R(10))); // R(10) is $a0 // INSTPAT(\"??????? ????? ????? ??? ????? ????? ??\", inv, N, INV(s->pc)); // INSTPAT_END(); \u6ce8\u610f\uff1a \u9700\u8981\u7279\u522b\u6ce8\u610f \u5206\u652f\u6307\u4ee4 \uff0c\u548c\u79fb\u4f4d\u6307\u4ee4\uff0c\u6709\u7b26\u53f7\u6570\u548c\u65e0\u7b26\u53f7\u6570\u9700\u8981\u7279\u522b\u6307\u5b9a","title":"cpu-test"},{"location":"ysyx/RISCV64%20%E6%8C%87%E4%BB%A4%E5%AD%A6%E4%B9%A0/#dummyc","text":"\u6700\u7b80\u5355\u7684\u7a0b\u5e8f int main () { return 0 ; } \u53cd\u6c47\u7f16\u5982\u4e0b Disassembly of section .text : 0000000080000000 < _start > : 80000000: 00000413 li s0 , 0 //\u7b49\u6548\u4e8e addi s0 x0 0 80000004: 00009117 auipc sp , 0x9 80000008: ffc10113 addi sp , sp ,- 4 # 80009000 <_end> 8000000 c: 00 c000ef jal ra , 80000018 < _trm_init > 0000000080000010 < main > : 80000010: 00000513 li a0 , 0 80000014: 00008067 ret 0000000080000018 < _trm_init > : 80000018: ff010113 addi sp , sp ,- 16 8000001 c: 00000517 auipc a0 , 0x0 80000020: 01 c50513 addi a0 , a0 , 28 # 80000038 <_etext> 80000024: 00113423 sd ra , 8 ( sp ) 80000028: fe9ff0ef jal ra , 80000010 < main > 8000002 c: 00050513 mv a0 , a0 80000030: 00100073 ebreak 80000034: 0000006 f j 80000034 < _trm_init + 0x1c >","title":"dummy.c"},{"location":"ysyx/RISCV64%20%E6%8C%87%E4%BB%A4%E5%AD%A6%E4%B9%A0/#_2","text":"addi jal \u8df3\u8f6c\u5e76\u94fe\u63a5\u6307\u4ee4\uff08jal\uff09\u5177\u6709\u53cc\u91cd\u529f\u80fd\u3002\u82e5\u5c06\u4e0b\u4e00\u6761\u6307\u4ee4 PC + 4 \u7684\u5730\u5740\u4fdd\u5b58\u5230\u76ee\u6807\u5bc4\u5b58\u5668\u4e2d\uff0c\u901a\u5e38\u662f\u8fd4\u56de\u5730\u5740\u5bc4\u5b58\u5668 ra\uff08\u89c1\u56fe 2.4\uff09\uff0c\u4fbf\u53ef\u4ee5\u7528\u5b83\u6765\u5b9e\u73b0\u8fc7\u7a0b\u8c03\u7528\u3002\u5982\u679c\u4f7f\u7528\u96f6\u5bc4\u5b58\u5668\uff08x0\uff09\u66ff\u6362 ra \u4f5c\u4e3a\u76ee\u6807\u5bc4\u5b58\u5668\uff0c\u5219\u53ef\u4ee5\u5b9e\u73b0\u65e0\u6761\u4ef6\u8df3\u8f6c\uff0c\u56e0\u4e3a x0 \u4e0d\u80fd\u66f4\u6539\u3002\u50cf\u5206\u652f\u4e00\u6837\uff0cjal \u5c06\u5176 20 \u4f4d\u5206\u652f\u5730\u5740\u4e58\u4ee5 2\uff0c\u8fdb\u884c\u7b26\u53f7\u6269\u5c55 \u540e\u518d\u6dfb\u52a0\u5230 PC \u4e0a\uff0c\u4fbf\u5f97\u5230\u4e86\u8df3\u8f6c\u5730\u5740\u3002 jalr \u4e66\u4e2d\u7ffb\u8bd1\u51fa\u9519\uff0cfun3 \u4e0d\u662f 010\uff0c\u53c2\u8003\u539f\u7248\u53d1\u73b0\u4e3a 000.","title":"\u6d89\u53ca\u6307\u4ee4"},{"location":"ysyx/RISCV64%20%E6%8C%87%E4%BB%A4%E5%AD%A6%E4%B9%A0/#addc","text":"lw addw addiw sub sltiu bne beq","title":"add.c"},{"location":"ysyx/RISCV64%20%E6%8C%87%E4%BB%A4%E5%AD%A6%E4%B9%A0/#factc","text":"sw mulw","title":"fact.c"},{"location":"ysyx/verilator/","text":"\u5f15\u51fa\u7684\u9876\u5c42\u4fe1\u53f7\u5982\u679c\u60f3\u8981\u5728 cpp \u4e2d\u6539\u53d8\u5176\u503c\u7684\u8bdd\uff0c\u9700\u8981\u8bbe\u7f6e\u4e3a input \u5c5e\u6027","title":"Verilator"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/","text":"[toc] \u5357\u4eac\u5927\u5b66 \u201c\u8ba1\u7b97\u673a\u7cfb\u7edf\u57fa\u7840\u5b9e\u9a8c\u201d \u00b6 5.9 Verilog\u5f00\u6e90\u7684\u7efc\u5408\u5de5\u5177-Yosys \u00b7 FPGA\u4f7f\u7528\u7b14\u8bb0 \u00b7 \u770b\u4e91 (kancloud.cn) PA0 \u642d\u5efa\u73af\u5883 \u00b6 \u867d\u7136\u8bf4\u9700\u8981\u4f7f\u7528\u5e26GUI\u768464\u4f4dLinux \u4f46\u662f\u4e0d\u60f3\u88c5\u865a\u62df\u673a\uff0c\u81ea\u5df1\u53c8\u5728\u963f\u91cc\u4e91\u4e0a\u6709\u4e00\u53f0\u670d\u52a1\u5668\uff0c\u5e76\u4e14\u5df2\u7ecf\u914d\u7f6e\u597d\u4e86 X11 \u8f6c\u53d1\uff0c\u5c31\u5148\u8bd5\u8bd5\u5728\u963f\u91cc\u4e91\u670d\u52a1\u5668\u4e0a\u642d\u5efa\u73af\u5883\uff0c\u5b9e\u5728\u4e0d\u884c\u518d\u5207\u6362\u5230\u672c\u5730\u3002 \u8981\u6c42LLVM \u73af\u5883\u7248\u672c >= 11 \u00b6 \uff08\u4e00\uff09LLVM\u6982\u8ff0\u2014\u2014\u4ecb\u7ecd\u4e0e\u5b89\u88c5 - \u77e5\u4e4e (zhihu.com) \u7531\u4e8e\u6211\u4f7f\u7528\u7684\u5f00\u53d1\u73af\u5883\u662f Ubuntu20.04\uff0c\u901a\u8fc7 APT \u5b89\u88c5\u7684 LLVM \u7684\u7248\u672c\u53f7\u662f10\u3002\u9700\u8981\u81ea\u884c\u5b89\u88c5\u9ad8\u7248\u672c\u7684 LLVM , \u53c2\u8003\u4e0a\u8ff0\u6587\u7ae0\u3002 \u4f7f\u7528\u5b98\u65b9\u5b89\u88c5\u811a\u672c\u5b89\u88c5\u3002 #\u4ec5\u9002\u7528\u4e8eDebian/Ubuntu wget https://apt.llvm.org/llvm.sh chmod +x llvm.sh #\u7248\u672c\u53f713 sudo ./llvm.sh 13 \u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u67e5\u770b LLVM \u7684\u7248\u672c\u3002\u3002 llvm-config --version clang -v \u5176\u4e2d llvm-config \u662f\u4e00\u4e2a\u914d\u7f6e\u6587\u4ef6\uff0c\u544a\u8bc9\u5176\u4ed6\u8f6f\u4ef6 llvm \u5f53\u524d\u7684\u5e93\u76ee\u5f55\u5728\u54ea\u91cc\u7b49\u7b49\u3002 clang \u5c31\u7c7b\u4f3c\u4e8e gcc \u3002\u901a\u8fc7\u4e0a\u8ff0\u811a\u672c\u5b89\u88c5\u9ad8\u7248\u672c\u53f7\u7684 llvm \u540e\u3002\u7cfb\u7edf\u4e2d\u5c31\u540c\u65f6\u5b58\u5728 llvm-10 llvm-13 \u3002 \u5176\u5b9e\u6211\u4eec\u5e73\u5e38\u8f93\u5165\u7684\u547d\u4ee4 gcc \u7b49\uff0c\u5f88\u591a\u90fd\u662f\u4e00\u4e2a\u8f6f\u8fde\u63a5\uff0c\u8fde\u63a5\u5230 \u6b63\u771f\u7684\u7a0b\u5e8f\u4e0a\uff0c\u8fd9\u6837\u53ef\u4ee5\u65b9\u4fbf\u7248\u672c\u7684\u5207\u6362\u548c\u5347\u7ea7\u3002\u8fdb\u5165 /usr/bin \u76ee\u5f55\u4e0b\u67e5\u770b\u5bf9\u5e94\u5173\u7cfb\u3002 ls -al | grep llvm \u90fd\u662f\u4e00\u4e9b\u8f6f\u8fde\u63a5\uff0c\u6211\u4eec\u628a\u6211\u4eec\u9700\u8981\u7684\u6539\u4e86\u5c31\u884c\u3002 llvm-confg \u548c clang \u3002 ##\u4fee\u6539\u8f6f\u8fde\u63a5\u547d\u4ee4\u5982\u4e0b ## ln [\u53c2\u6570][\u6e90\u6587\u4ef6\u6216\u76ee\u5f55][\u76ee\u6807\u6587\u4ef6\u6216\u76ee\u5f55] ln \u2013snf /var/www/test1 /var/test \u4fee\u6539\u5b8c\u6210\u540e\u5c31\u53ef\u4ee5\u7f16\u8bd1\u6210\u529f\u4e86\u3002 \u4f18\u7f8e\u7684\u9000\u51fa \u00b6 \u9519\u8bef\u4ee3\u7801\uff1a make: *** [/home/leesum/ysyx-workbench/nemu/scripts/native.mk:38: run] Error 1 \u5176\u5b9e\u770b\u4e0d\u51fa\u4ec0\u4e48\u4e1c\u897f\u3002 \u5177\u4f53\u5728\u4ee3\u7801\u4e2d\u67e5\u8be2 \u8fd4\u56de\u4e86 1 \u3002 \u6700\u5f00\u59cb\u6211\u76f4\u63a5\u7c97\u66b4\u7684\u5c06 return !good; \u6539\u4e3a\u4e86 return good; , \u6536\u5230\u4e86\u53d8\u91cf\u540d\u7684\u8bef\u5bfc\u3002\u540e\u9762\u6df1\u5165\u5206\u6790\uff0c\u53d1\u73b0\u548c nemu_state \u6709\u5173\u3002\u9605\u8bfb\u6e90\u7801\uff0c\u5728\u9000\u51fa\u547d\u4ee4\u6267\u884c\u51fd\u6570\u4e0a static int cmd_q(char *args) \u6539\u53d8\u4e00\u4e0b\u72b6\u6001\u5c31\u884c\u3002 PA1 \u00b6 \u5355\u6b65\u6267\u884c \u00b6 \u4e3b\u8981\u662f\u63a5\u6536\u4e00\u4e2a\u53c2\u6570\uff0c\u7136\u540e\u6267\u884c cpu_exec(N) static int cmd_si ( char * args ) { int N ; if ( NULL == args ) { N = 1 ; //\u9ed8\u8ba4\u503c 1 } else { sscanf ( args , \"%d\" , & N ); } DEBUG_S ( \"cpu_exec:%d, \\n \" , N ); cpu_exec ( N ); return 0 ; } \u6253\u5370\u5bc4\u5b58\u5668 \u00b6 \u8fd9\u4e2a\u6bd4\u8f83\u7b80\u5355, \u53c2\u6570\u83b7\u53d6\u5229\u7528\u4e86 sscanf \u51fd\u6570\u3002 void isa_reg_display () { for ( int i = 0 ; i < 32 ; i ++ ) { /* \u6253\u5370\u5bc4\u5b58\u5668\u540d\u79f0\u548c\u5185\u5bb9 */ printf ( \"%d:%s \\t %lx \\n \" , i , reg_name ( i , 64 ), gpr ( i )); } /* pc \u5bc4\u5b58\u5668 */ printf ( \"%d:%s \\t %lx \\n \" , 33 , \"pc\" , cpu . pc ); } \u5185\u5b58\u626b\u63cf \u00b6 \u8bf4\u5b9e\u8bdd\u8fd9\u4e2a\u4e5f\u633a\u7b80\u5355\u7684\uff0c\u4e0d\u8fc7\u6211\u5728\u8fd9\u4e0a\u9762\u9047\u89c1\u4e86\u4e00\u4e2a\u5927\u5751\uff0c\u8017\u8d39\u4e86\u633a\u4e45\u7684\u65f6\u95f4\u3002 \u9996\u5148\u5229\u7528 sscanf \u83b7\u53d6\u4e24\u4e2a\u53c2\u6570, %d \u53ef\u4ee5\u83b7\u53d6\u5341\u8fdb\u5236\uff0c %x \u53ef\u4ee5\u83b7\u53d6\u5341\u516d\u8fdb\u5236\uff0c\u5f88\u667a\u80fd\u3002 sscanf ( args , \"%d %x\" , & len , & addr ); \u7136\u540e\u8c03\u7528 vaddr_read \u8bfb\u53d6\u5185\u5b58\uff0c\u5c31\u53ef\u4ee5\u663e\u793a\u4e86\u3002\u662f\u633a\u7b80\u5355\u7684\uff0c\u4f46\u6211\u5c31\u662f\u5728\u663e\u793a\u8fd9\u4e00\u6b65\u4e0a\u9047\u89c1\u4e86\u5927\u5751\uff0c, \u56e0\u4e3a\u662f riscv64 \uff0c\u6240\u4ee5 \u6700\u5f00\u59cb\u6211\u6bcf\u4e00\u6b21\u8bfb\u53d6 vaddr_read(addr, 8) 8byte\u3002\u4f7f\u7528 printf \u6253\u5370\u6570\u636e\u3002 printf ( \"%016x\" , data ); \u5c06\u6570\u636e\u548c\u539f\u59cb\u6570\u636e\u8fdb\u884c\u5bf9\u6bd4\uff0c\u53ea\u6709\u4f4e 4byte \u662f\u4e00\u6837\u7684\uff0c\u9ad8 4byte \u5168\u662f0\u3002\u7136\u540e\u5f00\u59cb\u7ffb\u6e90\u7801\uff0c\u5728\u5404\u79cd\u5730\u65b9\u6d4b\u8bd5\uff0c\u6362\u6210\u4e00\u6b21\u8bfb 4byte \u5c31\u662f\u6b63\u786e\u7684\u3002\u7ecf\u8fc7\u4e86\u4e00\u4e0b\u5348\u7684\u7814\u7a76\uff0c\u6700\u540e\u89c9\u5f97\u6253\u5370\u51fd\u6570\u6709\u95ee\u9898\uff0c\u67e5\u627e\u8d44\u6599\u624d\u660e\u767d %x \u53ea\u80fd\u8f93\u51fa 4byte \u5c31\u7b97 %016x \u4e5f\u53ea\u662f\u9ad8\u4f4d\u88650\u800c\u5df2\u3002\u8fd9\u662fC\u8bed\u8a00\u7684\u4e00\u4e2a\u9057\u7559\u95ee\u9898\uff0c\u540e\u9762\u6dfb\u52a0\u4e86 %p \u6765\u89e3\u51b3\u3002 C\u8bed\u8a00printf\u51fd\u6570\u8f93\u51fa\u683c\u5f0f%x\u548c%p\u7684\u5dee\u522b_\u5927\u706c\u767d\u7684\u535a\u5ba2-CSDN\u535a\u5ba2 \u9a8c\u8bc1\u5355\u6b65\u6267\u884c\u7684\u6548\u679c \u00b6 \u8fd9\u91cc\u8bf4\u57cb\u4e86\u4e00\u4e9b\u5751\uff0c\u4f46\u6211\u627e\u4e86\u4e00\u4e0b\u5348\u90fd\u6ca1\u6709\u627e\u51fa\u6765\uff0c\u5355\u6b65\u6267\u884c\u7684\u6307\u4ee4\u4e5f\u6ca1\u6709\u95ee\u9898\u3002 pc->t0 a0\u5199\u6570\u636e \u5185\u5b58\u6e05\u6570\u636e \u8868\u8fbe\u5f0f\u6c42\u503c \u00b6 \u8fd9\u91cc\u6211\u6ca1\u6709\u7528\u8bb2\u4e49\u4e0a\u63a8\u8350\u7684\u65b9\u6cd5\uff0c\u56e0\u4e3a\u6211\u5b66\u4e60\u8fc7\u4e2d\u7f00\u8868\u8fbe\u5f0f\u6c42\u503c\uff0c\u5f88\u81ea\u7136\u7684\u5c31\u8054\u60f3\u5230\u4e86\u4e00\u8d77\uff0c\u56e0\u6b64\u6211\u5728\u8fd9\u91cc\u4f7f\u7528\u7684\u662f\u4e2d\u7f00\u8868\u8fbe\u5f0f\u6c42\u503c\u65b9\u6848\u3002\u5e76\u4e14\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u5c06\u4e2d\u7f00\u8868\u8fbe\u5f0f\u6c42\u503c\u4ee3\u7801\u7528 cpp \u5199\uff0c\u53ea\u63d0\u4f9b\u4e00\u4e2a c \u63a5\u53e3\u7ed9\u5916\u90e8\u8c03\u7528\u3002 \u8868\u8fbe\u5f0f\u751f\u6210\u5668 \u00b6 \u5982\u4f55\u786e\u4fdd\u8868\u8fbe\u5f0f\u8fdb\u884c\u65e0\u7b26\u53f7\u8fd0\u7b97 \u6682\u65f6\u6ca1\u6709\u89e3\u51b3 \u5982\u4f55\u968f\u673a\u63d2\u5165\u7a7a\u683c sprintf ( str , \"%*d\" , rand () % 4 , ( rand () % 20 ) - 10 ); \u91c7\u7528 printf \u8f93\u51fa\u4f4d\u5bbd\u63a7\u5236\u6765\u968f\u673a\u63d2\u5165\u7a7a\u683c 3. \u5982\u4f55\u751f\u6210\u957f\u8868\u8fbe\u5f0f, \u540c\u65f6\u4e0d\u4f1a\u4f7f buf \u6ea2\u51fa \u4eba\u4e3a\u63a7\u5236\u9012\u5f52\u8def\u5f84\uff0c buf \u957f\u5ea6\u8d85\u8fc7\u4e00\u5b9a\u6570\u503c\u4e0d\u8fdb\u884c\u9012\u5f52\u3002 static void gen_rand_expr () { int choose = rand () % 3 ; /* \u8868\u8fbe\u5f0f\u957f\u5ea6\u8d85\u8fc720\u540e\uff0c\u5f3a\u5236\u9009\u62e9 0 \u8def\u7ebf\uff0c\u4e0d\u8fdb\u884c\u9012\u5f52\u8c03\u7528 */ if ( strlen ( buf ) > 20 ) { choose = 0 ; } switch ( choose ) { case 0 : gen_num (); gen_rand_op (); gen_num (); break ; case 1 : gen ( '(' ); gen_rand_expr (); gen ( ')' ); break ; default : gen_rand_expr (); gen_rand_op (); gen_rand_expr (); break ; } } \u5982\u4f55\u8fc7\u6ee4\u6c42\u503c\u8fc7\u7a0b\u4e2d\u6709\u96640\u884c\u4e3a\u7684\u8868\u8fbe\u5f0f? \u8fd9\u4e2a\u786e\u5b9e\u633a\u96be\u7684\uff0c\u6700\u5f00\u59cb\u6211\u4e00\u76f4\u60f3\u5728\u751f\u6210\u8868\u8fbe\u5f0f\u7684\u65f6\u5019\u76f4\u63a5\u53bb\u9664\u6389\u96640\u884c\u4e3a\uff0c\u4f46\u8bd5\u4e86\u5f88\u4e45\u786e\u5b9e\u505a\u4e0d\u5230\u3002\u6700\u540e\u60f3\u8d77\u6765\u4e86\u6700\u5f00\u59cb\u53d8\u91cf nemu \u65f6\uff0c -Werror \u5c06\u8b66\u544a\u8f6c\u6362\u4e3a\u9519\u8bef\u3002\u4e00\u4e0b\u5b50\u8c41\u7136\u5f00\u6717\u3002\u8457\u9700\u8981\u5728\u7f16\u8bd1\u4ee3\u7801\u65f6\u52a0\u4e0a -Werror \u5c06\u96640\u8b66\u544a\u8f6c\u6362\u4e3a\u9519\u8bef\uff0c\u8ba9\u7f16\u8bd1\u4e0d\u901a\u8fc7\u5c31\u884c\u4e86\u3002 /* \u6dfb\u52a0 Werror \u5c06\u96640\u8b66\u544a\u8f6c\u6362\u6210\u9519\u8bef,\u5bfc\u81f4\u7f16\u8bd1\u5931\u8d25*/ int ret = system ( \"gcc -Werror /tmp/.code.c -o /tmp/.expr\" ); if ( ret != 0 ) { //printf(\"\u9519\u8bef\uff1a-Wdiv-by-zero\\r\\n\"); continue ; } \u5229\u7528\u8868\u8fbe\u5f0f\u751f\u6210\u5668\u6d4b\u8bd5\u4ee3\u7801 \u00b6 /* \u8868\u8fbe\u5f0f\u6d4b\u8bd5 */ void expr_test ( void ) { bool ret ; uint64_t testinput , testoutput ; FILE * fp = fopen ( \"/home/leesum/ysyx-workbench/nemu/tools/gen-expr/input\" , \"r\" ); if ( fp == NULL ) { printf ( \"Fail to open file! \\n \" ); exit ( 0 ); //\u9000\u51fa\u7a0b\u5e8f\uff08\u7ed3\u675f\u7a0b\u5e8f\uff09 } char buf [ 1024 ]; /* \u8bfb\u53d6\u6bcf\u4e00\u884c * \u6362\u884c\u952e\u88ab\u5751\u4e86 * fgets\u51fd\u6570\uff0c\u4f1a\u9ed8\u8ba4\u6dfb\u52a0\u6362\u884c\\n,\u5bfc\u81f4\u5b57\u7b26\u4e32\u7ed3\u5c3e\u662f \\n\\0\" */ while ( fgets ( buf , sizeof ( buf ), fp ) != NULL ) { char * find = strchr ( buf , '\\n' ); //\u627e\u51fadata\u4e2d\u7684\"\\n\" if ( find ) * find = '\\0' ; //\u66ff\u6362 /* \u53c2\u8003nemu\u8bfb\u53d6\u547d\u4ee4\u7684\u4ee3\u7801 */ char * cmd = strtok ( buf , \" \" ); char * args = cmd + strlen ( cmd ) + 1 ; DEBUG_M ( \"%s \\n \" , buf ); DEBUG_M ( \"%s \\n \" , cmd ); DEBUG_M ( \"%s \\n \" , args ); testinput = atoi ( cmd ); //\u9ed8\u8ba4\u7ed3\u679c testoutput = expr ( args , & ret ); //\u8f93\u51fa\u7ed3\u679c Assert ( testinput == testoutput , \"input:%lu,output:%lu\" , testinput , testoutput ); } fclose ( fp ); } \u5e26\u9664\u6cd5 \u00b6 \u751f\u6210\u4e00\u5343\u4e2a\u5e26\u9664\u6cd5\u7684\u8868\u8fbe\u5f0f\u3002\u7ed3\u679c\u6d4b\u8bd5\uff0c\u6709\u4e9b\u80fd\u901a\u8fc7\uff0c\u6709\u4e9b\u901a\u4e0d\u8fc7\u3002\u6df1\u5165\u5206\u6790\uff0c\u53d1\u73b0\u539f\u56e0\u5982\u4e0b\u3002 9 (( ( 7 / 14 / 4-16 ) / 3 + 2 ) / 8 - 16 -2 / 6 * 1 * 18 / 11 * 15 / 10 / 14 ) + 18 + 5 + 4 / 2 \u5927\u591a\u6570\u90fd\u6709 1/2 \u7c7b\u4f3c\u64cd\u4f5c\uff0c\u4e0e 0 \u76f8\u5173\uff0c\u7531\u4e8e\u65e0\u7b26\u53f7\u8fd0\u7b97\u987a\u5e8f\u7684\u95ee\u9898\uff0c\u53ef\u80fd\u4f1a\u6709\u820d\u5165 \u4e0d\u5e26\u9664\u6cd5 \u00b6 \u5168\u90e8\u901a\u8fc7 \u642d\u5efaverilator\u4eff\u771f\u73af\u5883 \u00b6 \u53cc\u63a7\u5f00\u5173 \u00b6 \u7ecf\u8fc7\u9605\u8bfb VERILATOR \u7684\u5b98\u65b9\u624b\u518c\uff0c\u6210\u529f\u642d\u5efa\u51fa\u4eff\u771f\u73af\u5883\uff0c\u5e76\u4e14\u751f\u6210\u4e86\u6ce2\u5f62 VCD \u6587\u4ef6\u3002 \u5728 ysyx-workbench/npc/csrc \u548c /home/leesum/ysyx-workbench/npc/vsrc \u4e0b\u5206\u522b\u521b\u5efa lab01switch.cpp lab01switch.v \u3002 #include <stdio.h> #include <stdlib.h> #include <assert.h> #include <verilated.h> #include <Vlab01switch.h> #include \"verilated_vcd_c.h\" // lab01 \u5f00\u5173\u5b9e\u9a8c int sim_time = 999 ; //\u4eff\u771f\u65f6\u95f4 int main ( int argc , char ** argv , char ** env ) { //\u6253\u5f00Verilog\u9876\u5c42\u6587\u4ef6 VerilatedContext * contextp = new VerilatedContext ; contextp -> commandArgs ( argc , argv ); Vlab01switch * top = new Vlab01switch { contextp }; // \u8bb0\u5f55\u6ce2\u5f62 Verilated :: traceEverOn ( true ); VerilatedVcdC * tfp = new VerilatedVcdC (); top -> trace ( tfp , 0 ); tfp -> open ( \"1.vcd\" ); //\u5f00\u59cb\u4eff\u771f while ( ! contextp -> gotFinish () && contextp -> time () < sim_time ) { //\u4e3a\u9876\u5c42\u6a21\u5757 a b \u6dfb\u52a0\u8f93\u5165 int a = rand () & 1 ; int b = rand () & 1 ; top -> a = a ; top -> b = b ; //\u4eff\u771f\u65f6\u95f4+1 contextp -> timeInc ( 1 ); //\u5f00\u59cb\u8bc4\u4f30\u7ed3\u679c top -> eval (); //\u6dfb\u52a0\u6ce2\u5f62\u6570\u636e\u81f3 VCD \u6587\u4ef6\u4e2d tfp -> dump ( contextp -> time ()); //\u6253\u5370\u7ed3\u679c printf ( \"a = %d, b = %d, f = %d \\n \" , a , b , top -> f ); //\u9a8c\u8bc1 assert ( top -> f == a ^ b ); } top -> final (); //\u4fdd\u5b58\u6587\u4ef6 tfp -> close (); delete top ; delete contextp ; return 0 ; } // lab01 \u5f00\u5173\u5b9e\u9a8c module lab01switch ( input a , input b , output f ); assign f = a ^ b ; endmodule \u8f93\u5165\u547d\u4ee4 verilator -Wall --cc --exe --build ./csrc/lab01switch.cpp ./vsrc/lab01switch.v --trace \u7f16\u8bd1\uff0c\u5e76\u4e14\u5f00\u542f trace \u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\u540e\u8fd0\u884c\u5982\u4e0b \u67e5\u770b\u6ce2\u5f62\u6570\u636e \u00b6 \u5e76\u4e14\u751f\u6210\u4e86\u6ce2\u5f62\u6587\u4ef6 1.vcd \uff0c\u5229\u7528 GTKWave \u6253\u5f00\u6ce2\u5f62\u6570\u636e \u7531\u4e8e\u6211\u7684\u5b9e\u9a8c\u73af\u5883\u642d\u5efa\u5728\u8fdc\u7aef\u963f\u91cc\u4e91\u670d\u52a1\u5668\u4e0a\u9762\uff0c\u53ea\u80fd\u901a\u8fc7 X11 \u8f6c\u53d1\u663e\u793a\u56fe\u5f62\u754c\u9762\uff0c\u54cd\u5e94\u901f\u5ea6\u8f83\u6162\u3002\u53ef\u4ee5\u5229\u7528\u5728 Vscode \u4e0a\u5b89\u88c5 WaveTrace \u63d2\u4ef6\u67e5\u770b VCD \u6570\u636e\u6587\u4ef6\u3002 \u7f16\u5199 Makefile \u5b9e\u73b0\u81ea\u52a8\u4eff\u771f \u00b6 \u7531\u4e8e\u6211\u4e4b\u524d\u6709\u8fc7\u7528 Makefile \u7ba1\u7406\u9879\u76ee\u7684\u7ecf\u9a8c\uff0c\u6240\u4ee5\u8fd9\u4e2a\u6bd4\u8f83\u7b80\u5355 \u4ee5\u540e\u8fdb\u884c\u65b0\u6a21\u5757\u7684\u4eff\u771f\u65f6\uff0c\u53ea\u9700\u8981\u4fee\u6539 MODULE_NAME \u5c31\u884c\u4e86\u3002 \u9047\u5230\u7684\u95ee\u9898 \u00b6 include \u95ee\u9898 \uff1a VERILATOR \u4f1a\u5c06\u7528\u4e8e\u4eff\u771f\u7684 Verilog \u6587\u4ef6\u8f6c\u6362\u4e3a\u4e00\u4e2a cpp \u6587\u4ef6\uff0c\u5e76\u4e14\u521b\u5efa\u4e00\u4e2a\u7c7b\uff0c\u7c7b\u7684\u540d\u79f0\u4e3a V<\u9876\u5c42\u6a21\u5757\u7684\u540d\u79f0> \uff0c\u800c\u5728\u6211\u4eec\u521b\u5efa\u7684\u4eff\u771f\u6587\u4ef6\u4e2d\uff0c\u4f1a include \u8fd9\u4e2a\u7c7b\uff0c\u521b\u5efa\u9876\u5c42\u6587\u4ef6\uff0c\u8fdb\u884c input \u4fe1\u53f7\u7684\u8d4b\u503c\u7b49\u7b49\u3002 \u6ce2\u5f62\u6587\u4ef6\u7684\u95ee\u9898 \uff1a\u5728 VERILATOR \u5b98\u7f51\u6587\u6863\u4e2d\uff0c\u6253\u5f00\u7684\u6587\u4ef6\u5982\u4e0b \u6211\u6309\u7167\u6587\u6863\u64cd\u4f5c\uff0c\u6b7b\u6d3b\u751f\u6210\u4e0d\u4e86 VCD \u6587\u4ef6\uff0c\u8fd9\u5176\u5b9e\u662f\u76ee\u5f55\u5173\u7cfb\u7684\u95ee\u9898\uff0c open \u65b9\u6cd5\u5728\u521b\u5efa\u6587\u4ef6\u65f6\uff0c\u82e5\u76ee\u5f55\u4e0d\u5b58\u5728\uff0c\u4e0d\u4f1a\u81ea\u5df1\u521b\u5efa\u76ee\u5f55\uff0c\u5c31\u5bfc\u81f4\u4e0d\u4f1a\u521b\u5efa\u6587\u4ef6\uff0c\u6240\u4ee5\u5728\u6253\u5f00\u3001\u521b\u5efa\u6587\u4ef6\u65f6\uff0c\u7406\u89e3\u5404\u4e2a\u6587\u4ef6\u7684\u5c42\u6b21\u5f88\u91cd\u8981\u3002 \u8fd0\u884c NVBoard \u4f8b\u5b50 \u00b6 \u5728 NVBoard \u6839\u76ee\u5f55\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf export NVBOARD_HOME=${PWD} \u4fee\u6539 NVBoard \u6e90\u7801 \u00b6 \u7531\u4e8e\u6211\u7684\u73af\u5883\u642d\u5efa\u5728\u8fdc\u7a0b\u963f\u91cc\u4e91\u670d\u52a1\u5668\u4e0a\uff0c\u6ca1\u6709 GUI \u754c\u9762\uff0c\u6211\u4e5f\u4e0d\u60f3\u901a\u8fc7\u8fdc\u7a0b\u684c\u9762\u8fde\u63a5\u5f00\u53d1\uff0c\u6240\u4ee5\u53ea\u80fd\u901a\u8fc7 X11 \u670d\u52a1\u5c06 NVBoard \u7684\u754c\u9762\u8f6c\u53d1\u5230\u672c\u5730\u673a\u5668\u4e0a\u663e\u793a\uff0c\u53d7\u5236\u4e8e X11 \u8f6c\u53d1\u6548\u7387\u548c\u670d\u52a1\u5668\u5e26\u5bbd\uff0c NVBoard \u51e0\u4e4e\u6210\u4e0d\u53ef\u7528\u7684\u72b6\u6001\uff0c\u9700\u8981\u4fee\u6539\u6e90\u7801\u6765\u6ee1\u8db3\u6211\u7684\u73af\u5883\u9700\u6c42\u3002 \u4fee\u6539\u663e\u793a\u5e27\u7387 \u00b6 \u9605\u8bfb\u6e90\u7801\u53d1\u73b0 NVBoard \u91c7\u7528 SDL \u8fdb\u884c\u56fe\u5f62\u663e\u793a\uff0c\u5e76\u4e14\u9ed8\u8ba4 FPS \u4e3a 60\uff0c SDL \u753b\u9762\u66f4\u65b0\u4e0d\u662f\u91c7\u7528\u589e\u91cf\u66f4\u65b0\uff0c\u56e0\u6b64\u6bcf\u4e00\u5e27\u753b\u9762\u90fd\u9700\u8981\u7ecf\u8fc7 X11 \u7684\u8f6c\u53d1\uff0c\u6570\u636e\u91cf\u8fc7\u5927\uff0c\u5bfc\u81f4\u6211\u8fd9\u8fb9\u672c\u5730\u663e\u793a\u76f4\u63a5\u5361\u6b7b\uff0c\u6570\u7801\u7ba1\u4e0d\u4f1a\u52a8\uff0c\u6309\u94ae\u54cd\u5e94\u901f\u5ea6\u4e5f\u5f88\u6162\u3002\u7ecf\u8fc7\u6d4b\u8bd5\u5c06 FPS \u4fee\u6539\u4e3a 5 \u540e\uff0c\u6570\u7801\u7ba1\u6210\u529f\u5b9e\u73b0\u81ea\u589e\u3002 \u4f46\u9f20\u6807\u54cd\u5e94\u4e8b\u4ef6\u8fd8\u662f\u5f88\u6162\uff0c\u65e0\u6cd5\u6b63\u5e38\u4f7f\u7528\u3002 \u4fee\u6539\u9f20\u6807\u952e\u76d8\u54cd\u5e94\u4e8b\u4ef6 \u00b6 \u9605\u8bfb\u6e90\u7801\u53d1\u73b0\uff0c NVBoard \u91c7\u7528\u5355\u7ebf\u7a0b\u7684\u5de5\u4f5c\u65b9\u5f0f\uff0c\u5728\u4e3b\u51fd\u6570\u4e2d\u4e0d\u65ad\u8c03\u7528 void nvboard_update() \u5b9e\u73b0\u753b\u9762\u7684\u5237\u65b0\u548c\u9f20\u6807\u952e\u76d8\u7684\u4e8b\u4ef6\u8bfb\u53d6\uff0c\u5e76\u4e14\u9891\u7387\u548c FPS \u76f8\u540c\u3002\u5c06\u753b\u9762\u5237\u65b0\u548c\u9f20\u6807\u4e8b\u4ef6\u8bfb\u53d6\u653e\u5728\u540c\u4e00\u8fdb\u7a0b\u4e2d\uff0c\u65e0\u7591\u4f1a\u62d6\u6162\u54cd\u5e94\u901f\u5ea6\uff0c\u56e0\u6b64\u6211\u65b0\u5efa\u4e00\u4e2a SDL\u7ebf\u7a0b \u7528\u4e8e\u5468\u671f\u6027\u7684\u8bfb\u53d6\u54cd\u5e94\u4e8b\u4ef6\uff0c\u6539\u5584\u4ee3\u7801\u3002 \u7ecf\u8fc7\u4fee\u6539\u540e\uff0c\u9f20\u6807\u4e8b\u4ef6\u54cd\u5e94\u8fc5\u901f\uff0c\u5e76\u4e14\u6570\u7801\u7ba1\u80fd\u591f\u81ea\u589e\uff0c\u867d\u7136\u7531\u4e8e X11 \u8f6c\u53d1\uff0c\u5e27\u7387\u53ea\u6709 5 \uff0c\u4f46\u662f\u5df2\u7ecf\u6ee1\u8db3\u6211\u7684\u9700\u6c42\u4e86\u3002 \u5c06\u53cc\u63a7\u5f00\u5173\u63a5\u5165 NVBoard \u00b6 \u79fb\u690dMakefile \u00b6 \u9996\u5148\u5148\u5c06 NVBoard \u7684 example \u7684 Makefile \u6587\u4ef6\u79fb\u690d\u5230\u6211\u4eec\u81ea\u5df1\u7684 Makefile \u4e0a\uff0c\u642d\u5efa NVBoard \u7f16\u8bd1\u73af\u5883\u3002\u76f4\u63a5\u5c06 CTRL A CTRL C CTRL V \u590d\u5236\u5185\u5bb9\u5230 npc/Makefile \u6587\u4ef6\u4e2d\uff0c\u7136\u540e\u5220\u9664\u91cd\u590d\u7684 clean \u7b49\u64cd\u4f5c\u3002 \u7136\u540e\u5c31\u662f\u4e0d\u65ad\u6267\u884c make \u67e5\u770b\u62a5\u9519\uff0c\u53c2\u8003 example \uff0c\u8be5\u6dfb\u52a0\u6587\u4ef6\u6dfb\u52a0\u6587\u4ef6\uff0c\u6539\u4fee\u6539\u6587\u4ef6\u4fee\u6539\u6587\u4ef6\u3002\u76f4\u5230 make \u6210\u529f\u65e0\u62a5\u9519\u3002 1. \u5728 npc \u76ee\u5f55\u4e0b\u6dfb\u52a0 constr \u6587\u4ef6\u5939\uff0c\u590d\u5236 example \u7684 .nxdc \u6587\u4ef6\uff0c\u4fee\u6539\u9876\u5c42\u6a21\u5757\u540d\u79f0\u548c\u81ea\u5df1\u76f8\u5339\u914d\uff0c\u6ce8\u91ca\u6389\u539f\u5148\u7684\u5f15\u811a\u5206\u914d\u3002 \u5220\u9664 csrc \u3001 vsrc \u4e2d\u539f\u5148\u81ea\u5e26\u7684 .c \u548c .v \u6587\u4ef6\uff0c\u907f\u514d main \u51fd\u6570\u51b2\u7a81\u3002 \u4fee\u6539 Makefile \u6587\u4ef6\u4e2d TOPNAME \u7684\u503c\uff0c\u4e0e\u81ea\u5df1\u7684\u6a21\u5757\u76f8\u5bf9\u5e94\uff0c\u5e76\u4e14\u7531\u4e8e\u539f\u5148\u6211\u4eec\u5f00\u542f\u4e86 verilator \u7684\u4eff\u771f\uff0c\u9700\u8981\u6dfb\u52a0 VERILATOR_CFLAGS --trace \u3002 \u8fd9\u662f\u57fa\u672c\u7684\u4fee\u6539\uff0c\u66f4\u5bf9\u7684\u4fee\u6539\u9700\u8981\u5728\u6267\u884c make \u65f6\u67e5\u770b\u62a5\u9519\u4fe1\u606f\u5bf9\u75c7\u4e0b\u836f\u3002 \u6240\u6709\u6587\u4ef6\u4fee\u6539\u5b8c\u6bd5\u540e\u6267\u884c make run \u5373\u53ef\u770b\u5230\u539f\u5148\u7684\u4eff\u771f\u8f93\u51fa\u3002 \u4fee\u6539 lab01switch.cpp \u63a5\u5165 NVboard \u00b6 \u9996\u5148\u9605\u8bfb example \u7684\u6e90\u7801\uff0c\u53d1\u73b0\u6709\u4e2a\u672a\u77e5\u7684\u53d8\u91cf\uff0c\u6309\u9053\u7406\u6765\u8bf4\uff0c TOP_NAME \u5e94\u8be5\u662f Vtop \u6211\u641c\u7d22 TOP_NAME \u65f6\uff0c\u6700\u7ec8\u5728 Makefile \u6587\u4ef6\u4e2d\u53d1\u73b0\u4e86\u86db\u4e1d\u9a6c\u8ff9\u3002 \u76f4\u63a5\u5728\u7f16\u8bd1\u7684\u65f6\u5019 define \u4e86 TOP_NAME \u3002 \u7ecf\u8fc7\u6478\u7d22\uff0c\u4eff\u7167 example \u5c06\u53cc\u63a7\u5f00\u5173\u63a5\u5165\u4e86 NVboard \u4e3b\u8981\u6709\u4e24\u4e2a\u65b9\u9762\u7684\u4fee\u6539\u3002 1. \u4fee\u6539 mian \u51fd\u6570\uff0c #include <nvboard.h> , \u5e76\u4e14\u5c06\u539f\u5148\u7684\u5185\u5bb9\u6ce8\u91ca\u6389\u3002\u6dfb\u52a0\u5982\u4e0b \u5176\u4e2d\u6709\u51e0\u4e2a\u6ce8\u610f\u4e8b\u9879\uff0c example \u4e2d\u4e3a\u65f6\u5e8f\u7535\u8def\uff0c\u6240\u4ee5\u5b83\u641e\u4e86\u4e2a\u65f6\u949f\u81ea\u589e\u7684\u64cd\u4f5c single_cycle() \uff0c\u5728\u91cc\u9762\u6dfb\u52a0\u4eff\u771f eval() \u3002\u800c\u6211\u8fd9\u4e2a\u662f\u7ec4\u5408\u903b\u8f91\u7535\u8def\uff0c\u867d\u7136\u4e0d\u7528\u64cd\u4f5c\u6a21\u62df\u65f6\u949f\uff0c\u4f46\u4e5f\u9700\u8981\u6dfb\u52a0\u4eff\u771f eval() , \u5426\u5219\u5f00\u5173\u4e0d\u4f1a\u6709\u6548\u679c\u3002 2. \u5f15\u811a\u7ed1\u5b9a \u8fd9\u4e2a\u5f88\u7b80\u5355\uff0c\u4eff\u7167 example \u5199\u6587\u4ef6\u5c31\u578b\u4e86\uff0c\u5728\u8fd9\u91cc\u6211\u5c06 a \u7ed1\u5b9a\u5f00\u51730\uff0c b \u7ed1\u5b9a\u5f00\u51731\uff0c\u8f93\u51fa f \u7ed1\u5b9a led0\u3002 \u8fd0\u884c\u6548\u679c \u00b6 \u8f93\u5165 make run \u5373\u53ef\u8fd0\u884c\u3002 \u5c06\u6d41\u6c34\u706f\u63a5\u5165 NVBoard \u00b6 \u77e5\u9053\u5957\u8def\u540e\u5c31\u7b80\u5355\u8bb8\u591a\u4e86\u4e3b\u8981\u5c31\u662f\u4e09\u4ef6\u4e8b 1. \u4fee\u6539 Makefile 2. \u521b\u5efa .V .cpp \u6587\u4ef6 3. \u521b\u5efa\u5f15\u811a\u5206\u914d\u6587\u4ef6 .nxdc cpp \u6587\u4ef6\u63a5\u5165 NVboard nxdc \u6587\u4ef6\u7ed1\u5b9a\u5f15\u811a RST\u5f15\u811a\u62a5\u9519, \u91c7\u7528BTNU\u5f15\u811a\u4ee3\u66ff\uff0c\u627e\u4e0d\u5230\u539f\u56e0\u3002 \u6d41\u6c34\u706f\u4eff\u771f\u6548\u679c \uff08\u7f29\u77ed\u4e86\u6d41\u6c34\u706f\u7684\u95f4\u9694\u65f6\u95f4\uff09 \u590d\u4f4d\u952e\u4eff\u771f\u6548\u679c \u6570\u7535\u5b9e\u9a8c \u00b6 \u5b9e\u9a8c\u4e00 \u9009\u62e9\u5668 \u2014 \u5357\u4eac\u5927\u5b66 \u8ba1\u7b97\u673a\u79d1\u5b66\u4e0e\u6280\u672f\u7cfb \u6570\u5b57\u903b\u8f91\u4e0e\u8ba1\u7b97\u673a\u7ec4\u6210 \u8bfe\u7a0b\u5b9e\u9a8c documentation (nju-projectn.github.io) \u5b9e\u9a8c\u4e00\uff1a\u4e8c\u4f4d\u56db\u9009\u4e00\u9009\u62e9\u5668 \u00b6 \u7f16\u5199\u4ee3\u7801 \u00b6 \u4f9d\u846b\u82a6\u753b\u74e2\uff0c cpp \u6587\u4ef6\u63a5\u5165 NVboard , V \u6587\u4ef6\u7f16\u5199\u9876\u5c42\u6a21\u5757\uff0c NXDC \u6587\u4ef6\u7ed1\u5b9a\u5f15\u811a\uff0c\u4e4b\u540e\u4fee\u6539 Makefile \u6587\u4ef6\u7f16\u8bd1\u5de5\u7a0b\u3002 Verilog CPP NXDC \u4eff\u771f\u7ed3\u679c \u00b6 \u5b9e\u9a8c\u4e8c\uff1a \u8bd1\u7801\u5668\u548c\u7f16\u7801\u5668 \u00b6 \u7f16\u5199\u4ee3\u7801 \u00b6 verilog cpp NVboard \u63a5\u5165\u6587\u4ef6\u6ca1\u6709\u6539\u52a8\uff0c\u76f4\u63a5\u6cbf\u7528\u4e0a\u4e00\u4e2a\u5b9e\u9a8c\u7684\u5c31\u53ef\u4ee5\u3002 \u5f15\u811a\u7ed1\u5b9a \u4eff\u771f\u7ed3\u679c \u00b6 \u7531\u4e8e NVboard \u6ca1\u6709\u544a\u8bc9\u6211\u662f\u5171\u9633\u6781\u8fd8\u662f\u5171\u9633\u6781\u6570\u7801\u7ba1\uff0c\u7a0b\u5e8f\u903b\u8f91\u68c0\u67e5\u4e86\u597d\u51e0\u904d\uff0c\u5bfc\u81f4\u6211\u5728\u6570\u7801\u7ba1\u4e0a\u6d6a\u8d39\u4e86\u4e00\u4e9b\u65f6\u95f4\u3002 \u756a\u5916\u7bc7\uff1a\u5f00\u6e90\u7efc\u5408\u5de5\u5177 Yosys \u00b6 \u5728\u5927\u5b66\u7684\u8bfe\u7a0b\u4e2d\u5f00\u8bbe\u8fc7 FPGA \u53ef\u8bfe\u7a0b\uff0c\u5f53\u65f6\u7528\u7684 EDA \u5de5\u5177\u662f Quartus\uff0c\u5f53\u5199\u5b8c\u4ee3\u7801\u540e\uff0c\u53ef\u4ee5\u8fdb\u884c\u7efc\u5408\uff0c\u5e76\u4e14\u53ef\u4ee5\u67e5\u770b\u7efc\u5408\u540e\u751f\u6210\u7684\u7535\u8def\u56fe\u3002\u73b0\u5728\u5728Linux\u4e0b\u7528 verilator \u4eff\u771f\uff0c\u60f3\u67e5\u770b\u7535\u8def\u56fe\uff0c\u627e\u4e86\u5f88\u4e45\uff0c\u53d1\u73b0\u4e86\u4e00\u4e2a\u5f00\u6e90\u7684\u7efc\u5408\u5de5\u5177 Yosys \u5728 ubuntu \u4e0b\u76f4\u63a5\u4f7f\u7528 apt install yosys \u5b89\u88c5\u3002\u67e5\u770b\u4f7f\u7528\u6587\u6863\uff0c\u7f16\u5199\u4e86\u4e00\u4e2a\u7b80\u5355\u4e86\u811a\u672c\u6587\u4ef6\uff0c\u7528\u4e8e\u751f\u6210\u53ef\u89c6\u5316\u7684\u7535\u8def\u56fe\u3002 \u8fd0\u884c\u540e\u4f1a\u751f\u6210 dot \u6587\u4ef6\uff0c\u5728 vscode \u4e0a\u5b89\u88c5\u63d2\u4ef6 Graphviz Interactive Preview \u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u67e5\u770b\u3002 lab03mux41 \u7528\u5230\u4e86\u4e00\u4e9b\u4e0d\u652f\u6301\u7684\u8bed\u6cd5\uff0c\u6ca1\u6709\u529e\u6cd5\u751f\u6210\u56fe\u50cf\u3002 \u5b9e\u9a8c\u4e09 \u52a0\u6cd5\u5668\u4e0eALU \u00b6 \u7a0b\u5e8f\u8bbe\u8ba1\u601d\u60f3 \u00b6 \u5728\u8003\u7814\u7684\u65f6\u5019\u5b66\u4e60 \u8ba1\u7b97\u673a\u7ec4\u6210\u539f\u7406 \u8fd9\u95e8\u8bfe\uff0c\u4e5f\u6df1\u5165\u4e86\u89e3\u8fc7 ALU \u7684\u8bbe\u8ba1\u65b9\u6cd5\uff0c\u63a5\u4e0b\u6765\u7684\u4ee3\u7801\u7f16\u5199\uff0c\u6211\u4eff\u7167\u7ecf\u5178 ALU \u901a\u8fc7\u8bbe\u7f6e PSW \u5bc4\u5b58\u5668\u6765\u5b9e\u73b0\u5bf9\u6ea2\u51fa\u3001\u7b26\u53f7\u7b49\u7b49\u4fe1\u606f\u7684\u68c0\u6d4b\u4e0e\u4fdd\u5b58\u3002 \u7f16\u5199\u4ee3\u7801 \u00b6 \u9876\u5c42\u6a21\u5757 \u5b9e\u4f8b\u5316\u4e86\u4e00\u4e2a alu \u5355\u5143\uff084\u4f4d\u8865\u7801\uff09\uff0c a \u3001 b \u4e3a\u8f93\u5165 out \u4e3a\u8f93\u51fa\uff0c\u5e76\u4e14\u8f93\u51fa\u4e86 PSW \u4e2d\u7684 \u4e00\u4e9b\u5bc4\u5b58\u5668\u3002 \u672c\u6765\u8fd8\u51c6\u5907\u5c06 a b out \u663e\u793a\u5728\u6570\u7801\u7ba1\u4e0a\uff0c\u4f46\u662f\u7531\u4e8e\u6d89\u53ca\u5230\u8865\u7801\u7684\u663e\u793a\uff0c\u8fd8\u6ca1\u6709\u8fdb\u5c55\uff0c\u5c31\u53ea\u663e\u793a\u4e86 out \u7684 \u4f4e3\u4f4d\uff080-7\uff09 . \u7535\u8def\u56fe \uff1a\u7531 yosys \u751f\u6210 ALU\u6a21\u5757 \u4e3b\u8981\u601d\u60f3\u662f\uff0c\u5148\u62ff\u5230\u8f93\u5165 a \u3001 b , \u540c\u65f6\u8ba1\u7b97\u4e0d\u540c\u64cd\u4f5c\u7684\u7ed3\u679c\uff0c\u6700\u540e\u901a\u8fc7\u4e00\u4e2a\u9009\u62e9\u5668\uff0c\u9009\u62e9\u9700\u8981\u7684\u7ed3\u679c\u3002\u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u8ba1\u7b97\u90e8\u5206\u3002 1. \u8865\u7801\u7684\u52a0\u51cf\u6cd5\uff0c\u529f\u80fd\u8986\u76d6\uff08\u52a0\u6cd5\uff0c\u51cf\u6cd5\uff0c\u6bd4\u8f83\u5927\u5c0f\uff0c \u5224\u65ad\u76f8\u7b49\uff09 2. \u903b\u8f91\u8fd0\u7b97\uff0c\u6240\u6709\u7684\u903b\u8f91\u8fd0\u7b97\u90fd\u662f\u5355\u72ec\u4e00\u6761\u7ebf\uff0c\u6211\u6ca1\u6709\u5c06\u5176\u6574\u5408\uff0c\u6309\u9053\u7406\u5e94\u8be5\u8fd8\u53ef\u4ee5\u7b80\u5316 3. \u6bd4\u8f83\u5927\u5c0f\u548c\u5224\u65ad\u76f8\u7b49\uff0c\u901a\u8fc7\u51cf\u6cd5\u548c PSW \u5bc4\u5b58\u5668\u5b9e\u73b0\u3002 \u6761\u4ef6\u8f6c\u79fb\u6307\u4ee4 - \u5feb\u61c2\u767e\u79d1 (baike.com) \u6570\u7801\u7ba1\u663e\u793a \u5f15\u811a\u7ed1\u5b9a \u4eff\u771f\u7ed3\u679c \u00b6 \u52a0\u6cd5: 3+1=4\uff0c\u672a\u6ea2\u51fa 3+(-7)=-4, \u672a\u6ea2\u51fa\uff0c\u5176\u4e2d\u53d1\u751f\u4e86\u501f\u4f4d CF \u7f6e1\uff0c\u7ed3\u679c\u4e3a\u8d1f\u6570 SF \u4f4d\u7f6e1. \u51cf\u6cd5\uff08\u5224\u65ad\u4e24\u4e2a\u6570\u7684\u5927\u5c0f\u4e5f\u662f\u7528\u51cf\u6cd5\u5b9e\u73b0\u7684\uff09\uff1a 3-(-7)=10>7\uff0c\u6ea2\u51fa, OF \u4f4d\u7f6e1\uff0c 0-(-7)=7, \u672a\u6ea2\u51fa OF \u4f4d\u7f6e0 \u5176\u4ed6\u7684\u903b\u8f91\u8fd0\u7b97\u5c31\u4e0d\u653e\u4e0a\u6765\u4e86\u3002 \u5b9e\u9a8c\u56db \u8ba1\u6570\u5668\u548c\u65f6\u949f \u00b6 \u7a0b\u5e8f\u8bbe\u8ba1\u601d\u60f3 \u00b6 \u5982\u4f55\u5c060-99\u7684\u503c\u5206\u4e3a\u5341\u4f4d\u4e2a\u4f4d\uff0c\u5728\u4e00\u822c\u7684\u8bed\u8a00\u4e2d\u76f4\u63a5\u7528\u9664\u6cd5\u548c\u53d6\u6a21\u5c31\u884c\u4e86\uff0c\u5728FPGA\u4e2d\u4e5f\u53ef\u4ee5\u7528\uff0c\u4f46\u8bbe\u8ba1\u5c31\u4e0d\u90a3\u4e48\u4f18\u79c0\uff0c\u6211\u6478\u7d22\u4e86\u4e00\u6bb5\u65f6\u95f4\u4e5f\u4e0d\u77e5\u9053\u5982\u4f55\u8bbe\u8ba1\u3002 \u7f16\u5199\u4ee3\u7801 \u00b6 \u9876\u5c42\u6a21\u5757\uff1a \u5f15\u811a\u5206\u914d \u4eff\u771f\u7ed3\u679c \u00b6 \u4e3a\u4e86\u6f14\u793a\u6548\u679c\uff0c\u5c06\u8ba1\u6570\u65f6\u949f\u9891\u7387\u8c03\u5feb\u4e86\u3002 \u5b9e\u9a8c\u516d \u79fb\u4f4d\u5bc4\u5b58\u5668\u53ca\u6876\u5f62\u79fb\u4f4d\u5668 \u00b6 \u8bbe\u8ba1\u601d\u60f3 \u00b6 \u4ee3\u7801\u7f16\u5199 \u00b6 \u9876\u5c42\u6a21\u5757\uff1a \u5f15\u811a\u7ed1\u5b9a\uff1a \u4eff\u771f\u7ed3\u679c\uff1a \u5b9e\u9a8c\u4e03 PS2\u952e\u76d8 \u00b6 \u7a0b\u5e8f\u8bbe\u8ba1\u601d\u60f3 \u00b6 \u5229\u7528\u72b6\u6001\u673a\u5b8c\u6210\u5bf9PS2\u8bfb\u65f6\u5e8f\u7684\u540c\u6b65\uff0c\u901a\u8fc7\u5224\u65ad\u65ad\u7801\u6765\u786e\u5b9a\u4e00\u4e2a\u6309\u952e\u7684\u6309\u4e0b\u548c\u677e\u5f00\uff0c\u8bbe\u7f6e\u72b6\u6001\u4f4d\u4f5c\u4e3a\u6570\u7801\u7ba1\u7684\u4f7f\u80fd\u63a7\u5236\u7aef\uff0c\u901a\u8fc7\u6355\u83b7\u4f7f\u80fd\u63a7\u5236\u7aef\u7684\u4e0b\u964d\u6cbf\u6765\u8ba1\u7b97\u6309\u952e\u7684\u6b21\u6570\u3002\u53ef\u4ee5\u770b\u5230\u7efc\u5408\u540e\u786e\u5b9e\u8bc6\u522b\u51fa\u4e86\u72b6\u6001\u673a\u3002 \u7f16\u5199\u4ee3\u7801 \u00b6 module lab08keyboard ( input clk , input rst , input ps2_clk , input ps2_data , output [ 7 : 0 ] seg1 , seg2 , seg3 , seg4 , seg5 , seg6 , seg7 , seg8 ); reg [ 7 : 0 ] ps2out ; reg [ 23 : 0 ] ps2segin ; reg ps2ready , ps2next , ps2over ; ps2_keyboard ps2keyboard (. clk ( clk ), . clrn ( ~ rst ), //\u4f4e\u7535\u5e73\u590d\u4f4d . ps2_clk ( ps2_clk ), . ps2_data ( ps2_data ), . data ( ps2out ), . ready ( ps2ready ), . nextdata_n ( ps2next ), . overflow ( ps2over ) ); /***************************\u4e09\u6bb5\u5f0f\u72b6\u6001\u673a*******************************/ parameter stateRead = 4 'b0001 ; parameter stateNotify = 4 'b0010 ; //\u62c9\u4f4enextdata_n,\u901a\u77e5\u8bfb\u53d6\u5b8c\u6bd5 parameter stateNotify2 = 4 'b0100 ; //\u62c9\u4f4enextdata_n,\u901a\u77e5\u8bfb\u53d6\u5b8c\u6bd5 parameter stateIdle = 4 'b1000 ; reg [ 3 : 0 ] state_current , state_next ; //\u540c\u6b65\u72b6\u6001\u8f6c\u79fb always @( posedge clk or posedge rst ) begin if ( rst ) begin state_current <= stateIdle ; end else begin state_current <= state_next ; end end //\u5f02\u6b65\u6539\u53d8\u72b6\u6001 always @( * ) begin case ( state_current ) stateIdle: begin state_next = ( ps2ready == 1 'b1 ) ? stateRead: stateIdle ; end stateRead: begin state_next = stateNotify ; end stateNotify: begin state_next = stateNotify2 ; end stateNotify2: begin state_next = stateIdle ; end default : state_next = stateIdle ; endcase end //\u6bcf\u4e2a\u72b6\u6001\u7684\u8f93\u51fa always @( posedge clk ) begin case ( state_current ) stateIdle: begin ps2next <= 1 ; //\u9ed8\u8ba4\u62c9\u9ad8 end stateNotify: begin ps2next <= 0 ; //\u603b\u7ebf\u62c9\u4f4e end stateNotify2: begin ps2next <= 0 ; //\u603b\u7ebf\u62c9\u4f4e end stateRead: begin ps2segin [ 23 : 0 ] <= { ps2segin [ 15 : 0 ], ps2out [ 7 : 0 ]}; //\u4fdd\u5b58\u8bfb\u53d6\u7684\u6700\u540e\u4e09\u4e2a\u503c end default : begin ps2next <= 1 ; //\u9ed8\u8ba4\u62c9\u9ad8 end endcase end /*********************************************************************/ /** * \u5982\u679c\u8bfb\u53d6\u5230\u7684\u6700\u540e\u4e09\u4e2a\u503c\u662f (A,0XF0,A)\u5f62\u5f0f\uff0c\u5219\u662f\u65ad\u7801\uff0c\u5173\u95ed\u6570\u7801\u7ba1\u663e\u793a * (eg:\u6709bug,\u627e\u4e86\u5f88\u4e45\u6ca1\u6709\u627e\u51fa\u6765\uff0c\u7a0b\u5e8f\u590d\u4f4d\u65f6\uff0csegen\u7684\u503c\u662f1\uff0c\u4e0d\u662f0 * \u7ecf\u8fc7\u6392\u67e5\uff0c\u4e3a if \u8bed\u53e5\u51fa\u9519\uff0c\u4f46\u627e\u4e0d\u5230\u539f\u56e0\u3002) **/ reg segen ; //\u6570\u7801\u7ba1\u63a7\u5236\u7aef\u53e3 always @( * ) begin if (( ps2segin [ 15 : 8 ] == 8'hf0 ) && ps2segin [ 7 : 0 ] == ps2segin [ 23 : 16 ]) begin segen = 0 ; end else begin segen = 1 ; end end /*\u5f53\u6309\u4e0b\u952e\u76d8\u65f6\uff0csegen = 1,\u6570\u7801\u7ba1\u4eae * \u677e\u5f00\u952e\u76d8\u65f6\uff0csegen = 0,\u6570\u7801\u7ba1\u706d * \u901a\u8fc7\u6355\u83b7 segen \u7684\u4e0a\u5347\u6cbf\uff0c\u6216\u4e0b\u964d\u6cbf\uff0c\u5373\u53ef\u83b7\u53d6\u6309\u4e0b\u952e\u76d8\u7684\u6b21\u6570 */ reg [ 3 : 0 ] segcountl , segcounth ; always @( negedge segen ) begin if ( segcountl == 4 'd9 ) begin segcounth <= segcounth + 4 'd1 ; segcountl <= 4 'd0 ; end else begin segcountl <= segcountl + 4 'd1 ; end end /* \u952e\u76d8\u626b\u63cf\u7801\u663e\u793a */ seg seglow1 (. in ( ps2segin [ 3 : 0 ]), . out ( seg1 ),. en ( segen )); seg seghigh1 (. in ( ps2segin [ 7 : 4 ]), . out ( seg2 ),. en ( segen )); /* \u952e\u76d8 ASCII \u7801\u663e\u793a */ reg [ 7 : 0 ] ascii ; toASCII ps2ascii (. addr ( ps2segin [ 7 : 0 ]),. val ( ascii )); seg seglow2 (. in ( ascii [ 3 : 0 ]), . out ( seg3 ),. en ( segen )); seg seghigh2 (. in ( ascii [ 7 : 4 ]), . out ( seg4 ),. en ( segen )); /* \u6ca1\u6709\u7528\u5230\uff0c\u4e0d\u663e\u793a */ seg seglow3 (. in ( ps2segin [ 19 : 16 ]), . out ( seg5 ),. en ( 1 'd0 )); seg seghigh3 (. in ( ps2segin [ 23 : 20 ]), . out ( seg6 ),. en ( 1 'd0 )); /* \u8ba1\u6570\u663e\u793a */ seg segnuml (. in ( segcountl ), . out ( seg7 ),. en ( 1 'd1 )); seg seghnumh (. in ( segcounth ), . out ( seg8 ),. en ( 1 'd1 )); endmodule \u5f15\u811a\u7ed1\u5b9a \u4eff\u771f\u7ed3\u679c \u00b6 \u5b9e\u9a8c\u516b \u5b9e\u9a8c\u4e5d VGA \u00b6 VGA\u663e\u793a\u56fe\u7247\u4f4d\u7f6e\u9519\u4e71\uff0c\u6ca1\u6709\u641e\u6e05\u695avga\u5206\u8fa8\u7387\u5230\u5e95\u662f\u591a\u5c11\uff0c\u81ea\u5df1\u751f\u6210\u7684640-480 \u56fe\u7247\u5927\u5c0f\u548c\u539f\u59cb\u7684\u5927\u5c0f\u4e0d\u4e00\u6837\u5bfc\u81f4\u4f4d\u7f6e\u9519\u4e71\u3002\u5b57\u7b26\u8f93\u5165\u5b9e\u9a8c\u5c1d\u8bd5\u4e86\u4e00\u4e0b\u51c6\u5907\u653e\u5f03\u3001\u5982\u679c\u8981\u505a\u5230\u7684\u8bdd\uff0c\u611f\u89c9\u5c31\u50cf\u662f\u8f6f\u4ef6\u7f16\u7a0b\u3001\u9700\u8981\u7528\u5230\u5927\u91cf\u7684\u884c\u4e3a\u5efa\u6a21\uff0c\u611f\u89c9\u5728\u5199c\u8bed\u8a00\u3002","title":"\u4e00\u751f\u4e00\u82af\u9884\u5b66\u4e60"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_1","text":"5.9 Verilog\u5f00\u6e90\u7684\u7efc\u5408\u5de5\u5177-Yosys \u00b7 FPGA\u4f7f\u7528\u7b14\u8bb0 \u00b7 \u770b\u4e91 (kancloud.cn)","title":"\u5357\u4eac\u5927\u5b66 \u201c\u8ba1\u7b97\u673a\u7cfb\u7edf\u57fa\u7840\u5b9e\u9a8c\u201d"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#pa0","text":"\u867d\u7136\u8bf4\u9700\u8981\u4f7f\u7528\u5e26GUI\u768464\u4f4dLinux \u4f46\u662f\u4e0d\u60f3\u88c5\u865a\u62df\u673a\uff0c\u81ea\u5df1\u53c8\u5728\u963f\u91cc\u4e91\u4e0a\u6709\u4e00\u53f0\u670d\u52a1\u5668\uff0c\u5e76\u4e14\u5df2\u7ecf\u914d\u7f6e\u597d\u4e86 X11 \u8f6c\u53d1\uff0c\u5c31\u5148\u8bd5\u8bd5\u5728\u963f\u91cc\u4e91\u670d\u52a1\u5668\u4e0a\u642d\u5efa\u73af\u5883\uff0c\u5b9e\u5728\u4e0d\u884c\u518d\u5207\u6362\u5230\u672c\u5730\u3002","title":"PA0 \u642d\u5efa\u73af\u5883"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#llvm-11","text":"\uff08\u4e00\uff09LLVM\u6982\u8ff0\u2014\u2014\u4ecb\u7ecd\u4e0e\u5b89\u88c5 - \u77e5\u4e4e (zhihu.com) \u7531\u4e8e\u6211\u4f7f\u7528\u7684\u5f00\u53d1\u73af\u5883\u662f Ubuntu20.04\uff0c\u901a\u8fc7 APT \u5b89\u88c5\u7684 LLVM \u7684\u7248\u672c\u53f7\u662f10\u3002\u9700\u8981\u81ea\u884c\u5b89\u88c5\u9ad8\u7248\u672c\u7684 LLVM , \u53c2\u8003\u4e0a\u8ff0\u6587\u7ae0\u3002 \u4f7f\u7528\u5b98\u65b9\u5b89\u88c5\u811a\u672c\u5b89\u88c5\u3002 #\u4ec5\u9002\u7528\u4e8eDebian/Ubuntu wget https://apt.llvm.org/llvm.sh chmod +x llvm.sh #\u7248\u672c\u53f713 sudo ./llvm.sh 13 \u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u67e5\u770b LLVM \u7684\u7248\u672c\u3002\u3002 llvm-config --version clang -v \u5176\u4e2d llvm-config \u662f\u4e00\u4e2a\u914d\u7f6e\u6587\u4ef6\uff0c\u544a\u8bc9\u5176\u4ed6\u8f6f\u4ef6 llvm \u5f53\u524d\u7684\u5e93\u76ee\u5f55\u5728\u54ea\u91cc\u7b49\u7b49\u3002 clang \u5c31\u7c7b\u4f3c\u4e8e gcc \u3002\u901a\u8fc7\u4e0a\u8ff0\u811a\u672c\u5b89\u88c5\u9ad8\u7248\u672c\u53f7\u7684 llvm \u540e\u3002\u7cfb\u7edf\u4e2d\u5c31\u540c\u65f6\u5b58\u5728 llvm-10 llvm-13 \u3002 \u5176\u5b9e\u6211\u4eec\u5e73\u5e38\u8f93\u5165\u7684\u547d\u4ee4 gcc \u7b49\uff0c\u5f88\u591a\u90fd\u662f\u4e00\u4e2a\u8f6f\u8fde\u63a5\uff0c\u8fde\u63a5\u5230 \u6b63\u771f\u7684\u7a0b\u5e8f\u4e0a\uff0c\u8fd9\u6837\u53ef\u4ee5\u65b9\u4fbf\u7248\u672c\u7684\u5207\u6362\u548c\u5347\u7ea7\u3002\u8fdb\u5165 /usr/bin \u76ee\u5f55\u4e0b\u67e5\u770b\u5bf9\u5e94\u5173\u7cfb\u3002 ls -al | grep llvm \u90fd\u662f\u4e00\u4e9b\u8f6f\u8fde\u63a5\uff0c\u6211\u4eec\u628a\u6211\u4eec\u9700\u8981\u7684\u6539\u4e86\u5c31\u884c\u3002 llvm-confg \u548c clang \u3002 ##\u4fee\u6539\u8f6f\u8fde\u63a5\u547d\u4ee4\u5982\u4e0b ## ln [\u53c2\u6570][\u6e90\u6587\u4ef6\u6216\u76ee\u5f55][\u76ee\u6807\u6587\u4ef6\u6216\u76ee\u5f55] ln \u2013snf /var/www/test1 /var/test \u4fee\u6539\u5b8c\u6210\u540e\u5c31\u53ef\u4ee5\u7f16\u8bd1\u6210\u529f\u4e86\u3002","title":"\u8981\u6c42LLVM \u73af\u5883\u7248\u672c &gt;= 11"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_2","text":"\u9519\u8bef\u4ee3\u7801\uff1a make: *** [/home/leesum/ysyx-workbench/nemu/scripts/native.mk:38: run] Error 1 \u5176\u5b9e\u770b\u4e0d\u51fa\u4ec0\u4e48\u4e1c\u897f\u3002 \u5177\u4f53\u5728\u4ee3\u7801\u4e2d\u67e5\u8be2 \u8fd4\u56de\u4e86 1 \u3002 \u6700\u5f00\u59cb\u6211\u76f4\u63a5\u7c97\u66b4\u7684\u5c06 return !good; \u6539\u4e3a\u4e86 return good; , \u6536\u5230\u4e86\u53d8\u91cf\u540d\u7684\u8bef\u5bfc\u3002\u540e\u9762\u6df1\u5165\u5206\u6790\uff0c\u53d1\u73b0\u548c nemu_state \u6709\u5173\u3002\u9605\u8bfb\u6e90\u7801\uff0c\u5728\u9000\u51fa\u547d\u4ee4\u6267\u884c\u51fd\u6570\u4e0a static int cmd_q(char *args) \u6539\u53d8\u4e00\u4e0b\u72b6\u6001\u5c31\u884c\u3002","title":"\u4f18\u7f8e\u7684\u9000\u51fa"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#pa1","text":"","title":"PA1"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_3","text":"\u4e3b\u8981\u662f\u63a5\u6536\u4e00\u4e2a\u53c2\u6570\uff0c\u7136\u540e\u6267\u884c cpu_exec(N) static int cmd_si ( char * args ) { int N ; if ( NULL == args ) { N = 1 ; //\u9ed8\u8ba4\u503c 1 } else { sscanf ( args , \"%d\" , & N ); } DEBUG_S ( \"cpu_exec:%d, \\n \" , N ); cpu_exec ( N ); return 0 ; }","title":"\u5355\u6b65\u6267\u884c"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_4","text":"\u8fd9\u4e2a\u6bd4\u8f83\u7b80\u5355, \u53c2\u6570\u83b7\u53d6\u5229\u7528\u4e86 sscanf \u51fd\u6570\u3002 void isa_reg_display () { for ( int i = 0 ; i < 32 ; i ++ ) { /* \u6253\u5370\u5bc4\u5b58\u5668\u540d\u79f0\u548c\u5185\u5bb9 */ printf ( \"%d:%s \\t %lx \\n \" , i , reg_name ( i , 64 ), gpr ( i )); } /* pc \u5bc4\u5b58\u5668 */ printf ( \"%d:%s \\t %lx \\n \" , 33 , \"pc\" , cpu . pc ); }","title":"\u6253\u5370\u5bc4\u5b58\u5668"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_5","text":"\u8bf4\u5b9e\u8bdd\u8fd9\u4e2a\u4e5f\u633a\u7b80\u5355\u7684\uff0c\u4e0d\u8fc7\u6211\u5728\u8fd9\u4e0a\u9762\u9047\u89c1\u4e86\u4e00\u4e2a\u5927\u5751\uff0c\u8017\u8d39\u4e86\u633a\u4e45\u7684\u65f6\u95f4\u3002 \u9996\u5148\u5229\u7528 sscanf \u83b7\u53d6\u4e24\u4e2a\u53c2\u6570, %d \u53ef\u4ee5\u83b7\u53d6\u5341\u8fdb\u5236\uff0c %x \u53ef\u4ee5\u83b7\u53d6\u5341\u516d\u8fdb\u5236\uff0c\u5f88\u667a\u80fd\u3002 sscanf ( args , \"%d %x\" , & len , & addr ); \u7136\u540e\u8c03\u7528 vaddr_read \u8bfb\u53d6\u5185\u5b58\uff0c\u5c31\u53ef\u4ee5\u663e\u793a\u4e86\u3002\u662f\u633a\u7b80\u5355\u7684\uff0c\u4f46\u6211\u5c31\u662f\u5728\u663e\u793a\u8fd9\u4e00\u6b65\u4e0a\u9047\u89c1\u4e86\u5927\u5751\uff0c, \u56e0\u4e3a\u662f riscv64 \uff0c\u6240\u4ee5 \u6700\u5f00\u59cb\u6211\u6bcf\u4e00\u6b21\u8bfb\u53d6 vaddr_read(addr, 8) 8byte\u3002\u4f7f\u7528 printf \u6253\u5370\u6570\u636e\u3002 printf ( \"%016x\" , data ); \u5c06\u6570\u636e\u548c\u539f\u59cb\u6570\u636e\u8fdb\u884c\u5bf9\u6bd4\uff0c\u53ea\u6709\u4f4e 4byte \u662f\u4e00\u6837\u7684\uff0c\u9ad8 4byte \u5168\u662f0\u3002\u7136\u540e\u5f00\u59cb\u7ffb\u6e90\u7801\uff0c\u5728\u5404\u79cd\u5730\u65b9\u6d4b\u8bd5\uff0c\u6362\u6210\u4e00\u6b21\u8bfb 4byte \u5c31\u662f\u6b63\u786e\u7684\u3002\u7ecf\u8fc7\u4e86\u4e00\u4e0b\u5348\u7684\u7814\u7a76\uff0c\u6700\u540e\u89c9\u5f97\u6253\u5370\u51fd\u6570\u6709\u95ee\u9898\uff0c\u67e5\u627e\u8d44\u6599\u624d\u660e\u767d %x \u53ea\u80fd\u8f93\u51fa 4byte \u5c31\u7b97 %016x \u4e5f\u53ea\u662f\u9ad8\u4f4d\u88650\u800c\u5df2\u3002\u8fd9\u662fC\u8bed\u8a00\u7684\u4e00\u4e2a\u9057\u7559\u95ee\u9898\uff0c\u540e\u9762\u6dfb\u52a0\u4e86 %p \u6765\u89e3\u51b3\u3002 C\u8bed\u8a00printf\u51fd\u6570\u8f93\u51fa\u683c\u5f0f%x\u548c%p\u7684\u5dee\u522b_\u5927\u706c\u767d\u7684\u535a\u5ba2-CSDN\u535a\u5ba2","title":"\u5185\u5b58\u626b\u63cf"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_6","text":"\u8fd9\u91cc\u8bf4\u57cb\u4e86\u4e00\u4e9b\u5751\uff0c\u4f46\u6211\u627e\u4e86\u4e00\u4e0b\u5348\u90fd\u6ca1\u6709\u627e\u51fa\u6765\uff0c\u5355\u6b65\u6267\u884c\u7684\u6307\u4ee4\u4e5f\u6ca1\u6709\u95ee\u9898\u3002 pc->t0 a0\u5199\u6570\u636e \u5185\u5b58\u6e05\u6570\u636e","title":"\u9a8c\u8bc1\u5355\u6b65\u6267\u884c\u7684\u6548\u679c"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_7","text":"\u8fd9\u91cc\u6211\u6ca1\u6709\u7528\u8bb2\u4e49\u4e0a\u63a8\u8350\u7684\u65b9\u6cd5\uff0c\u56e0\u4e3a\u6211\u5b66\u4e60\u8fc7\u4e2d\u7f00\u8868\u8fbe\u5f0f\u6c42\u503c\uff0c\u5f88\u81ea\u7136\u7684\u5c31\u8054\u60f3\u5230\u4e86\u4e00\u8d77\uff0c\u56e0\u6b64\u6211\u5728\u8fd9\u91cc\u4f7f\u7528\u7684\u662f\u4e2d\u7f00\u8868\u8fbe\u5f0f\u6c42\u503c\u65b9\u6848\u3002\u5e76\u4e14\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u5c06\u4e2d\u7f00\u8868\u8fbe\u5f0f\u6c42\u503c\u4ee3\u7801\u7528 cpp \u5199\uff0c\u53ea\u63d0\u4f9b\u4e00\u4e2a c \u63a5\u53e3\u7ed9\u5916\u90e8\u8c03\u7528\u3002","title":"\u8868\u8fbe\u5f0f\u6c42\u503c"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_8","text":"\u5982\u4f55\u786e\u4fdd\u8868\u8fbe\u5f0f\u8fdb\u884c\u65e0\u7b26\u53f7\u8fd0\u7b97 \u6682\u65f6\u6ca1\u6709\u89e3\u51b3 \u5982\u4f55\u968f\u673a\u63d2\u5165\u7a7a\u683c sprintf ( str , \"%*d\" , rand () % 4 , ( rand () % 20 ) - 10 ); \u91c7\u7528 printf \u8f93\u51fa\u4f4d\u5bbd\u63a7\u5236\u6765\u968f\u673a\u63d2\u5165\u7a7a\u683c 3. \u5982\u4f55\u751f\u6210\u957f\u8868\u8fbe\u5f0f, \u540c\u65f6\u4e0d\u4f1a\u4f7f buf \u6ea2\u51fa \u4eba\u4e3a\u63a7\u5236\u9012\u5f52\u8def\u5f84\uff0c buf \u957f\u5ea6\u8d85\u8fc7\u4e00\u5b9a\u6570\u503c\u4e0d\u8fdb\u884c\u9012\u5f52\u3002 static void gen_rand_expr () { int choose = rand () % 3 ; /* \u8868\u8fbe\u5f0f\u957f\u5ea6\u8d85\u8fc720\u540e\uff0c\u5f3a\u5236\u9009\u62e9 0 \u8def\u7ebf\uff0c\u4e0d\u8fdb\u884c\u9012\u5f52\u8c03\u7528 */ if ( strlen ( buf ) > 20 ) { choose = 0 ; } switch ( choose ) { case 0 : gen_num (); gen_rand_op (); gen_num (); break ; case 1 : gen ( '(' ); gen_rand_expr (); gen ( ')' ); break ; default : gen_rand_expr (); gen_rand_op (); gen_rand_expr (); break ; } } \u5982\u4f55\u8fc7\u6ee4\u6c42\u503c\u8fc7\u7a0b\u4e2d\u6709\u96640\u884c\u4e3a\u7684\u8868\u8fbe\u5f0f? \u8fd9\u4e2a\u786e\u5b9e\u633a\u96be\u7684\uff0c\u6700\u5f00\u59cb\u6211\u4e00\u76f4\u60f3\u5728\u751f\u6210\u8868\u8fbe\u5f0f\u7684\u65f6\u5019\u76f4\u63a5\u53bb\u9664\u6389\u96640\u884c\u4e3a\uff0c\u4f46\u8bd5\u4e86\u5f88\u4e45\u786e\u5b9e\u505a\u4e0d\u5230\u3002\u6700\u540e\u60f3\u8d77\u6765\u4e86\u6700\u5f00\u59cb\u53d8\u91cf nemu \u65f6\uff0c -Werror \u5c06\u8b66\u544a\u8f6c\u6362\u4e3a\u9519\u8bef\u3002\u4e00\u4e0b\u5b50\u8c41\u7136\u5f00\u6717\u3002\u8457\u9700\u8981\u5728\u7f16\u8bd1\u4ee3\u7801\u65f6\u52a0\u4e0a -Werror \u5c06\u96640\u8b66\u544a\u8f6c\u6362\u4e3a\u9519\u8bef\uff0c\u8ba9\u7f16\u8bd1\u4e0d\u901a\u8fc7\u5c31\u884c\u4e86\u3002 /* \u6dfb\u52a0 Werror \u5c06\u96640\u8b66\u544a\u8f6c\u6362\u6210\u9519\u8bef,\u5bfc\u81f4\u7f16\u8bd1\u5931\u8d25*/ int ret = system ( \"gcc -Werror /tmp/.code.c -o /tmp/.expr\" ); if ( ret != 0 ) { //printf(\"\u9519\u8bef\uff1a-Wdiv-by-zero\\r\\n\"); continue ; }","title":"\u8868\u8fbe\u5f0f\u751f\u6210\u5668"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_9","text":"/* \u8868\u8fbe\u5f0f\u6d4b\u8bd5 */ void expr_test ( void ) { bool ret ; uint64_t testinput , testoutput ; FILE * fp = fopen ( \"/home/leesum/ysyx-workbench/nemu/tools/gen-expr/input\" , \"r\" ); if ( fp == NULL ) { printf ( \"Fail to open file! \\n \" ); exit ( 0 ); //\u9000\u51fa\u7a0b\u5e8f\uff08\u7ed3\u675f\u7a0b\u5e8f\uff09 } char buf [ 1024 ]; /* \u8bfb\u53d6\u6bcf\u4e00\u884c * \u6362\u884c\u952e\u88ab\u5751\u4e86 * fgets\u51fd\u6570\uff0c\u4f1a\u9ed8\u8ba4\u6dfb\u52a0\u6362\u884c\\n,\u5bfc\u81f4\u5b57\u7b26\u4e32\u7ed3\u5c3e\u662f \\n\\0\" */ while ( fgets ( buf , sizeof ( buf ), fp ) != NULL ) { char * find = strchr ( buf , '\\n' ); //\u627e\u51fadata\u4e2d\u7684\"\\n\" if ( find ) * find = '\\0' ; //\u66ff\u6362 /* \u53c2\u8003nemu\u8bfb\u53d6\u547d\u4ee4\u7684\u4ee3\u7801 */ char * cmd = strtok ( buf , \" \" ); char * args = cmd + strlen ( cmd ) + 1 ; DEBUG_M ( \"%s \\n \" , buf ); DEBUG_M ( \"%s \\n \" , cmd ); DEBUG_M ( \"%s \\n \" , args ); testinput = atoi ( cmd ); //\u9ed8\u8ba4\u7ed3\u679c testoutput = expr ( args , & ret ); //\u8f93\u51fa\u7ed3\u679c Assert ( testinput == testoutput , \"input:%lu,output:%lu\" , testinput , testoutput ); } fclose ( fp ); }","title":"\u5229\u7528\u8868\u8fbe\u5f0f\u751f\u6210\u5668\u6d4b\u8bd5\u4ee3\u7801"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_10","text":"\u751f\u6210\u4e00\u5343\u4e2a\u5e26\u9664\u6cd5\u7684\u8868\u8fbe\u5f0f\u3002\u7ed3\u679c\u6d4b\u8bd5\uff0c\u6709\u4e9b\u80fd\u901a\u8fc7\uff0c\u6709\u4e9b\u901a\u4e0d\u8fc7\u3002\u6df1\u5165\u5206\u6790\uff0c\u53d1\u73b0\u539f\u56e0\u5982\u4e0b\u3002 9 (( ( 7 / 14 / 4-16 ) / 3 + 2 ) / 8 - 16 -2 / 6 * 1 * 18 / 11 * 15 / 10 / 14 ) + 18 + 5 + 4 / 2 \u5927\u591a\u6570\u90fd\u6709 1/2 \u7c7b\u4f3c\u64cd\u4f5c\uff0c\u4e0e 0 \u76f8\u5173\uff0c\u7531\u4e8e\u65e0\u7b26\u53f7\u8fd0\u7b97\u987a\u5e8f\u7684\u95ee\u9898\uff0c\u53ef\u80fd\u4f1a\u6709\u820d\u5165","title":"\u5e26\u9664\u6cd5"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_11","text":"\u5168\u90e8\u901a\u8fc7","title":"\u4e0d\u5e26\u9664\u6cd5"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#verilator","text":"","title":"\u642d\u5efaverilator\u4eff\u771f\u73af\u5883"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_12","text":"\u7ecf\u8fc7\u9605\u8bfb VERILATOR \u7684\u5b98\u65b9\u624b\u518c\uff0c\u6210\u529f\u642d\u5efa\u51fa\u4eff\u771f\u73af\u5883\uff0c\u5e76\u4e14\u751f\u6210\u4e86\u6ce2\u5f62 VCD \u6587\u4ef6\u3002 \u5728 ysyx-workbench/npc/csrc \u548c /home/leesum/ysyx-workbench/npc/vsrc \u4e0b\u5206\u522b\u521b\u5efa lab01switch.cpp lab01switch.v \u3002 #include <stdio.h> #include <stdlib.h> #include <assert.h> #include <verilated.h> #include <Vlab01switch.h> #include \"verilated_vcd_c.h\" // lab01 \u5f00\u5173\u5b9e\u9a8c int sim_time = 999 ; //\u4eff\u771f\u65f6\u95f4 int main ( int argc , char ** argv , char ** env ) { //\u6253\u5f00Verilog\u9876\u5c42\u6587\u4ef6 VerilatedContext * contextp = new VerilatedContext ; contextp -> commandArgs ( argc , argv ); Vlab01switch * top = new Vlab01switch { contextp }; // \u8bb0\u5f55\u6ce2\u5f62 Verilated :: traceEverOn ( true ); VerilatedVcdC * tfp = new VerilatedVcdC (); top -> trace ( tfp , 0 ); tfp -> open ( \"1.vcd\" ); //\u5f00\u59cb\u4eff\u771f while ( ! contextp -> gotFinish () && contextp -> time () < sim_time ) { //\u4e3a\u9876\u5c42\u6a21\u5757 a b \u6dfb\u52a0\u8f93\u5165 int a = rand () & 1 ; int b = rand () & 1 ; top -> a = a ; top -> b = b ; //\u4eff\u771f\u65f6\u95f4+1 contextp -> timeInc ( 1 ); //\u5f00\u59cb\u8bc4\u4f30\u7ed3\u679c top -> eval (); //\u6dfb\u52a0\u6ce2\u5f62\u6570\u636e\u81f3 VCD \u6587\u4ef6\u4e2d tfp -> dump ( contextp -> time ()); //\u6253\u5370\u7ed3\u679c printf ( \"a = %d, b = %d, f = %d \\n \" , a , b , top -> f ); //\u9a8c\u8bc1 assert ( top -> f == a ^ b ); } top -> final (); //\u4fdd\u5b58\u6587\u4ef6 tfp -> close (); delete top ; delete contextp ; return 0 ; } // lab01 \u5f00\u5173\u5b9e\u9a8c module lab01switch ( input a , input b , output f ); assign f = a ^ b ; endmodule \u8f93\u5165\u547d\u4ee4 verilator -Wall --cc --exe --build ./csrc/lab01switch.cpp ./vsrc/lab01switch.v --trace \u7f16\u8bd1\uff0c\u5e76\u4e14\u5f00\u542f trace \u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\u540e\u8fd0\u884c\u5982\u4e0b","title":"\u53cc\u63a7\u5f00\u5173"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_13","text":"\u5e76\u4e14\u751f\u6210\u4e86\u6ce2\u5f62\u6587\u4ef6 1.vcd \uff0c\u5229\u7528 GTKWave \u6253\u5f00\u6ce2\u5f62\u6570\u636e \u7531\u4e8e\u6211\u7684\u5b9e\u9a8c\u73af\u5883\u642d\u5efa\u5728\u8fdc\u7aef\u963f\u91cc\u4e91\u670d\u52a1\u5668\u4e0a\u9762\uff0c\u53ea\u80fd\u901a\u8fc7 X11 \u8f6c\u53d1\u663e\u793a\u56fe\u5f62\u754c\u9762\uff0c\u54cd\u5e94\u901f\u5ea6\u8f83\u6162\u3002\u53ef\u4ee5\u5229\u7528\u5728 Vscode \u4e0a\u5b89\u88c5 WaveTrace \u63d2\u4ef6\u67e5\u770b VCD \u6570\u636e\u6587\u4ef6\u3002","title":"\u67e5\u770b\u6ce2\u5f62\u6570\u636e"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#makefile","text":"\u7531\u4e8e\u6211\u4e4b\u524d\u6709\u8fc7\u7528 Makefile \u7ba1\u7406\u9879\u76ee\u7684\u7ecf\u9a8c\uff0c\u6240\u4ee5\u8fd9\u4e2a\u6bd4\u8f83\u7b80\u5355 \u4ee5\u540e\u8fdb\u884c\u65b0\u6a21\u5757\u7684\u4eff\u771f\u65f6\uff0c\u53ea\u9700\u8981\u4fee\u6539 MODULE_NAME \u5c31\u884c\u4e86\u3002","title":"\u7f16\u5199 Makefile \u5b9e\u73b0\u81ea\u52a8\u4eff\u771f"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_14","text":"include \u95ee\u9898 \uff1a VERILATOR \u4f1a\u5c06\u7528\u4e8e\u4eff\u771f\u7684 Verilog \u6587\u4ef6\u8f6c\u6362\u4e3a\u4e00\u4e2a cpp \u6587\u4ef6\uff0c\u5e76\u4e14\u521b\u5efa\u4e00\u4e2a\u7c7b\uff0c\u7c7b\u7684\u540d\u79f0\u4e3a V<\u9876\u5c42\u6a21\u5757\u7684\u540d\u79f0> \uff0c\u800c\u5728\u6211\u4eec\u521b\u5efa\u7684\u4eff\u771f\u6587\u4ef6\u4e2d\uff0c\u4f1a include \u8fd9\u4e2a\u7c7b\uff0c\u521b\u5efa\u9876\u5c42\u6587\u4ef6\uff0c\u8fdb\u884c input \u4fe1\u53f7\u7684\u8d4b\u503c\u7b49\u7b49\u3002 \u6ce2\u5f62\u6587\u4ef6\u7684\u95ee\u9898 \uff1a\u5728 VERILATOR \u5b98\u7f51\u6587\u6863\u4e2d\uff0c\u6253\u5f00\u7684\u6587\u4ef6\u5982\u4e0b \u6211\u6309\u7167\u6587\u6863\u64cd\u4f5c\uff0c\u6b7b\u6d3b\u751f\u6210\u4e0d\u4e86 VCD \u6587\u4ef6\uff0c\u8fd9\u5176\u5b9e\u662f\u76ee\u5f55\u5173\u7cfb\u7684\u95ee\u9898\uff0c open \u65b9\u6cd5\u5728\u521b\u5efa\u6587\u4ef6\u65f6\uff0c\u82e5\u76ee\u5f55\u4e0d\u5b58\u5728\uff0c\u4e0d\u4f1a\u81ea\u5df1\u521b\u5efa\u76ee\u5f55\uff0c\u5c31\u5bfc\u81f4\u4e0d\u4f1a\u521b\u5efa\u6587\u4ef6\uff0c\u6240\u4ee5\u5728\u6253\u5f00\u3001\u521b\u5efa\u6587\u4ef6\u65f6\uff0c\u7406\u89e3\u5404\u4e2a\u6587\u4ef6\u7684\u5c42\u6b21\u5f88\u91cd\u8981\u3002","title":"\u9047\u5230\u7684\u95ee\u9898"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#nvboard","text":"\u5728 NVBoard \u6839\u76ee\u5f55\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf export NVBOARD_HOME=${PWD}","title":"\u8fd0\u884c NVBoard \u4f8b\u5b50"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#nvboard_1","text":"\u7531\u4e8e\u6211\u7684\u73af\u5883\u642d\u5efa\u5728\u8fdc\u7a0b\u963f\u91cc\u4e91\u670d\u52a1\u5668\u4e0a\uff0c\u6ca1\u6709 GUI \u754c\u9762\uff0c\u6211\u4e5f\u4e0d\u60f3\u901a\u8fc7\u8fdc\u7a0b\u684c\u9762\u8fde\u63a5\u5f00\u53d1\uff0c\u6240\u4ee5\u53ea\u80fd\u901a\u8fc7 X11 \u670d\u52a1\u5c06 NVBoard \u7684\u754c\u9762\u8f6c\u53d1\u5230\u672c\u5730\u673a\u5668\u4e0a\u663e\u793a\uff0c\u53d7\u5236\u4e8e X11 \u8f6c\u53d1\u6548\u7387\u548c\u670d\u52a1\u5668\u5e26\u5bbd\uff0c NVBoard \u51e0\u4e4e\u6210\u4e0d\u53ef\u7528\u7684\u72b6\u6001\uff0c\u9700\u8981\u4fee\u6539\u6e90\u7801\u6765\u6ee1\u8db3\u6211\u7684\u73af\u5883\u9700\u6c42\u3002","title":"\u4fee\u6539 NVBoard \u6e90\u7801"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_15","text":"\u9605\u8bfb\u6e90\u7801\u53d1\u73b0 NVBoard \u91c7\u7528 SDL \u8fdb\u884c\u56fe\u5f62\u663e\u793a\uff0c\u5e76\u4e14\u9ed8\u8ba4 FPS \u4e3a 60\uff0c SDL \u753b\u9762\u66f4\u65b0\u4e0d\u662f\u91c7\u7528\u589e\u91cf\u66f4\u65b0\uff0c\u56e0\u6b64\u6bcf\u4e00\u5e27\u753b\u9762\u90fd\u9700\u8981\u7ecf\u8fc7 X11 \u7684\u8f6c\u53d1\uff0c\u6570\u636e\u91cf\u8fc7\u5927\uff0c\u5bfc\u81f4\u6211\u8fd9\u8fb9\u672c\u5730\u663e\u793a\u76f4\u63a5\u5361\u6b7b\uff0c\u6570\u7801\u7ba1\u4e0d\u4f1a\u52a8\uff0c\u6309\u94ae\u54cd\u5e94\u901f\u5ea6\u4e5f\u5f88\u6162\u3002\u7ecf\u8fc7\u6d4b\u8bd5\u5c06 FPS \u4fee\u6539\u4e3a 5 \u540e\uff0c\u6570\u7801\u7ba1\u6210\u529f\u5b9e\u73b0\u81ea\u589e\u3002 \u4f46\u9f20\u6807\u54cd\u5e94\u4e8b\u4ef6\u8fd8\u662f\u5f88\u6162\uff0c\u65e0\u6cd5\u6b63\u5e38\u4f7f\u7528\u3002","title":"\u4fee\u6539\u663e\u793a\u5e27\u7387"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_16","text":"\u9605\u8bfb\u6e90\u7801\u53d1\u73b0\uff0c NVBoard \u91c7\u7528\u5355\u7ebf\u7a0b\u7684\u5de5\u4f5c\u65b9\u5f0f\uff0c\u5728\u4e3b\u51fd\u6570\u4e2d\u4e0d\u65ad\u8c03\u7528 void nvboard_update() \u5b9e\u73b0\u753b\u9762\u7684\u5237\u65b0\u548c\u9f20\u6807\u952e\u76d8\u7684\u4e8b\u4ef6\u8bfb\u53d6\uff0c\u5e76\u4e14\u9891\u7387\u548c FPS \u76f8\u540c\u3002\u5c06\u753b\u9762\u5237\u65b0\u548c\u9f20\u6807\u4e8b\u4ef6\u8bfb\u53d6\u653e\u5728\u540c\u4e00\u8fdb\u7a0b\u4e2d\uff0c\u65e0\u7591\u4f1a\u62d6\u6162\u54cd\u5e94\u901f\u5ea6\uff0c\u56e0\u6b64\u6211\u65b0\u5efa\u4e00\u4e2a SDL\u7ebf\u7a0b \u7528\u4e8e\u5468\u671f\u6027\u7684\u8bfb\u53d6\u54cd\u5e94\u4e8b\u4ef6\uff0c\u6539\u5584\u4ee3\u7801\u3002 \u7ecf\u8fc7\u4fee\u6539\u540e\uff0c\u9f20\u6807\u4e8b\u4ef6\u54cd\u5e94\u8fc5\u901f\uff0c\u5e76\u4e14\u6570\u7801\u7ba1\u80fd\u591f\u81ea\u589e\uff0c\u867d\u7136\u7531\u4e8e X11 \u8f6c\u53d1\uff0c\u5e27\u7387\u53ea\u6709 5 \uff0c\u4f46\u662f\u5df2\u7ecf\u6ee1\u8db3\u6211\u7684\u9700\u6c42\u4e86\u3002","title":"\u4fee\u6539\u9f20\u6807\u952e\u76d8\u54cd\u5e94\u4e8b\u4ef6"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#nvboard_2","text":"","title":"\u5c06\u53cc\u63a7\u5f00\u5173\u63a5\u5165 NVBoard"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#makefile_1","text":"\u9996\u5148\u5148\u5c06 NVBoard \u7684 example \u7684 Makefile \u6587\u4ef6\u79fb\u690d\u5230\u6211\u4eec\u81ea\u5df1\u7684 Makefile \u4e0a\uff0c\u642d\u5efa NVBoard \u7f16\u8bd1\u73af\u5883\u3002\u76f4\u63a5\u5c06 CTRL A CTRL C CTRL V \u590d\u5236\u5185\u5bb9\u5230 npc/Makefile \u6587\u4ef6\u4e2d\uff0c\u7136\u540e\u5220\u9664\u91cd\u590d\u7684 clean \u7b49\u64cd\u4f5c\u3002 \u7136\u540e\u5c31\u662f\u4e0d\u65ad\u6267\u884c make \u67e5\u770b\u62a5\u9519\uff0c\u53c2\u8003 example \uff0c\u8be5\u6dfb\u52a0\u6587\u4ef6\u6dfb\u52a0\u6587\u4ef6\uff0c\u6539\u4fee\u6539\u6587\u4ef6\u4fee\u6539\u6587\u4ef6\u3002\u76f4\u5230 make \u6210\u529f\u65e0\u62a5\u9519\u3002 1. \u5728 npc \u76ee\u5f55\u4e0b\u6dfb\u52a0 constr \u6587\u4ef6\u5939\uff0c\u590d\u5236 example \u7684 .nxdc \u6587\u4ef6\uff0c\u4fee\u6539\u9876\u5c42\u6a21\u5757\u540d\u79f0\u548c\u81ea\u5df1\u76f8\u5339\u914d\uff0c\u6ce8\u91ca\u6389\u539f\u5148\u7684\u5f15\u811a\u5206\u914d\u3002 \u5220\u9664 csrc \u3001 vsrc \u4e2d\u539f\u5148\u81ea\u5e26\u7684 .c \u548c .v \u6587\u4ef6\uff0c\u907f\u514d main \u51fd\u6570\u51b2\u7a81\u3002 \u4fee\u6539 Makefile \u6587\u4ef6\u4e2d TOPNAME \u7684\u503c\uff0c\u4e0e\u81ea\u5df1\u7684\u6a21\u5757\u76f8\u5bf9\u5e94\uff0c\u5e76\u4e14\u7531\u4e8e\u539f\u5148\u6211\u4eec\u5f00\u542f\u4e86 verilator \u7684\u4eff\u771f\uff0c\u9700\u8981\u6dfb\u52a0 VERILATOR_CFLAGS --trace \u3002 \u8fd9\u662f\u57fa\u672c\u7684\u4fee\u6539\uff0c\u66f4\u5bf9\u7684\u4fee\u6539\u9700\u8981\u5728\u6267\u884c make \u65f6\u67e5\u770b\u62a5\u9519\u4fe1\u606f\u5bf9\u75c7\u4e0b\u836f\u3002 \u6240\u6709\u6587\u4ef6\u4fee\u6539\u5b8c\u6bd5\u540e\u6267\u884c make run \u5373\u53ef\u770b\u5230\u539f\u5148\u7684\u4eff\u771f\u8f93\u51fa\u3002","title":"\u79fb\u690dMakefile"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#lab01switchcpp-nvboard","text":"\u9996\u5148\u9605\u8bfb example \u7684\u6e90\u7801\uff0c\u53d1\u73b0\u6709\u4e2a\u672a\u77e5\u7684\u53d8\u91cf\uff0c\u6309\u9053\u7406\u6765\u8bf4\uff0c TOP_NAME \u5e94\u8be5\u662f Vtop \u6211\u641c\u7d22 TOP_NAME \u65f6\uff0c\u6700\u7ec8\u5728 Makefile \u6587\u4ef6\u4e2d\u53d1\u73b0\u4e86\u86db\u4e1d\u9a6c\u8ff9\u3002 \u76f4\u63a5\u5728\u7f16\u8bd1\u7684\u65f6\u5019 define \u4e86 TOP_NAME \u3002 \u7ecf\u8fc7\u6478\u7d22\uff0c\u4eff\u7167 example \u5c06\u53cc\u63a7\u5f00\u5173\u63a5\u5165\u4e86 NVboard \u4e3b\u8981\u6709\u4e24\u4e2a\u65b9\u9762\u7684\u4fee\u6539\u3002 1. \u4fee\u6539 mian \u51fd\u6570\uff0c #include <nvboard.h> , \u5e76\u4e14\u5c06\u539f\u5148\u7684\u5185\u5bb9\u6ce8\u91ca\u6389\u3002\u6dfb\u52a0\u5982\u4e0b \u5176\u4e2d\u6709\u51e0\u4e2a\u6ce8\u610f\u4e8b\u9879\uff0c example \u4e2d\u4e3a\u65f6\u5e8f\u7535\u8def\uff0c\u6240\u4ee5\u5b83\u641e\u4e86\u4e2a\u65f6\u949f\u81ea\u589e\u7684\u64cd\u4f5c single_cycle() \uff0c\u5728\u91cc\u9762\u6dfb\u52a0\u4eff\u771f eval() \u3002\u800c\u6211\u8fd9\u4e2a\u662f\u7ec4\u5408\u903b\u8f91\u7535\u8def\uff0c\u867d\u7136\u4e0d\u7528\u64cd\u4f5c\u6a21\u62df\u65f6\u949f\uff0c\u4f46\u4e5f\u9700\u8981\u6dfb\u52a0\u4eff\u771f eval() , \u5426\u5219\u5f00\u5173\u4e0d\u4f1a\u6709\u6548\u679c\u3002 2. \u5f15\u811a\u7ed1\u5b9a \u8fd9\u4e2a\u5f88\u7b80\u5355\uff0c\u4eff\u7167 example \u5199\u6587\u4ef6\u5c31\u578b\u4e86\uff0c\u5728\u8fd9\u91cc\u6211\u5c06 a \u7ed1\u5b9a\u5f00\u51730\uff0c b \u7ed1\u5b9a\u5f00\u51731\uff0c\u8f93\u51fa f \u7ed1\u5b9a led0\u3002","title":"\u4fee\u6539 lab01switch.cpp \u63a5\u5165 NVboard"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_17","text":"\u8f93\u5165 make run \u5373\u53ef\u8fd0\u884c\u3002","title":"\u8fd0\u884c\u6548\u679c"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#nvboard_3","text":"\u77e5\u9053\u5957\u8def\u540e\u5c31\u7b80\u5355\u8bb8\u591a\u4e86\u4e3b\u8981\u5c31\u662f\u4e09\u4ef6\u4e8b 1. \u4fee\u6539 Makefile 2. \u521b\u5efa .V .cpp \u6587\u4ef6 3. \u521b\u5efa\u5f15\u811a\u5206\u914d\u6587\u4ef6 .nxdc cpp \u6587\u4ef6\u63a5\u5165 NVboard nxdc \u6587\u4ef6\u7ed1\u5b9a\u5f15\u811a RST\u5f15\u811a\u62a5\u9519, \u91c7\u7528BTNU\u5f15\u811a\u4ee3\u66ff\uff0c\u627e\u4e0d\u5230\u539f\u56e0\u3002 \u6d41\u6c34\u706f\u4eff\u771f\u6548\u679c \uff08\u7f29\u77ed\u4e86\u6d41\u6c34\u706f\u7684\u95f4\u9694\u65f6\u95f4\uff09 \u590d\u4f4d\u952e\u4eff\u771f\u6548\u679c","title":"\u5c06\u6d41\u6c34\u706f\u63a5\u5165 NVBoard"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_18","text":"\u5b9e\u9a8c\u4e00 \u9009\u62e9\u5668 \u2014 \u5357\u4eac\u5927\u5b66 \u8ba1\u7b97\u673a\u79d1\u5b66\u4e0e\u6280\u672f\u7cfb \u6570\u5b57\u903b\u8f91\u4e0e\u8ba1\u7b97\u673a\u7ec4\u6210 \u8bfe\u7a0b\u5b9e\u9a8c documentation (nju-projectn.github.io)","title":"\u6570\u7535\u5b9e\u9a8c"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_19","text":"","title":"\u5b9e\u9a8c\u4e00\uff1a\u4e8c\u4f4d\u56db\u9009\u4e00\u9009\u62e9\u5668"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_20","text":"\u4f9d\u846b\u82a6\u753b\u74e2\uff0c cpp \u6587\u4ef6\u63a5\u5165 NVboard , V \u6587\u4ef6\u7f16\u5199\u9876\u5c42\u6a21\u5757\uff0c NXDC \u6587\u4ef6\u7ed1\u5b9a\u5f15\u811a\uff0c\u4e4b\u540e\u4fee\u6539 Makefile \u6587\u4ef6\u7f16\u8bd1\u5de5\u7a0b\u3002 Verilog CPP NXDC","title":"\u7f16\u5199\u4ee3\u7801"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_21","text":"","title":"\u4eff\u771f\u7ed3\u679c"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_22","text":"","title":"\u5b9e\u9a8c\u4e8c\uff1a \u8bd1\u7801\u5668\u548c\u7f16\u7801\u5668"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_23","text":"verilog cpp NVboard \u63a5\u5165\u6587\u4ef6\u6ca1\u6709\u6539\u52a8\uff0c\u76f4\u63a5\u6cbf\u7528\u4e0a\u4e00\u4e2a\u5b9e\u9a8c\u7684\u5c31\u53ef\u4ee5\u3002 \u5f15\u811a\u7ed1\u5b9a","title":"\u7f16\u5199\u4ee3\u7801"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_24","text":"\u7531\u4e8e NVboard \u6ca1\u6709\u544a\u8bc9\u6211\u662f\u5171\u9633\u6781\u8fd8\u662f\u5171\u9633\u6781\u6570\u7801\u7ba1\uff0c\u7a0b\u5e8f\u903b\u8f91\u68c0\u67e5\u4e86\u597d\u51e0\u904d\uff0c\u5bfc\u81f4\u6211\u5728\u6570\u7801\u7ba1\u4e0a\u6d6a\u8d39\u4e86\u4e00\u4e9b\u65f6\u95f4\u3002","title":"\u4eff\u771f\u7ed3\u679c"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#yosys","text":"\u5728\u5927\u5b66\u7684\u8bfe\u7a0b\u4e2d\u5f00\u8bbe\u8fc7 FPGA \u53ef\u8bfe\u7a0b\uff0c\u5f53\u65f6\u7528\u7684 EDA \u5de5\u5177\u662f Quartus\uff0c\u5f53\u5199\u5b8c\u4ee3\u7801\u540e\uff0c\u53ef\u4ee5\u8fdb\u884c\u7efc\u5408\uff0c\u5e76\u4e14\u53ef\u4ee5\u67e5\u770b\u7efc\u5408\u540e\u751f\u6210\u7684\u7535\u8def\u56fe\u3002\u73b0\u5728\u5728Linux\u4e0b\u7528 verilator \u4eff\u771f\uff0c\u60f3\u67e5\u770b\u7535\u8def\u56fe\uff0c\u627e\u4e86\u5f88\u4e45\uff0c\u53d1\u73b0\u4e86\u4e00\u4e2a\u5f00\u6e90\u7684\u7efc\u5408\u5de5\u5177 Yosys \u5728 ubuntu \u4e0b\u76f4\u63a5\u4f7f\u7528 apt install yosys \u5b89\u88c5\u3002\u67e5\u770b\u4f7f\u7528\u6587\u6863\uff0c\u7f16\u5199\u4e86\u4e00\u4e2a\u7b80\u5355\u4e86\u811a\u672c\u6587\u4ef6\uff0c\u7528\u4e8e\u751f\u6210\u53ef\u89c6\u5316\u7684\u7535\u8def\u56fe\u3002 \u8fd0\u884c\u540e\u4f1a\u751f\u6210 dot \u6587\u4ef6\uff0c\u5728 vscode \u4e0a\u5b89\u88c5\u63d2\u4ef6 Graphviz Interactive Preview \u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u67e5\u770b\u3002 lab03mux41 \u7528\u5230\u4e86\u4e00\u4e9b\u4e0d\u652f\u6301\u7684\u8bed\u6cd5\uff0c\u6ca1\u6709\u529e\u6cd5\u751f\u6210\u56fe\u50cf\u3002","title":"\u756a\u5916\u7bc7\uff1a\u5f00\u6e90\u7efc\u5408\u5de5\u5177 Yosys"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#alu","text":"","title":"\u5b9e\u9a8c\u4e09 \u52a0\u6cd5\u5668\u4e0eALU"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_25","text":"\u5728\u8003\u7814\u7684\u65f6\u5019\u5b66\u4e60 \u8ba1\u7b97\u673a\u7ec4\u6210\u539f\u7406 \u8fd9\u95e8\u8bfe\uff0c\u4e5f\u6df1\u5165\u4e86\u89e3\u8fc7 ALU \u7684\u8bbe\u8ba1\u65b9\u6cd5\uff0c\u63a5\u4e0b\u6765\u7684\u4ee3\u7801\u7f16\u5199\uff0c\u6211\u4eff\u7167\u7ecf\u5178 ALU \u901a\u8fc7\u8bbe\u7f6e PSW \u5bc4\u5b58\u5668\u6765\u5b9e\u73b0\u5bf9\u6ea2\u51fa\u3001\u7b26\u53f7\u7b49\u7b49\u4fe1\u606f\u7684\u68c0\u6d4b\u4e0e\u4fdd\u5b58\u3002","title":"\u7a0b\u5e8f\u8bbe\u8ba1\u601d\u60f3"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_26","text":"\u9876\u5c42\u6a21\u5757 \u5b9e\u4f8b\u5316\u4e86\u4e00\u4e2a alu \u5355\u5143\uff084\u4f4d\u8865\u7801\uff09\uff0c a \u3001 b \u4e3a\u8f93\u5165 out \u4e3a\u8f93\u51fa\uff0c\u5e76\u4e14\u8f93\u51fa\u4e86 PSW \u4e2d\u7684 \u4e00\u4e9b\u5bc4\u5b58\u5668\u3002 \u672c\u6765\u8fd8\u51c6\u5907\u5c06 a b out \u663e\u793a\u5728\u6570\u7801\u7ba1\u4e0a\uff0c\u4f46\u662f\u7531\u4e8e\u6d89\u53ca\u5230\u8865\u7801\u7684\u663e\u793a\uff0c\u8fd8\u6ca1\u6709\u8fdb\u5c55\uff0c\u5c31\u53ea\u663e\u793a\u4e86 out \u7684 \u4f4e3\u4f4d\uff080-7\uff09 . \u7535\u8def\u56fe \uff1a\u7531 yosys \u751f\u6210 ALU\u6a21\u5757 \u4e3b\u8981\u601d\u60f3\u662f\uff0c\u5148\u62ff\u5230\u8f93\u5165 a \u3001 b , \u540c\u65f6\u8ba1\u7b97\u4e0d\u540c\u64cd\u4f5c\u7684\u7ed3\u679c\uff0c\u6700\u540e\u901a\u8fc7\u4e00\u4e2a\u9009\u62e9\u5668\uff0c\u9009\u62e9\u9700\u8981\u7684\u7ed3\u679c\u3002\u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u8ba1\u7b97\u90e8\u5206\u3002 1. \u8865\u7801\u7684\u52a0\u51cf\u6cd5\uff0c\u529f\u80fd\u8986\u76d6\uff08\u52a0\u6cd5\uff0c\u51cf\u6cd5\uff0c\u6bd4\u8f83\u5927\u5c0f\uff0c \u5224\u65ad\u76f8\u7b49\uff09 2. \u903b\u8f91\u8fd0\u7b97\uff0c\u6240\u6709\u7684\u903b\u8f91\u8fd0\u7b97\u90fd\u662f\u5355\u72ec\u4e00\u6761\u7ebf\uff0c\u6211\u6ca1\u6709\u5c06\u5176\u6574\u5408\uff0c\u6309\u9053\u7406\u5e94\u8be5\u8fd8\u53ef\u4ee5\u7b80\u5316 3. \u6bd4\u8f83\u5927\u5c0f\u548c\u5224\u65ad\u76f8\u7b49\uff0c\u901a\u8fc7\u51cf\u6cd5\u548c PSW \u5bc4\u5b58\u5668\u5b9e\u73b0\u3002 \u6761\u4ef6\u8f6c\u79fb\u6307\u4ee4 - \u5feb\u61c2\u767e\u79d1 (baike.com) \u6570\u7801\u7ba1\u663e\u793a \u5f15\u811a\u7ed1\u5b9a","title":"\u7f16\u5199\u4ee3\u7801"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_27","text":"\u52a0\u6cd5: 3+1=4\uff0c\u672a\u6ea2\u51fa 3+(-7)=-4, \u672a\u6ea2\u51fa\uff0c\u5176\u4e2d\u53d1\u751f\u4e86\u501f\u4f4d CF \u7f6e1\uff0c\u7ed3\u679c\u4e3a\u8d1f\u6570 SF \u4f4d\u7f6e1. \u51cf\u6cd5\uff08\u5224\u65ad\u4e24\u4e2a\u6570\u7684\u5927\u5c0f\u4e5f\u662f\u7528\u51cf\u6cd5\u5b9e\u73b0\u7684\uff09\uff1a 3-(-7)=10>7\uff0c\u6ea2\u51fa, OF \u4f4d\u7f6e1\uff0c 0-(-7)=7, \u672a\u6ea2\u51fa OF \u4f4d\u7f6e0 \u5176\u4ed6\u7684\u903b\u8f91\u8fd0\u7b97\u5c31\u4e0d\u653e\u4e0a\u6765\u4e86\u3002","title":"\u4eff\u771f\u7ed3\u679c"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_28","text":"","title":"\u5b9e\u9a8c\u56db \u8ba1\u6570\u5668\u548c\u65f6\u949f"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_29","text":"\u5982\u4f55\u5c060-99\u7684\u503c\u5206\u4e3a\u5341\u4f4d\u4e2a\u4f4d\uff0c\u5728\u4e00\u822c\u7684\u8bed\u8a00\u4e2d\u76f4\u63a5\u7528\u9664\u6cd5\u548c\u53d6\u6a21\u5c31\u884c\u4e86\uff0c\u5728FPGA\u4e2d\u4e5f\u53ef\u4ee5\u7528\uff0c\u4f46\u8bbe\u8ba1\u5c31\u4e0d\u90a3\u4e48\u4f18\u79c0\uff0c\u6211\u6478\u7d22\u4e86\u4e00\u6bb5\u65f6\u95f4\u4e5f\u4e0d\u77e5\u9053\u5982\u4f55\u8bbe\u8ba1\u3002","title":"\u7a0b\u5e8f\u8bbe\u8ba1\u601d\u60f3"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_30","text":"\u9876\u5c42\u6a21\u5757\uff1a \u5f15\u811a\u5206\u914d","title":"\u7f16\u5199\u4ee3\u7801"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_31","text":"\u4e3a\u4e86\u6f14\u793a\u6548\u679c\uff0c\u5c06\u8ba1\u6570\u65f6\u949f\u9891\u7387\u8c03\u5feb\u4e86\u3002","title":"\u4eff\u771f\u7ed3\u679c"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_32","text":"","title":"\u5b9e\u9a8c\u516d \u79fb\u4f4d\u5bc4\u5b58\u5668\u53ca\u6876\u5f62\u79fb\u4f4d\u5668"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_33","text":"","title":"\u8bbe\u8ba1\u601d\u60f3"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_34","text":"\u9876\u5c42\u6a21\u5757\uff1a \u5f15\u811a\u7ed1\u5b9a\uff1a \u4eff\u771f\u7ed3\u679c\uff1a","title":"\u4ee3\u7801\u7f16\u5199"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#ps2","text":"","title":"\u5b9e\u9a8c\u4e03 PS2\u952e\u76d8"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_35","text":"\u5229\u7528\u72b6\u6001\u673a\u5b8c\u6210\u5bf9PS2\u8bfb\u65f6\u5e8f\u7684\u540c\u6b65\uff0c\u901a\u8fc7\u5224\u65ad\u65ad\u7801\u6765\u786e\u5b9a\u4e00\u4e2a\u6309\u952e\u7684\u6309\u4e0b\u548c\u677e\u5f00\uff0c\u8bbe\u7f6e\u72b6\u6001\u4f4d\u4f5c\u4e3a\u6570\u7801\u7ba1\u7684\u4f7f\u80fd\u63a7\u5236\u7aef\uff0c\u901a\u8fc7\u6355\u83b7\u4f7f\u80fd\u63a7\u5236\u7aef\u7684\u4e0b\u964d\u6cbf\u6765\u8ba1\u7b97\u6309\u952e\u7684\u6b21\u6570\u3002\u53ef\u4ee5\u770b\u5230\u7efc\u5408\u540e\u786e\u5b9e\u8bc6\u522b\u51fa\u4e86\u72b6\u6001\u673a\u3002","title":"\u7a0b\u5e8f\u8bbe\u8ba1\u601d\u60f3"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_36","text":"module lab08keyboard ( input clk , input rst , input ps2_clk , input ps2_data , output [ 7 : 0 ] seg1 , seg2 , seg3 , seg4 , seg5 , seg6 , seg7 , seg8 ); reg [ 7 : 0 ] ps2out ; reg [ 23 : 0 ] ps2segin ; reg ps2ready , ps2next , ps2over ; ps2_keyboard ps2keyboard (. clk ( clk ), . clrn ( ~ rst ), //\u4f4e\u7535\u5e73\u590d\u4f4d . ps2_clk ( ps2_clk ), . ps2_data ( ps2_data ), . data ( ps2out ), . ready ( ps2ready ), . nextdata_n ( ps2next ), . overflow ( ps2over ) ); /***************************\u4e09\u6bb5\u5f0f\u72b6\u6001\u673a*******************************/ parameter stateRead = 4 'b0001 ; parameter stateNotify = 4 'b0010 ; //\u62c9\u4f4enextdata_n,\u901a\u77e5\u8bfb\u53d6\u5b8c\u6bd5 parameter stateNotify2 = 4 'b0100 ; //\u62c9\u4f4enextdata_n,\u901a\u77e5\u8bfb\u53d6\u5b8c\u6bd5 parameter stateIdle = 4 'b1000 ; reg [ 3 : 0 ] state_current , state_next ; //\u540c\u6b65\u72b6\u6001\u8f6c\u79fb always @( posedge clk or posedge rst ) begin if ( rst ) begin state_current <= stateIdle ; end else begin state_current <= state_next ; end end //\u5f02\u6b65\u6539\u53d8\u72b6\u6001 always @( * ) begin case ( state_current ) stateIdle: begin state_next = ( ps2ready == 1 'b1 ) ? stateRead: stateIdle ; end stateRead: begin state_next = stateNotify ; end stateNotify: begin state_next = stateNotify2 ; end stateNotify2: begin state_next = stateIdle ; end default : state_next = stateIdle ; endcase end //\u6bcf\u4e2a\u72b6\u6001\u7684\u8f93\u51fa always @( posedge clk ) begin case ( state_current ) stateIdle: begin ps2next <= 1 ; //\u9ed8\u8ba4\u62c9\u9ad8 end stateNotify: begin ps2next <= 0 ; //\u603b\u7ebf\u62c9\u4f4e end stateNotify2: begin ps2next <= 0 ; //\u603b\u7ebf\u62c9\u4f4e end stateRead: begin ps2segin [ 23 : 0 ] <= { ps2segin [ 15 : 0 ], ps2out [ 7 : 0 ]}; //\u4fdd\u5b58\u8bfb\u53d6\u7684\u6700\u540e\u4e09\u4e2a\u503c end default : begin ps2next <= 1 ; //\u9ed8\u8ba4\u62c9\u9ad8 end endcase end /*********************************************************************/ /** * \u5982\u679c\u8bfb\u53d6\u5230\u7684\u6700\u540e\u4e09\u4e2a\u503c\u662f (A,0XF0,A)\u5f62\u5f0f\uff0c\u5219\u662f\u65ad\u7801\uff0c\u5173\u95ed\u6570\u7801\u7ba1\u663e\u793a * (eg:\u6709bug,\u627e\u4e86\u5f88\u4e45\u6ca1\u6709\u627e\u51fa\u6765\uff0c\u7a0b\u5e8f\u590d\u4f4d\u65f6\uff0csegen\u7684\u503c\u662f1\uff0c\u4e0d\u662f0 * \u7ecf\u8fc7\u6392\u67e5\uff0c\u4e3a if \u8bed\u53e5\u51fa\u9519\uff0c\u4f46\u627e\u4e0d\u5230\u539f\u56e0\u3002) **/ reg segen ; //\u6570\u7801\u7ba1\u63a7\u5236\u7aef\u53e3 always @( * ) begin if (( ps2segin [ 15 : 8 ] == 8'hf0 ) && ps2segin [ 7 : 0 ] == ps2segin [ 23 : 16 ]) begin segen = 0 ; end else begin segen = 1 ; end end /*\u5f53\u6309\u4e0b\u952e\u76d8\u65f6\uff0csegen = 1,\u6570\u7801\u7ba1\u4eae * \u677e\u5f00\u952e\u76d8\u65f6\uff0csegen = 0,\u6570\u7801\u7ba1\u706d * \u901a\u8fc7\u6355\u83b7 segen \u7684\u4e0a\u5347\u6cbf\uff0c\u6216\u4e0b\u964d\u6cbf\uff0c\u5373\u53ef\u83b7\u53d6\u6309\u4e0b\u952e\u76d8\u7684\u6b21\u6570 */ reg [ 3 : 0 ] segcountl , segcounth ; always @( negedge segen ) begin if ( segcountl == 4 'd9 ) begin segcounth <= segcounth + 4 'd1 ; segcountl <= 4 'd0 ; end else begin segcountl <= segcountl + 4 'd1 ; end end /* \u952e\u76d8\u626b\u63cf\u7801\u663e\u793a */ seg seglow1 (. in ( ps2segin [ 3 : 0 ]), . out ( seg1 ),. en ( segen )); seg seghigh1 (. in ( ps2segin [ 7 : 4 ]), . out ( seg2 ),. en ( segen )); /* \u952e\u76d8 ASCII \u7801\u663e\u793a */ reg [ 7 : 0 ] ascii ; toASCII ps2ascii (. addr ( ps2segin [ 7 : 0 ]),. val ( ascii )); seg seglow2 (. in ( ascii [ 3 : 0 ]), . out ( seg3 ),. en ( segen )); seg seghigh2 (. in ( ascii [ 7 : 4 ]), . out ( seg4 ),. en ( segen )); /* \u6ca1\u6709\u7528\u5230\uff0c\u4e0d\u663e\u793a */ seg seglow3 (. in ( ps2segin [ 19 : 16 ]), . out ( seg5 ),. en ( 1 'd0 )); seg seghigh3 (. in ( ps2segin [ 23 : 20 ]), . out ( seg6 ),. en ( 1 'd0 )); /* \u8ba1\u6570\u663e\u793a */ seg segnuml (. in ( segcountl ), . out ( seg7 ),. en ( 1 'd1 )); seg seghnumh (. in ( segcounth ), . out ( seg8 ),. en ( 1 'd1 )); endmodule \u5f15\u811a\u7ed1\u5b9a","title":"\u7f16\u5199\u4ee3\u7801"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#_37","text":"","title":"\u4eff\u771f\u7ed3\u679c"},{"location":"ysyx/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E9%A2%84%E5%AD%A6%E4%B9%A0/#vga","text":"VGA\u663e\u793a\u56fe\u7247\u4f4d\u7f6e\u9519\u4e71\uff0c\u6ca1\u6709\u641e\u6e05\u695avga\u5206\u8fa8\u7387\u5230\u5e95\u662f\u591a\u5c11\uff0c\u81ea\u5df1\u751f\u6210\u7684640-480 \u56fe\u7247\u5927\u5c0f\u548c\u539f\u59cb\u7684\u5927\u5c0f\u4e0d\u4e00\u6837\u5bfc\u81f4\u4f4d\u7f6e\u9519\u4e71\u3002\u5b57\u7b26\u8f93\u5165\u5b9e\u9a8c\u5c1d\u8bd5\u4e86\u4e00\u4e0b\u51c6\u5907\u653e\u5f03\u3001\u5982\u679c\u8981\u505a\u5230\u7684\u8bdd\uff0c\u611f\u89c9\u5c31\u50cf\u662f\u8f6f\u4ef6\u7f16\u7a0b\u3001\u9700\u8981\u7528\u5230\u5927\u91cf\u7684\u884c\u4e3a\u5efa\u6a21\uff0c\u611f\u89c9\u5728\u5199c\u8bed\u8a00\u3002","title":"\u5b9e\u9a8c\u516b \u5b9e\u9a8c\u4e5d VGA"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/","text":"\u5355\u5468\u671f + pc \u5730\u5740\u81ea\u589e\u3001\u8df3\u8f6c\u3001\u6682\u505c\u3001\u65f6\u5e8f\u903b\u8f91\u7535\u8def Index of /~cs61c/fa14/lec (berkeley.edu) Ibex: An embedded 32 bit RISC-V CPU core \u2014 Ibex Documentation 0.1.dev50+g5c49fad.d20220629 documentation (ibex-core.readthedocs.io) riscv/riscv_decoder.v at master \u00b7 ultraembedded/riscv (github.com) \u6d4b\u8bd5 \u00b6 \u5bc4\u5b58\u5668\u8bfb\u5199 \u8bd1\u7801\u6307\u4ee4\u662f\u5426\u6b63\u786e ALU\u529f\u80fd\u7684\u6d4b\u8bd5 \u8bd1\u7801\u6a21\u5757 \u00b6 \u8bd1\u7801\u6a21\u5757\u8bf4\u7b80\u5355\u4e5f\u7b80\u5355\u8bf4\u590d\u6742\u4e5f\u590d\u6742\uff0c\u8fd9\u51e0\u5929\u6211\u67e5\u8be2\u4e86\u5f88\u591a\u8d44\u6599\uff0c\u53c2\u8003\u4e86\u8bb8\u591a\u5f00\u6e90CPU\u8bd1\u7801\u6a21\u5757\u7684\u8bbe\u8ba1\uff0c\u60f3\u627e\u51fa\u6bd4\u8f83\u597d\u8bd1\u7801\u7684\u65b9\u5f0f \u884c\u4e3a\u5efa\u6a21\u65b9\u5f0f \u00b6 \u8fd9\u79cd\u8bd1\u7801\u65b9\u5f0f\u6700\u4e3a\u76f4\u63a5\u660e\u4e86\uff0c\u76f4\u63a5\u91c7\u7528 case \u8bed\u53e5\uff0c\u5bf9\u4e0d\u540c\u7684 opcode \u8fdb\u884c\u5206\u652f\u5904\u7406\uff0c\u5728\u6bcf\u4e00\u6761\u5206\u652f\u540e\u9762\u8fdb\u884c alu \u8fd0\u7b97\u5355\u5143\u7684\u4fe1\u53f7\u5904\u7406\u7b49\u7b49\u3002 \u4e3b\u8981\u53c2\u8003\u4ee3\u7801\uff1a ibex/ibex_decoder.sv at master \u00b7 lowRISC/ibex (github.com) tinyriscv: \u4e00\u4e2a\u4ece\u96f6\u5f00\u59cb\u5199\u7684\u6781\u7b80\u3001\u975e\u5e38\u6613\u61c2\u7684RISC-V\u5904\u7406\u5668\u6838\u3002 (gitee.com) \u53ef\u4ee5\u4ece\u4e0a\u56fe\u770b\u5230\uff0c\u8fd9\u79cd\u8bd1\u7801\u65b9\u5f0f\u7f16\u5199\u8d77\u6765\u5f88\u7b80\u5355\uff0c\u53ea\u8981\u4e0d\u65ad\u7684\u5f80\u4e0b\u52a0\u5206\u652f\u5c31\u884c\u4e86\uff0c\u4f46\u5728\u4ee3\u7801\u53ef\u8bfb\u6027\u4e0a\u5c31\u5dee\u5f88\u591a\uff0c\u9700\u8981\u6df1\u5165\u6bcf\u4e00\u6761\u6307\u4ee4\u624d\u80fd\u7406\u89e3\u4ee3\u7801\u3002\u9762\u79ef\u4f18\u5316\u4e5f\u4e0d\u591f\u597d\u3002 \u6a21\u677f\u5339\u914d\u65b9\u5f0f \u00b6 \u8fd9\u79cd\u8bd1\u7801\u65b9\u5f0f\u6bd4\u884c\u4e3a\u5efa\u6a21\u8981\u4f18\u96c5\uff0c\u53ef\u8bfb\u6027\u4e5f\u6bd4\u8f83\u597d\u3002\u6bcf\u6761\u6307\u4ee4\u7684 opcode\u3001fun3\u3001fun7 \u90fd\u662f\u56fa\u5b9a\u7684\uff0c\u53ef\u4ee5\u4e3a\u6bcf\u6761\u6307\u4ee4\u521b\u5efa\u4e00\u4e2a mask\uff0c\u7528 inst&mast \u5c31\u53ef\u4ee5\u5224\u65ad\u5f53\u524d\u6307\u4ee4\u5c5e\u4e8e\u54ea\u4e00\u6761\u6307\u4ee4\u3002\u4e0e pa \u4e2d nemu \u89e3\u6790\u6307\u4ee4\u7684\u65b9\u5f0f\u4e00\u6837\u3002 \u4e3b\u8981\u53c2\u8003\u4ee3\u7801\uff1a riscv/riscv_decoder.v at master \u00b7 ultraembedded/riscv (github.com) nemu \u4e2d\u6307\u4ee4\u89e3\u6790\u65b9\u5f0f\u5982\u4e0b \u53c2\u8003\u7684 riscv \u8bbe\u8ba1\u4e2d\u7684 decoder \u6a21\u5757\u5982\u4e0b \u53ef\u4ee5\u770b\u5230 exec_o \u63a7\u5236\u4fe1\u53f7\u7531\u6307\u4ee4 ANDI \u3001 ADDI \u7b49\u751f\u6210\uff0c\u91c7\u7528\u4e86\u4e00\u4e2a\u6216\u903b\u8f91\u3002\u7b80\u6d01\u660e\u4e86\u3002 // andi `define INST_ANDI 32'h7013 //\u6307\u4ee4 `define INST_ANDI_MASK 32'h707f //\u6307\u4ee4mask \u8fd9\u6837\u7684\u8bbe\u8ba1\u65b9\u5f0f\uff0c\u6dfb\u52a0\u4e00\u6761\u6307\u4ee4\u5341\u5206\u7684\u65b9\u4fbf\uff0c\u53ea\u9700\u8981\u8bbe\u8ba1\u5bf9\u5e94\u7684 mask \u5c31\u884c\u4e86\uff0c\u548c nemu \u662f\u4e00\u6a21\u4e00\u6837\u7684\u3002\u4f46\u7f3a\u70b9\u4e5f\u5341\u5206\u660e\u663e\uff0c\u8fd9\u6837\u5b50\u662f\u5426\u8d44\u6e90\u6d88\u8017\u592a\u5927\u4e86\u5462\uff1f \u9010\u5c42\u5206\u6790\u65b9\u5f0f \u00b6 \u8bf4\u5b9e\u8bdd\u8fd9\u4e2a\u540d\u79f0\u662f\u6211\u81ea\u5df1\u778e\u7f16\u7684\uff0c\u56e0\u4e3a\u6211\u4e0d\u592a\u6e05\u695a\u7528\u4ec0\u4e48\u53bb\u63cf\u8ff0\u3002\u65e9\u4e9b\u65f6\u5019\u5728\u7fa4\u91cc\u770b\u89c1\u6709\u4eba\u5728\u8ba8\u8bba \u8702\u9e1fe203 \u7684\u8bbe\u8ba1\u65b9\u5f0f\uff0c\u6700\u8fd1\u53bb\u4e86\u89e3\u4e86\u4e00\u4e0b\u3002\u6700\u5f00\u59cb\u5728 github \u4e0a\u770b\u89c1\u5b83\u7684 decoder \u7684\u8bbe\u8ba1\u65b9\u5f0f\u65f6\uff0c\u786e\u5b9e\u88ab\u60ca\u8273\u5230\u4e86\uff0c\u57fa\u672c\u662f\u6309\u7167\u624b\u518c\u8bbe\u8ba1\u51fa\u6765\u7684\uff0c\u5f88\u7ec6\u8282\uff0c\u548c\u5176\u4ed6\u65b9\u5f0f\u90fd\u4e0d\u4e00\u6837\u3002 \u4e3b\u8981\u53c2\u8003\u4ee3\u7801\uff1a e203_hbirdv2/e203_exu_decode.v at master \u00b7 riscv-mcu/e203_hbirdv2 (github.com) \u82b1\u4e86\u4e00\u5929\u8bfb\u5b8c\u4e86\u7684\u8be5 riscv \u8bbe\u8ba1\u7684\u914d\u5957\u4e66\u7c4d \u624b\u628a\u624b\u6559\u4f60\u8bbe\u8ba1CPU\u2014\u2014RISC-V\u5904\u7406\u5668\u7bc7 \u60f3\u6df1\u5165\u4e86\u89e3\u4e00\u4e0b decoder \u7684\u8bbe\u65b9\u5f0f\uff0c\u53d1\u73b0\u4ecb\u7ecd\u7684\u5f88\u5c11\u3002\u6ca1\u529e\u6cd5\uff0c\u53ea\u80fd\u53bb\u7814\u7a76\u6e90\u7801\u3002 \u7b2c\u4e00\u6b65\uff1a\u5206\u89e3 opcode \u00b6 wire [ 6 : 0 ] opcode = rv32_instr [ 6 : 0 ]; wire opcode_1_0_00 = ( opcode [ 1 : 0 ] == 2 'b00 ); wire opcode_1_0_01 = ( opcode [ 1 : 0 ] == 2 'b01 ); wire opcode_1_0_10 = ( opcode [ 1 : 0 ] == 2 'b10 ); wire opcode_1_0_11 = ( opcode [ 1 : 0 ] == 2 'b11 ); // We generate the signals and reused them as much as possible to save gatecounts wire opcode_4_2_000 = ( opcode [ 4 : 2 ] == 3 'b000 ); wire opcode_4_2_001 = ( opcode [ 4 : 2 ] == 3 'b001 ); wire opcode_4_2_010 = ( opcode [ 4 : 2 ] == 3 'b010 ); wire opcode_4_2_011 = ( opcode [ 4 : 2 ] == 3 'b011 ); wire opcode_4_2_100 = ( opcode [ 4 : 2 ] == 3 'b100 ); wire opcode_4_2_101 = ( opcode [ 4 : 2 ] == 3 'b101 ); wire opcode_4_2_110 = ( opcode [ 4 : 2 ] == 3 'b110 ); wire opcode_4_2_111 = ( opcode [ 4 : 2 ] == 3 'b111 ); wire opcode_6_5_00 = ( opcode [ 6 : 5 ] == 2 'b00 ); wire opcode_6_5_01 = ( opcode [ 6 : 5 ] == 2 'b01 ); wire opcode_6_5_10 = ( opcode [ 6 : 5 ] == 2 'b10 ); wire opcode_6_5_11 = ( opcode [ 6 : 5 ] == 2 'b11 ); \u53ef\u4ee5\u770b\u5230\uff0c\u4ed6\u5c06 opcdoe \u5404\u4e2a\u4f4d\u7684\u60c5\u51b5\u76f4\u63a5\u679a\u4e3e\u51fa\u6765\u4e86\uff0c\u7528 wire \u4fe1\u53f7\u7ebf\u8868\u793a\u662f\u5426\u51fa\u73b0\u4e86\u5bf9\u5e94\u4fe1\u53f7\u3002\u4ece riscv \u624b\u518c\u5f97\u77e5\uff0c opcode \u7684\u4f4e\u4e24\u4f4d\u4e00\u5b9a\u662f 11 \uff0c opcode[6:5] \u4e0e opcode[4:2] \u7684\u4e0d\u540c\u6392\u5217\u7ec4\u5408\u8868\u793a\u4e0d\u540c\u7684\u6307\u4ee4\u7c7b\u578b\u3002\u5982\u4e0b\u56fe\uff1a \u5728\u4ee3\u7801\u4e2d\u5206\u522b\u6307\u4ee4\u7c7b\u578b\u5177\u4f53\u64cd\u4f5c\u5982\u4e0b wire rv32_nmadd = opcode_6_5_10 & opcode_4_2_011 & opcode_1_0_11 ; wire rv32_jal = opcode_6_5_11 & opcode_4_2_011 & opcode_1_0_11 ; wire rv32_op_imm = opcode_6_5_00 & opcode_4_2_100 & opcode_1_0_11 ; wire rv32_op = opcode_6_5_01 & opcode_4_2_100 & opcode_1_0_11 ; wire rv32_op_fp = opcode_6_5_10 & opcode_4_2_100 & opcode_1_0_11 ; wire rv32_system = opcode_6_5_11 & opcode_4_2_100 & opcode_1_0_11 ; wire rv32_auipc = opcode_6_5_00 & opcode_4_2_101 & opcode_1_0_11 ; wire rv32_lui = opcode_6_5_01 & opcode_4_2_101 & opcode_1_0_11 ; wire rv32_resved1 = opcode_6_5_10 & opcode_4_2_101 & opcode_1_0_11 ; wire rv32_resved2 = opcode_6_5_11 & opcode_4_2_101 & opcode_1_0_11 ; wire rv32_op_imm_32 = opcode_6_5_00 & opcode_4_2_110 & opcode_1_0_11 ; wire rv32_op_32 = opcode_6_5_01 & opcode_4_2_110 & opcode_1_0_11 ; wire rv32_custom2 = opcode_6_5_10 & opcode_4_2_110 & opcode_1_0_11 ; \u57fa\u672c\u5c31\u662f\u6309\u7167\u4e0a\u9762\u7684\u8868\u683c\u8fdb\u884c\u64cd\u4f5c\u7684\uff0c\u4e0d\u65ad\u7684\u91cd\u590d\u5229\u7528\u521a\u521a\u7684\u4fe1\u53f7\u7ebf\uff0c\u53ef\u4ee5\u8282\u7701\u8d44\u6e90\u3002\u5982\u679c\u5728\u6bcf\u4e00\u6b65\u90fd\u884c\u6bd4\u8f83\u64cd\u4f5c \uff0c\u5982\u4e0b\uff1a //\u5148\u6bd4\u8f83\u518d\u4f7f\u7528 wire rv32_op_imm = opcode_6_5_00 & opcode_4_2_100 & opcode_1_0_11 ; //\u4f7f\u7528\u65f6\u518d\u6bd4\u8f83 wire rv32_op_imm = opcode [ 6 : 5 ] == 2 'b00 & opcode [ 4 : 2 ] == 3 'b100 & opcode [ 1 : 0 ] == 2 'b00 ; \u6309\u7167\u9053\u7406\u6765\u8bf4\uff0c\u786e\u5b9e\u7b2c\u4e00\u79cd\u65b9\u5f0f\u53ef\u4ee5\u8282\u7701\u4e00\u4e9b\u6bd4\u8f83\u5668\uff0c\u4f46\u5728\u7efc\u5408\u65f6\uff0c\u4e24\u8005\u662f\u5426\u76f8\u540c\u5c31\u4e0d\u6e05\u695a\u4e86\u3002 \u7b2c\u4e8c\u90e8\uff1a\u786e\u5b9a\u6bcf\u6761\u6307\u4ee4 \u00b6 func7 func3 \u4e5f\u548c opcode \u540c\u6837\u88ab\u5206\u89e3\u4e86\uff0c\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u786e\u8ba4\u662f\u54ea\u4e00\u6761\u6307\u4ee4\u3002 wire rv32_add = rv32_op & rv32_func3_000 & rv32_func7_0000000 ; wire rv32_sub = rv32_op & rv32_func3_000 & rv32_func7_0100000 ; wire rv32_sll = rv32_op & rv32_func3_001 & rv32_func7_0000000 ; wire rv32_slt = rv32_op & rv32_func3_010 & rv32_func7_0000000 ; wire rv32_sltu = rv32_op & rv32_func3_011 & rv32_func7_0000000 ; wire rv32_xor = rv32_op & rv32_func3_100 & rv32_func7_0000000 ; wire rv32_srl = rv32_op & rv32_func3_101 & rv32_func7_0000000 ; wire rv32_sra = rv32_op & rv32_func3_101 & rv32_func7_0100000 ; wire rv32_or = rv32_op & rv32_func3_110 & rv32_func7_0000000 ; wire rv32_and = rv32_op & rv32_func3_111 & rv32_func7_0000000 ; \u5982\u4e0a\u6240\u793a\uff0c\u6bcf\u6761\u6307\u4ee4\u90fd\u6709\u4e00\u6761\u5355\u72ec\u7684\u4fe1\u53f7\u7ebf wire \uff0c\u4e3a 1 \u65f6\uff0c\u4ee3\u8868\u4e3a\u5f53\u524d\u6307\u4ee4\u3002\u4e5f\u90fd\u662f\u6309\u7167\u624b\u518c\u4e00\u6b65\u6b65\u5206\u6790\u7684\u3002 \u7b2c\u4e09\u6b65\uff1a\u751f\u6210\u63a7\u5236\u4fe1\u53f7 \u00b6 \u5728\u7b2c\u4e8c\u6b65\u4e2d\u786e\u5b9a\u4e86\u6307\u4ee4\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u6839\u636e\u6bcf\u6761\u6307\u4ee4\u751f\u6210\u76f8\u5bf9\u4e8e\u7684\u63a7\u5236\u4fe1\u53f7\u4e86\uff0c\u6709\u4e9b\u6307\u4ee4\u7684\u63a7\u5236\u4fe1\u53f7\u53ef\u4ee5\u5408\u5e76\u3002\u6e90\u7801\u4e2d\u7684\u63a7\u5236\u4fe1\u53f7\u6bd4\u8f83\u590d\u6742\uff0c\u4e0d\u592a\u5bb9\u6613\u770b\u61c2\u3002 \u4e0d\u8fc7\u6ca1\u5173\u7cfb\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u6df1\u5165\u7406\u89e3\uff0c\u4e86\u89e3\u4e00\u4e0b\u8bd1\u7801\u601d\u8def\u5c31\u884c\u4e86\uff0c\u63a7\u5236\u4fe1\u53f7\u53ef\u4ee5\u81ea\u5df1\u81ea\u5b9a\u4e49\u3002 \u4f18\u70b9 \u00b6 \u521d\u770b decoder \u7684\u4ee3\u7801\u5176\u5b9e\u4f1a\u4e00\u8138\u832b\u7136\uff0c\u4e0d\u77e5\u9053\u5728\u5e72\u4ec0\u4e48\uff0c\u6ca1\u6709\u4e0a\u9762\u4e24\u79cd\u597d\u61c2\u3002\u4f46\u5176\u5b9e\u5bf9\u7740\u624b\u518c\u53bb\u7406\u89e3\uff0c\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u8bd1\u7801\u601d\u8def\u57fa\u672c\u662f\u6309\u7167 riscv\u624b\u518c \u6765\u7684\u3002\u660e\u767d\u4e86\u6d41\u7a0b\u4ee5\u540e\u5341\u5206\u6e05\u6670\u660e\u4e86\uff0c\u6dfb\u52a0\u6307\u4ee4\u4e5f\u5f88\u7b80\u5355\u3002\u5176\u5b9e\u8fd9\u79cd\u8bd1\u7801\u65b9\u5f0f\u5f88\u50cf\u7b2c\u4e00\u79cd\u884c\u4e3a\u5efa\u6a21\u65b9\u5f0f\uff0c\u4e5f\u662f\u770b opcode func3 func7 \u4f46\u66f4\u52a0\u7684\u4f18\u96c5\u7b80\u6d01\uff0c\u4ee3\u7801\u6613\u61c2\u3002\u53ea\u4f7f\u7528\u5230\u4e86 assign \u8bed\u53e5\uff0c\u5229\u4e8e\u4e86\u89e3\u7efc\u5408\u540e\u7684\u7535\u8def\u7ed3\u6784\u3002 ALU\u8bbe\u8ba1 \u00b6 Index of /~teodorescu.1/download/teaching/cse675.au08 (ohio-state.edu) \u52a0\u6cd5\u5668\u4e0e\u51cf\u6cd5\u5668 \u00b6 verilog \u4e2d\u5176\u5b9e\u4ee5\u53ca\u5185\u7f6e\u4e86 + - \u7b49\u57fa\u7840\u8fd0\u7b97\u65b9\u5f0f\u3002 \u5185\u7f6e\u7684 + - * / \u8fd0\u7b97 \u8fd9\u4e2a\u6211\u67e5\u4e86\u4e00\u4e0b\u8d44\u6599\uff0c\u5982\u679c\u662f\u90e8\u7f72\u5728 fpga \u4e0a\u9762\uff0c fpga \u4e00\u822c\u90fd\u4f1a\u6709 \u52a0\u6cd5\u5668 \u4e58\u6cd5\u5668 \u7b49\u8d44\u6e90\uff0c\u4f1a\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e0a\u9762\u7684\u8d44\u6e90\u3002\u4f46\u5982\u679c\u6ca1\u6709\u5462\uff1f\u4f1a\u88ab\u7efc\u5408\u6210\u4e0a\u9762\u6837\u5b50\u5462\uff1f\u8fd9\u4e2a\u6211\u627e\u4e86\u627e\u8d44\u6599\u6700\u540e\u4e5f\u4e0d\u592a\u6e05\u695a\u3002 \u4e32\u884c\u8fdb\u4f4d\u52a0\u6cd5\u5668 \u8fd9\u4e2a\u5b66\u8fc7\u6570\u7535\u7684\u90fd\u505a\u8fc7\u5b9e\u9a8c \u8d85\u524d\u8fdb\u4f4d\u52a0\u6cd5 \u8fd9\u4e2a\u8d44\u6599\u4e5f\u5f88\u591a\uff0c\u4e0d\u8fc7\u4f4d\u6570\u8fc7\u9ad8\u540e\uff0c\u8017\u8d39\u7684\u903b\u8f91\u8d44\u6e90\u662f\u5f88\u591a\u7684\u3002 \u51cf\u6cd5\u5668 \u5728\u786c\u4ef6\u5c42\u9762\uff0c\u51cf\u6cd5\u90fd\u662f\u7528\u52a0\u6cd5\u6765\u5b9e\u73b0\u7684\uff0c\u4e0d\u591a\u4ecb\u7ecd \u672c\u6b21\u76ee\u6807 \u00b6 \u53ea\u7528\u4e00\u4e2a\u52a0\u6cd5\u5668\u5b9e\u73b0\u65e0\u7b26\u53f7\u6570\u548c\u6709\u7b26\u53f7\u6570\u7684\u52a0\u51cf\u8fd0\u7b97 \u5c06\u6bd4\u8f83\u8fd0\u7b97\u7528\u51cf\u6cd5\u52a0\u6807\u5fd7\u4f4d\u5b9e\u73b0 \u52a0\u6cd5\u5668\u7528\u5185\u7f6e\u7684 + \uff0c\u4e58\u6cd5\u5668\u7528\u5185\u7f6e\u7684 * \uff0c\u9664\u6cd5\u5668\u7528\u5185\u7f6e\u7684 / \uff0c\u540e\u7eed\u6709\u65f6\u95f4\u53ef\u4ee5\u5728\u6765\u7814\u7a76\u548c\u66ff\u6362\u3002 \u6807\u5fd7\u4f4d\u751f\u6210 \u00b6 \u6761\u4ef6\u8f6c\u79fb\u6307\u4ee4 \u00b6 \u6761\u4ef6\u8f6c\u79fb\u6307\u4ee4 - \u5feb\u61c2\u767e\u79d1 (baike.com) x86 Control Flow (usc.edu) \u52a0\u6cd5\u5668 \u51cf\u6cd5\u5668\uff0c\u901a\u8fc7\u52a0\u6cd5\u5b9e\u73b0 \u79fb\u4f4d\u5668 \u6bd4\u8f83\u8fd0\u7b97\uff0c\u901a\u8fc7\u52a0\u6cd5\u548c\u6bd4\u8f83\u5b9e\u73b0 \u5f02\u6216 \u4e0e \u6216 \u903b\u8f91\u79fb\u4f4d\u4e0e\u7b97\u6570\u79fb\u4f4d \u00b6 \u4f4d\u98a0\u5012\u8bbe\u8ba1 \u00b6 \u91c7\u7528 for \u5faa\u73af\u53c2\u6570\u5316\u65b9\u5f0f module test_invert ( input [ 16 - 1 : 0 ] in , output [ 16 - 1 : 0 ] out ); invertTem #( . DATA_LEN ( 16 ) ) u_invertTem ( . in ( in ), . out ( out ) ); endmodule module invertTem #( DATA_LEN = 1 ) ( input [ DATA_LEN - 1 : 0 ] in , input [ DATA_LEN - 1 : 0 ] out ); integer i ; always @( * ) begin for ( i = 0 ; i < DATA_LEN ; i = i + 1 ) begin out [ i ] = in [ DATA_LEN - 1 - i ]; end end endmodule \u7efc\u5408\u540e\u7535\u8def\u56fe\u5982\u4e0b \u91c7\u7528\u62fc\u63a5\u65b9\u5f0f module test_invert ( input [ 16 - 1 : 0 ] in , output [ 16 - 1 : 0 ] out ); assign out = { in [ 00 ], in [ 01 ], in [ 02 ], in [ 03 ], in [ 04 ], in [ 05 ], in [ 06 ], in [ 07 ], in [ 08 ], in [ 09 ], in [ 10 ], in [ 11 ], in [ 12 ], in [ 13 ], in [ 14 ], in [ 15 ] }; endmodule \u7efc\u5408\u540e\u7535\u8def\u56fe\uff1a \u603b\u7ed3 \u7b2c\u4e00\u79cd\u65b9\u5f0f\u7701\u8d44\u6e90\uff0c\u4f46\u64cd\u4f5c\u590d\u6742 \u7b2c\u4e8c\u7ae0\u65b9\u5f0f\u591a\u4e86\u4e00\u4e2a i \uff0c\u4f46\u5229\u7528\u53c2\u6570\u5316\u64cd\u4f5c\uff0c\u5f88\u65b9\u4fbf\u3002 \u79fb\u4f4d\u5668\u8bbe\u8ba1 \u00b6 \u6700\u8fd1\u5728\u770bALU\u7684\u5e95\u5c42\u8bbe\u8ba1\u65b9\u5f0f\uff0c\u8be6\u7ec6\u770b\u4e86\u9f99\u82af\u51fa\u54c1\u7684\u300a\u8ba1\u7b97\u673a\u7cfb\u7edf\u7ed3\u6784\u57fa\u7840\u300b\uff0c\u5728\u8fd9\u91cc\u9762\u8bf4\u5728\u8bbe\u8ba1\u79fb\u4f4d\u5668\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u7528\u5de6\u79fb\u4ee3\u66ff\u53f3\u79fb\uff0c\u4ee5\u8282\u7701\u786c\u4ef6\u8d44\u6e90\u3002 \u770b\u89c1\u4e0a\u9762\u90a3\u6bb5\u8bdd\uff0c\u6211\u4ed4\u7ec6\u601d\u8003\u4e86\u4e00\u4e0b\u3002\u5c06\u903b\u8f91\u53f3\u79fb\u8f6c\u6362\u4e3a\u903b\u8f91\u5de6\u79fb\u9700\u8981\u4e24\u6b21\u4f4d\u98a0\u5012\u64cd\u4f5c\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u89e3\u51b3\u3002\u90a3\u4e48\u5982\u4f55\u5c06\u7b97\u6570\u53f3\u79fb\u8f6c\u6362\u4e3a\u5de6\u79fb\u5462\uff1f\u8fd9\u4e2a\u6211\u81ea\u5df1\u4e5f\u60f3\u4e86\u4e00\u6bb5\u65f6\u95f4\uff0c\u80fd\u529b\u6709\u9650\u3002\u5c31\u53bb\u7814\u7a76\u5176\u4ed6\u5f00\u6e90\u5904\u7406\u5668\u5982\u4f55\u5b9e\u73b0ALU\u64cd\u4f5c\u7684\u3002 \u7b80\u5355\u7c97\u66b4\u7684case\u8bed\u53e5 \u00b6 \u76f4\u63a5\u4e3a\u6bcf\u4e00\u79cd\u79fb\u4f4d\u64cd\u4f5c\u8bbe\u8ba1\u4e00\u4e2a\u64cd\u4f5c\uff0c << >> \uff0c\u5b9e\u73b0\u79fb\u4f4d\u64cd\u4f5c \u8fd9\u4e2a\u65b9\u6cd5\u663e\u7136\u7b80\u5355\u7c97\u66b4\uff0c\u53ef\u9760\u6027\u9ad8\u4f46\u4e0d\u662f\u6211\u60f3\u8981\u7684\u3002 \u5168\u90e8\u8f6c\u6362\u4e3a\u5de6\u79fb\u64cd\u4f5c \u00b6 \u6211\u5728\u7814\u7a76\u8702\u9e1fe203 alu \u8bbe\u8ba1\u7684\u65f6\u5019\uff0c\u53d1\u73b0\u4e86\u8fd9\u79cd\u5de7\u5999\u7684\u79fb\u4f4d\u5668\u8bbe\u8ba1\u65b9\u6cd5\u3002 \u8702\u9e1fe203 \u4e0a\u9762\u5f88\u591a\u6a21\u5757\u7684\u8bbe\u8ba1\u65b9\u6cd5\u90fd\u5f88\u5389\u5bb3\uff0c\u5b83\u7684 ALU \u5b9e\u73b0\u4e5f\u548c\u6211\u5e73\u5e38\u5b66\u7684\u4e0d\u540c\uff0c\u5b83\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u6570\u636e\u901a\u8def\uff0c\u6240\u6709\u7684\u6570\u636e\u8ba1\u7b97\u90fd\u662f\u6570\u636e\u901a\u8def\u8d1f\u8d23\uff0c ALU \u53ea\u662f\u5411\u6570\u636e\u901a\u8def\u8bf7\u6c42\u6570\u636e\u3002\u8fd9\u4e5f\u589e\u52a0\u4e86\u6e90\u7801\u7684\u7406\u89e3\u96be\u5ea6\uff0c\u4e0d\u8fc7\u6211\u4e0d\u9700\u8981\u5173\u7cfb\u8fd9\u4e48\u591a\uff0c\u6211\u53ea\u9700\u8981\u627e\u4ed6\u5b83\u5177\u4f53\u8ba1\u7b97\u7684\u5730\u65b9\u5c31\u884c\u4e86\u3002 \u7ecf\u8fc7\u4e00\u6bb5\u65f6\u95f4\u7684\u7406\u89e3\uff0c\u627e\u4e86\u7684\u6e90\u7801\u4e2d\u5173\u4e8e\u79fb\u4f4d\u5668\u7684\u8bbe\u8ba1 // Impelment the Left-Shifter // // The Left-Shifter will be used to handle the shift op wire [ `E203_XLEN - 1 : 0 ] shifter_in1 ; //\u8981\u79fb\u4f4d\u7684\u6570 wire [ 5 - 1 : 0 ] shifter_in2 ; //\u79fb\u52a8\u6b21\u6570 wire [ `E203_XLEN - 1 : 0 ] shifter_res ; // \u662f\u5426\u79fb\u4f4d wire op_shift = op_sra | op_sll | op_srl ; // Make sure to use logic-gating to gateoff the /* \u5c06\u53f3\u79fb\u52a8\u8f6c\u6362\u4e3a\u5de6\u79fb */ assign shifter_in1 = { `E203_XLEN { op_shift }} & // In order to save area and just use one left-shifter, we // convert the right-shift op into left-shift operation ( ( op_sra | op_srl ) ? { shifter_op1 [ 00 ], shifter_op1 [ 01 ], shifter_op1 [ 02 ], shifter_op1 [ 03 ], shifter_op1 [ 04 ], shifter_op1 [ 05 ], shifter_op1 [ 06 ], shifter_op1 [ 07 ], shifter_op1 [ 08 ], shifter_op1 [ 09 ], shifter_op1 [ 10 ], shifter_op1 [ 11 ], shifter_op1 [ 12 ], shifter_op1 [ 13 ], shifter_op1 [ 14 ], shifter_op1 [ 15 ], shifter_op1 [ 16 ], shifter_op1 [ 17 ], shifter_op1 [ 18 ], shifter_op1 [ 19 ], shifter_op1 [ 20 ], shifter_op1 [ 21 ], shifter_op1 [ 22 ], shifter_op1 [ 23 ], shifter_op1 [ 24 ], shifter_op1 [ 25 ], shifter_op1 [ 26 ], shifter_op1 [ 27 ], shifter_op1 [ 28 ], shifter_op1 [ 29 ], shifter_op1 [ 30 ], shifter_op1 [ 31 ] } : shifter_op1 ); assign shifter_in2 = { 5 { op_shift }} & shifter_op2 [ 4 : 0 ]; /* \u5b9e\u9645\u5de6\u79fb\u64cd\u4f5c */ assign shifter_res = ( shifter_in1 << shifter_in2 ); /* \u903b\u8f91\u79fb\u4f4d\u7ed3\u679c */ wire [ `E203_XLEN - 1 : 0 ] sll_res = shifter_res ; wire [ `E203_XLEN - 1 : 0 ] srl_res = { shifter_res [ 00 ], shifter_res [ 01 ], shifter_res [ 02 ], shifter_res [ 03 ], shifter_res [ 04 ], shifter_res [ 05 ], shifter_res [ 06 ], shifter_res [ 07 ], shifter_res [ 08 ], shifter_res [ 09 ], shifter_res [ 10 ], shifter_res [ 11 ], shifter_res [ 12 ], shifter_res [ 13 ], shifter_res [ 14 ], shifter_res [ 15 ], shifter_res [ 16 ], shifter_res [ 17 ], shifter_res [ 18 ], shifter_res [ 19 ], shifter_res [ 20 ], shifter_res [ 21 ], shifter_res [ 22 ], shifter_res [ 23 ], shifter_res [ 24 ], shifter_res [ 25 ], shifter_res [ 26 ], shifter_res [ 27 ], shifter_res [ 28 ], shifter_res [ 29 ], shifter_res [ 30 ], shifter_res [ 31 ] }; /* \u7b97\u6570\u53f3\u79fb\u7ed3\u679c */ wire [ `E203_XLEN - 1 : 0 ] eff_mask = ( ~ ( `E203_XLEN 'b0 )) >> shifter_in2 ; wire [ `E203_XLEN - 1 : 0 ] sra_res = ( srl_res & eff_mask ) | ({ 32 { shifter_op1 [ 31 ]}} & ( ~ eff_mask )); + \u9996\u5148\u6700\u57fa\u7840\u7684\u4fe1\u53f7 wire [ `E203_XLEN - 1 : 0 ] shifter_in1 ; //\u8981\u79fb\u4f4d\u7684\u64cd\u4f5c\u6570 wire [ 5 - 1 : 0 ] shifter_in2 ; //\u79fb\u52a8\u6b21\u6570 wire [ `E203_XLEN - 1 : 0 ] shifter_res ; //\u79fb\u4f4d\u540e\u7684\u7ed3\u679c // \u662f\u5426\u8fdb\u884c\u79fb\u4f4d\u64cd\u4f5c wire op_shift = op_sra | op_sll | op_srl ; op_sra op_sll op_srl \u5206\u522b\u5bf9\u5e94\u7740 \u7b97\u6570\u53f3\u79fb \u903b\u8f91\u5de6\u79fb \u903b\u8f91\u53f3\u79fb \uff0c\u56e0\u4e3a\u7b26\u53f7\u4f4d\u5728\u6700\u53f3\u8fb9\uff0c\u6240\u4ee5\u6ca1\u6709\u7b97\u6570\u5de6\u79fb\u3002\u8fd9\u4e09\u4e2a\u4fe1\u53f7\u7531\u5916\u90e8\u7ed9\u51fa\u3002 + \u63a5\u4e0b\u6765\u662f\u5c06\u53f3\u79fb\u64cd\u4f5c\u8f6c\u6362\u4e3a\u5de6\u79fb\u3002 /* \u5c06\u53f3\u79fb\u52a8\u8f6c\u6362\u4e3a\u5de6\u79fb */ assign shifter_in1 = { `E203_XLEN { op_shift }} & // In order to save area and just use one left-shifter, we // convert the right-shift op into left-shift operation ( ( op_sra | op_srl ) ? { shifter_op1 [ 00 ], shifter_op1 [ 01 ], shifter_op1 [ 02 ], shifter_op1 [ 03 ], shifter_op1 [ 04 ], shifter_op1 [ 05 ], shifter_op1 [ 06 ], shifter_op1 [ 07 ], shifter_op1 [ 08 ], shifter_op1 [ 09 ], shifter_op1 [ 10 ], shifter_op1 [ 11 ], shifter_op1 [ 12 ], shifter_op1 [ 13 ], shifter_op1 [ 14 ], shifter_op1 [ 15 ], shifter_op1 [ 16 ], shifter_op1 [ 17 ], shifter_op1 [ 18 ], shifter_op1 [ 19 ], shifter_op1 [ 20 ], shifter_op1 [ 21 ], shifter_op1 [ 22 ], shifter_op1 [ 23 ], shifter_op1 [ 24 ], shifter_op1 [ 25 ], shifter_op1 [ 26 ], shifter_op1 [ 27 ], shifter_op1 [ 28 ], shifter_op1 [ 29 ], shifter_op1 [ 30 ], shifter_op1 [ 31 ] } : shifter_op1 ); \u4ee3\u7801\u7684\u610f\u601d\u4e5f\u5f88\u7b80\u5355 shifter_op1 \u662f\u539f\u59cb\u8981\u79fb\u4f4d\u7684\u6570\u636e\uff0c\u5982\u679c\u662f op_sra \u6216\u8005 op_srl \u5c31\u5c06 shifter_op1 \u98a0\u5012\u7ed9 shifter_in1 + \u5b9e\u9645\u7684\u79fb\u4f4d\u64cd\u4f5c /* \u53ea\u6709 op_shift \u4e3a 1 \u624d\u79fb\u4f4d */ assign shifter_in2 = { 5 { op_shift }} & shifter_op2 [ 4 : 0 ]; /* \u5b9e\u9645\u5de6\u79fb\u64cd\u4f5c */ assign shifter_res = ( shifter_in1 << shifter_in2 ); + \u79fb\u4f4d\u7ed3\u679c\u8f6c\u6362 /* \u903b\u8f91\u5de6\u79fb\u79fb\u4f4d\u7ed3\u679c */ wire [ `E203_XLEN - 1 : 0 ] sll_res = shifter_res ; /* \u903b\u8f91\u53f3\u79fb\u7ed3\u679c\u9700\u8981\u518d\u6b21\u98a0\u5012\u4e00\u6b21\uff0c\u8d1f\u8d1f\u5f97\u6b63 */ wire [ `E203_XLEN - 1 : 0 ] srl_res = { shifter_res [ 00 ], shifter_res [ 01 ], shifter_res [ 02 ], shifter_res [ 03 ], shifter_res [ 04 ], shifter_res [ 05 ], shifter_res [ 06 ], shifter_res [ 07 ], shifter_res [ 08 ], shifter_res [ 09 ], shifter_res [ 10 ], shifter_res [ 11 ], shifter_res [ 12 ], shifter_res [ 13 ], shifter_res [ 14 ], shifter_res [ 15 ], shifter_res [ 16 ], shifter_res [ 17 ], shifter_res [ 18 ], shifter_res [ 19 ], shifter_res [ 20 ], shifter_res [ 21 ], shifter_res [ 22 ], shifter_res [ 23 ], shifter_res [ 24 ], shifter_res [ 25 ], shifter_res [ 26 ], shifter_res [ 27 ], shifter_res [ 28 ], shifter_res [ 29 ], shifter_res [ 30 ], shifter_res [ 31 ] }; /* \u7b97\u6570\u53f3\u79fb\u7ed3\u679c */ wire [ `E203_XLEN - 1 : 0 ] eff_mask = ( ~ ( `E203_XLEN 'b0 )) >> shifter_in2 ; wire [ `E203_XLEN - 1 : 0 ] sra_res = ( srl_res & eff_mask ) | ({ 32 { shifter_op1 [ 31 ]}} & ( ~ eff_mask )); + \u5982\u4f55\u5904\u7406\u7b97\u6570\u53f3\u79fb \u8fd9\u4e2a\u7406\u89e3\u8d77\u6765\u8fd8\u662f\u6709\u4e00\u70b9\u96be\u5ea6\uff0c\u7b97\u6570\u53f3\u79fb\u662f\u5728\u903b\u8f91\u53f3\u79fb\u7684\u7ed3\u679c\u4e0a\u8fdb\u884c\u5904\u7406\u7684\u3002 1. \u5236\u4f5c\u79fb\u4f4d\u63a9\u7801 eff_mask \uff0c\u622a\u53d6\u7b26\u53f7\u4f4d\u5b9e\u9645\u4e2a\u6570\u3002 \u5047\u5982\u539f\u59cb\u64cd\u4f5c\u4e3a 1111_0000 \u5f80\u53f3\u79fb\u52a8 2 \u4f4d\uff0c\u90a3\u4e48\u903b\u8f91\u79fb\u4f4d\u7ed3\u679c\u4e3a 0011_1100 \uff0c\u7b97\u6570\u79fb\u4f4d\u7ed3\u679c\u4e3a 1111_1100 \u3002\u6211\u4eec\u8ba9 1111_1111 \u4e5f\u5411\u53f3\u903b\u8f91\u79fb\u52a8\u4e24\u4f4d\u4f5c\u4e3a\u6211\u4eec\u7684 eff_mask \u63a9\u7801\u3002 0011_1111 2. \u901a\u8fc7\u63a9\u7801\u8865\u5168\u7b26\u53f7\u4f4d eff_mask & srl_res \uff0c \u63a9\u7801 \u4e0e\u4e0a \u903b\u8f91\u53f3\u79fb\u7ed3\u679c \uff0c\u521b\u9020 \u7b97\u6570\u53f3\u79fb \u7ed3\u679c\u7684\u540e\u534a\u90e8\u5206 0011_1100 \uff0c ~eff_mask & 1111_1111 \u521b\u9020\u7b26\u53f7\u4f4d\u7684\u63a9\u7801 mask2 1100_0000 \uff0c\u901a\u8fc7\u539f\u59cb\u8f93\u5165\u83b7\u5f97\u6570\u636e\u7684\u7b26\u53f7\u4f4d X \u3002 mask2&XXXX_XXXX \u5f97\u5230 \u7b97\u6570\u53f3\u79fb\u7684\u524d\u534a\u90e8\u5206 \u3002\u5c06\u524d\u534a\u90e8\u5206\u4e0e\u540e\u534a\u90e8\u5206\u76f8 \u4e0e \u5c31\u5f97\u5230\u7b97\u6570\u53f3\u79fb\u6700\u540e\u7684\u7ed3\u679c\u4e86\u3002 \u6574\u4e2a\u8ba1\u7b97\u8fc7\u7a0b\u8fd8\u662f\u975e\u5e38\u5de7\u5999\u7684\uff0c\u5229\u7528\u79fb\u4f4d\u64cd\u4f5c\u521b\u9020\u63a9\u7801\uff0c\u901a\u8fc7\u63a9\u7801\u5f97\u5230\u6700\u540e\u7684\u7ed3\u679c\u3002 [!note] 11111 123123 123123123 \u6267\u884c\u6a21\u5757 \u00b6 \u6267\u884c\u6a21\u5757\u8f93\u5165\uff1a 1. rs1_data 2. rs2_data 3. rd_data 4. imm_data 5. rs1_valid 6. rs2_valid 7. rd_valid 8. imm_valid 9. \u8bbf\u5b58\u8bfb 10. \u8bbf\u5b58\u5199 11. ALU\u9700\u8981\u5b9e\u73b0\u7684\u64cd\u4f5c \u00b6 + - ^ | & \u903b\u8f91\u5de6\u79fb \u903b\u8f91\u53f3\u79fb \u7b97\u6570\u53f3\u79fb <\uff08\u6709\u7b26\u53f7\u3001\u65e0\u7b26\u53f7\uff09 == \uff01= =(\u6709\u7b26\u53f7\u65e0\u7b26\u53f7) \uff08\u6709\u7b26\u53f7\u3001\u65e0\u7b26\u53f7\uff09\uff08\u9ad832\u3001\u4f4e32\uff09 \\ \uff08\u6709\u7b26\u53f7\u3001\u65e0\u7b26\u53f7\uff09 \u53d6\u4f59\u6570 \uff08\u6709\u7b26\u53f7\u65e0\u7b26\u53f7\uff09 ALU \u8f93\u51fa \u00b6 1bit\u6bd4\u8f83\u8f93\u51fa 64bit \u8fd0\u7b97\u8f93\u51fa ALU\u8f93\u5165 \u00b6 64bit A\u64cd\u4f5c\u6570 64bit B\u64cd\u4f5c\u6570 ALU \u64cd\u4f5c\u7801 \u56de\u5199\u6a21\u5757 \u00b6 rd-idx \u6570\u636e\u8f93\u5165 \u4e3aNPC\u6dfb\u52a0halt \u00b6 \u5b9a\u4f4d halt \u51fd\u6570 \u00b6 \u7531\u4e8evscode\u8df3\u8f6c\u9519\u8bef\uff0c\u627e\u6e90\u7801\u627e\u4e86\u4e00\u6bb5\u65f6\u95f4\u3002\u6700\u5f00\u59cb\u8df3\u8f6c\u5230 am.h \u627e\u4e86\u5927\u5927\u6982\u6709\u5341\u5206\u949f\u624d\u627e\u5230\u6b63\u771f\u7684 halt \u51fd\u6570\uff0c\u8def\u5f84\u4e3a abstract-machine/am/src/riscv/npc/trm.c \uff0c\u53ef\u4ee5\u770b\u5230\u662f\u4e00\u4e2a while(1) \u6b7b\u5faa\u73af. \u6c47\u7f16\u4ee3\u7801\u4e5f\u662f\u4e00\u4e2a\u6b7b\u5faa\u73af. \u5b9e\u73b0 halt \u51fd\u6570 ebreak \u00b6 \u4e3a\u4e86\u628a halt \u4e2d\u7684 while(1) \u6539\u4e3a ebreak ,\u8bf4\u5b9e\u8bdd\u786e\u5b9e\u4e0d\u77e5\u9053\u8be5\u600e\u4e48\u529e,\u4f46 nemu \u4e2d\u5df2\u7ecf\u5b9e\u73b0\u4e86 ebreak \u51fd\u6570,\u5f53\u7136\u662f\u53c2\u8003\u522b\u4eba\u7684\u4e86( cv\u5de5\u7a0b\u5e08 ).\u7ecf\u8fc7\u5bfb\u627e nemu \u4e2d\u96be\u5ea6 halt \u51fd\u6570\u4f4d\u4e8e\u8def\u5f84 /home/leesum/ysyx-workbench/abstract-machine/am/src/platform/nemu/trm.c . \u5168\u5c40\u641c\u7d22 nemu_trap ,\u5728 nemu.h \u4e0b\u627e\u5230\u5b8f\u5b9a\u4e49. \u53ef\u4ee5\u770b\u5230\u4e0d\u540c\u67b6\u6784\u4e0b\u7684 trap \u51fd\u6570\u662f\u4e0d\u4e00\u6837\u7684, riscv \u4f7f\u7528\u4e86\u5185\u8054\u6c47\u7f16 asm volatile ( \" mv a0 , % 0 ; ebreak\" : :\"r\"(code)) \u6211\u4eec\u76f4\u63a5\u590d\u5236\u7c98\u8d34\u5c31\u597d\u4e86. \u518d\u6b21\u6c47\u7f16\u67e5\u770b\u7ed3\u679c 1. npc \u6c47\u7f16\u7ed3\u679c 2. nemu \u6c47\u7f16\u7ed3\u679c \u4e00\u6a21\u4e00\u6837,\u6539\u9020\u5b8c\u6210!!! \u4e3aNPC\u5b9e\u73b0HIT GOOD/BAD TRAP \u00b6 \u8fd8\u662f\u8001\u65b9\u6cd5,\u5148\u53c2\u8003\u522b\u4eba\u7684\u6e90\u7801,\u518d\u7167\u7740\u522b\u4eba\u7684\u601d\u8def\u5b9e\u73b0\u81ea\u5df1\u7684\u4ee3\u7801. nemu \u4e2d\u7684 HIT GOOD/BAD TRAP \u00b6 \u8fd9\u4e2a\u6211\u4e4b\u524d\u505a pa \u7684\u65f6\u5019\u7814\u7a76\u4e86\u4e00\u4e0b,\u597d\u50cf\u662f\u901a\u8fc7 a0 \u5bc4\u5b58\u5668\u7684\u503c\u6765\u5224\u8bfb\u7684. 1. \u627e\u5230 ebreak \u6307\u4ee4\u5b9e\u73b0\u7ec6\u8282 2. \u8ddf\u968f NEMUTRAP \u5c42\u5c42\u8df3\u8f6c \u6700\u603b\u5b9a\u4f4d\u5230 set_nemu_state \u51fd\u6570 \u5176\u4e2d state \u4e3a NEMU_END ; pc \u4e3a s->pc ; code \u4e3a a0 \u5bc4\u5b58\u5668\u7684\u503c. \u6700\u7ec8\u5c06 a0 \u5bc4\u5b58\u5668\u7684\u503c\u8d4b\u7ed9\u4e86 nemu_state.halt_ret . 3. \u627e\u5230\u6700\u7ec8\u5224\u65ad\u548c\u8f93\u51fa\u7684\u5730\u65b9 \u4e0a\u4e00\u6b65\u627e\u5230 nemu_state.halt_ret \u540e\u7ebf\u7d22\u5c31\u65ad\u4e86,\u6211\u4eec\u5168\u5c40\u641c\u7d22 HIT GOOD ,\u6700\u7ec8\u5728 ysyx-workbench/nemu/src/cpu/cpu-exec.c \u4e2d\u627e\u5230\u4e86\u76f8\u5173\u51fd\u6570 cpu_exec .\u5176\u4e2d case NEMU_ABORT : Log ( \"nemu: %s at pc = \" FMT_WORD , ( nemu_state . state == NEMU_ABORT ? ANSI_FMT ( \"ABORT\" , ANSI_FG_RED ) : ( nemu_state . halt_ret == 0 ? ANSI_FMT ( \"HIT GOOD TRAP\" , ANSI_FG_GREEN ) : ANSI_FMT ( \"HIT BAD TRAP\" , ANSI_FG_RED ))), nemu_state . halt_pc ); \u8bf4\u660e\u4e86\u5177\u4f53\u7684\u903b\u8f91 nemu_state.halt_ret == 0 \u5219 HIT GOOD \u5426\u5219 HIT BAD TRAP . \u4e3a npc \u6dfb\u52a0HIT GOOD/BAD TRAP \u00b6 [!hint] \u5177\u4f53\u601d\u8def\u53c2\u8003\u4e0a\u9762\u7684 nemu \u65b9\u5f0f\u5c31\u884c\u4e86,\u5728\u6267\u884c\u5230 ebreak \u6307\u4ee4\u65f6,\u8bfb\u53d6\u4e00\u4e0b a0 \u5bc4\u5b58\u5668\u5668\u7684\u503c. \u901a\u8fc7 ebreak \u6307\u4ee4\u901a\u77e5\u4eff\u771f\u7ed3\u675f \u00b6 verilog \u5b9e\u73b0\u65b9\u6cd5\u5982\u4e0b \u5728\u6267\u884c\u7684\u65f6\u5019,\u5982\u679c\u6307\u4ee4\u65f6 ebreak ,\u76f4\u63a5\u8c03\u7528\u7ed3\u675f\u51fd\u6570 finish . cpp \u5b9e\u73b0\u65b9\u6cd5. \u5f88\u7b80\u5355,\u4e0d\u591a\u8bf4. \u6dfb\u52a0 HIT GOOD/BAD TRAP \u00b6 while ( ! top -> contextp () -> gotFinish ()) { mysim . stepCycle (); } // \u4eff\u771f\u7ed3\u675f\u65f6,\u4f1a\u8df3\u5230\u8fd9\u91cc\u6765,\u5728\u8fd9\u91cc\u8bfb\u53d6 a0 \u5bc4\u5b58\u5668\u7684\u503c\u6765\u5224\u65ad \u5177\u4f53\u5b9e\u73b0\u5982\u4e0b void Simtop::npcTrap () { this -> registerfile = cpu_gpr ; this -> pc = cpu_pc ; uint64_t a0 = registerfile [ 10 ]; cout << \"a0:\" << a0 << endl ; if ( a0 == 0 ) { cout << \"PC:\" << hex << pc << \" \\t HIT GOOD\" << endl ; } else { cout << \"PC:\" << hex << pc << \" \\t BAD TRAP\" << endl ; } } \u4e3a npc \u6dfb\u52a0\u7c7b\u4f3c nemu \u7684\u547d\u4ee4\u884c\u4ea4\u4e92\u754c\u9762 \u00b6 [!quote] \u9605\u8bfb nemu \u7684\u6e90\u7801\u540e,\u53d1\u73b0\u4ed6\u4f7f\u7528\u7684\u662f readline \u6765\u5b9e\u73b0\u7684\u547d\u4ee4\u884c\u4ea4\u4e92\u63a7\u5236.\u800c\u6211\u4f7f\u7528\u7684\u662f\u4e00\u4e2a github \u4e0a\u5f00\u6e90\u5e93.(\u57fa\u4e8e readline ) Svalorzen/cpp-readline: A very simple C++ wrapper for GNU readline. (github.com) \u4f7f\u7528\u5f88\u7b80\u5355,\u770b\u770b\u91cc\u9762\u7684 example \u5c31\u884c. \u9700\u8981\u6ce8\u610f\u7684\u662f,\u91cc\u9762\u5185\u7f6e\u4e86\u9000\u51fa\u547d\u4ee4 quit exit . \u79fb\u690d\u540e\u4e3b\u51fd\u6570\u5f20\u8fd9\u6837 int main () { /* \u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u5c06 Simtop mysim \u58f0\u660e\u4e3a\u5168\u5c40\u53d8\u91cf\u4f1a\u5d29\u6e83*/ mysim_p = new Simtop ; static Vtop * top = mysim_p -> getTop (); mysim_p -> reset (); /* \u6ce8\u518c\u547d\u4ee4 */ cr :: Console c ( \">:\" ); c . registerCommand ( \"info\" , cmd_info ); c . registerCommand ( \"x\" , cmd_x ); c . registerCommand ( \"si\" , cmd_si ); c . registerCommand ( \"c\" , cmd_c ); c . registerCommand ( \"p\" , cmd_p ); c . registerCommand ( \"help\" , cmd_help ); c . registerCommand ( \"w\" , cmd_w ); int retCode ; do { retCode = c . readLine (); // We can also change the prompt based on last return value: if ( retCode == ret :: Ok ) c . setGreeting ( \">\" ); else c . setGreeting ( \"!>\" ); if ( retCode == 1 ) { std :: cout << \"Received error code 1 \\n \" ; } else if ( retCode == 2 ) { std :: cout << \"Received error code 2 \\n \" ; } } while ( retCode != ret :: Quit ); mysim_p -> npcTrap (); return 0 ; } \u4e3a npc \u6dfb\u52a0\u547d\u4ee4 \u00b6 [!example] \u79fb\u690d\u547d\u4ee4\u884c\u4ea4\u4e92\u754c\u9762\u540e,\u6dfb\u52a0\u547d\u4ee4\u5c31\u548c nemu \u5dee\u4e0d\u591a\u4e86,\u53ef\u4ee5\u5c06 nemu \u4e0a\u5b9e\u73b0\u7684\u547d\u4ee4\u642c\u8fc7\u6765,\u4f46\u662f\u4e5f\u9700\u8981\u4e00\u4e9b\u4fee\u6539. \u4e3a npc \u6dfb\u52a0 difftest \u00b6 [!NOTE] \u611f\u609f \u7531\u4e8e\u6211 pa \u6ca1\u6709\u505a\u5230 difftest \u7ae0\u8282,\u521d\u770b\u6e90\u7801\u662f\u6709\u70b9\u61f5\u7684,\u4f46\u53c2\u8003\u4e86\u4e00\u4e0b\u522b\u4eba\u7684\u5b9e\u73b0\u65b9\u5f0f,\u8865\u5145\u4e86\u4e00\u4e0b\u52a8\u6001\u94fe\u63a5\u5e93\u7684\u77e5\u8bc6\u540e,\u8fd8\u662f\u53ef\u4ee5\u7406\u89e3\u7684. Linux \u52a8\u6001\u94fe\u63a5\u5e93\u7f16\u7a0b \u00b6 [!note] \u52a8\u6001\u94fe\u63a5\u4e0e\u9759\u6001\u94fe\u63a5\u5728 408 \u4e2d\u5b66\u8fc7,\u4f46\u4e5f\u4ec5\u4ec5\u662f\u5b66\u8fc7,\u4e00\u822c\u5728\u7f16\u7a0b\u7684\u65f6\u5019\u5c31\u662f\u7f16\u8bd1\u7684\u65f6\u5019\u52a0\u4e0a\u7ed9 -l \u53c2\u6570,\u6dfb\u52a0\u4e00\u4e9b\u7cfb\u7edf\u5e93,\u4e5f\u6ca1\u6709\u6df1\u5165\u4e86\u89e3. 1. \u9996\u5148\u6211\u4eec\u5148\u5c06 nemu \u7f16\u8bd1\u6210\u52a8\u6001\u94fe\u63a5\u5e93\u6587\u4ef6. \u5728 build \u76ee\u5f55\u4e0b\u627e\u5230 so \u6587\u4ef6.\u6267\u884c\u547d\u4ee4\u53ef\u4ee5\u67e5\u770b\u94fe\u63a5\u5e93\u91cc\u9762\u7684\u51fd\u6570. nm riscv64-nemu-interpreter-so \u53ef\u4ee5\u770b\u5230\u786e\u5b9e\u6709\u6211\u4eec\u4e3a difftest \u51c6\u5907\u7684\u51fd\u6570. 2. \u53c2\u8003 nemu \u52a8\u6001\u94fe\u63a5\u5e93\u7684\u4f7f\u7528\u65b9\u5f0f \u6587\u4ef6\u8def\u5f84 src/cpu/difftest/dut.c \u9996\u5148\u5b9a\u4e49\u4e86\u51fd\u6570\u6307\u9488,\u7528\u4e8e\u540e\u9762\u63a5\u6536\u51fd\u6570. \u7136\u540e\u7528 dlopen \u6253\u5f00\u52a8\u6001\u94fe\u63a5\u5e93 so \u6587\u4ef6 \u5176\u6b21\u7528 dlsym \u53bb\u5bfb\u627e\u52a8\u6001\u94fe\u63a5\u5e93\u4e2d\u7684\u51fd\u6570\u5730\u5740,\u5e76\u7528\u51fd\u6570\u6307\u9488\u4fdd\u5b58\u8d77\u6765. \u6700\u540e\u76f4\u63a5\u4f7f\u7528\u51fd\u6570\u6307\u9488,\u5c31\u53ef\u4ee5\u50cf\u666e\u901a\u51fd\u6570\u4e00\u6837\u4f7f\u7528\u4e86. [!info] \u601d\u8003 \u53ef\u4ee5\u770b\u5230,\u5b9a\u4e49\u51fd\u6570\u6307\u9488\u7684\u65f6\u5019\u9700\u8981\u6307\u5b9a\u51fd\u6570\u7684\u53c2\u6570,\u8fd4\u56de\u503c\u7b49\u7b49,\u8fd9\u4e2a\u662f\u548c\u52a8\u6001\u94fe\u63a5\u5e93\u4e2d\u7684\u51fd\u6570\u4e00\u4e00\u5bf9\u5e94\u7684,\u4f46\u4e0a\u9762\u6211\u4eec\u7528 nm \u547d\u4ee4\u67e5\u770b\u51fd\u6570\u65f6,\u53ea\u80fd\u770b\u5230\u540d\u5b57,\u4e0d\u80fd\u770b\u5230\u53c2\u6570.\u4e00\u822c\u52a8\u6001\u94fe\u63a5\u5e93\u7684\u4f5c\u8005\u4f1a\u7ed9\u4f60\u4e00\u4e2a h \u6587\u4ef6\u65b9\u4fbf\u4f7f\u7528. \u5b8c\u5584 nemu \u7684 ref.c \u00b6 // \u5728DUT host memory\u7684`buf`\u548cREF guest memory\u7684`dest`\u4e4b\u95f4\u62f7\u8d1d`n`\u5b57\u8282, // `direction`\u6307\u5b9a\u62f7\u8d1d\u7684\u65b9\u5411, `DIFFTEST_TO_DUT`\u8868\u793a\u5f80DUT\u62f7\u8d1d, `DIFFTEST_TO_REF`\u8868\u793a\u5f80REF\u62f7\u8d1d void difftest_memcpy ( paddr_t addr , void * buf , size_t n , bool direction ) { /* \u4e00\u4e2a\u4e00\u4e2a\u5b57\u8282\u62f7\u8d1d,\u53ea\u9700\u8981\u5b9e\u73b0 dut->ref \u65b9\u5411*/ if ( direction == DIFFTEST_TO_REF ) { for ( size_t i = 0 ; i < n ; i ++ ) { paddr_write ( addr + i , 1 , * (( uint8_t * ) buf + i )); } } else { assert ( 0 ); } } // `direction`\u4e3a`DIFFTEST_TO_DUT`\u65f6, \u83b7\u53d6REF\u7684\u5bc4\u5b58\u5668\u72b6\u6001\u5230`dut`; // `direction`\u4e3a`DIFFTEST_TO_REF`\u65f6, \u8bbe\u7f6eREF\u7684\u5bc4\u5b58\u5668\u72b6\u6001\u4e3a`dut`; //riscv64_CPU_state // dut \u4e3a\u4e00\u4e2a\u6307\u9488 void difftest_regcpy ( void * dut , bool direction ) { CPU_state * reg_p = dut ; if ( DIFFTEST_TO_REF == direction ) { for ( int i = 0 ; i < 32 ; i ++ ) { cpu . gpr [ i ] = reg_p -> gpr [ i ]; } cpu . pc = reg_p -> pc ; } else { for ( int i = 0 ; i < 32 ; i ++ ) { reg_p -> gpr [ i ] = cpu . gpr [ i ]; } reg_p -> pc = cpu . pc ; } } // \u8ba9REF\u6267\u884c`n`\u6761\u6307\u4ee4 void difftest_exec ( uint64_t n ) { cpu_exec ( n ); } void difftest_raise_intr ( word_t NO ) { assert ( 0 ); } // \u521d\u59cb\u5316REF\u7684DiffTest\u529f\u80fd void difftest_init ( int port ) { /* Perform ISA dependent initialization. */ init_isa (); } \u5176\u4e2d CPU_state \u7ed3\u6784\u4f53\u4e3a typedef struct { word_t gpr [ 32 ]; // 64\u4f4d vaddr_t pc ; // 64\u4f4d } riscv64_CPU_state ; \u5b8c\u5584 npc \u4eff\u771f\u7aef\u7684 difftest \u00b6 [!note] \u53c2\u8003 nemu \u4e2d difftest \u7684\u5b9e\u73b0\u65b9\u5f0f,\u6211\u8fd9\u91cc\u521b\u5efa\u4e86\u4e00\u4e2a difftest \u7c7b\u65b9\u4fbf\u7ba1\u7406 \u58f0\u660e\u51fd\u6570\u6307\u9488 \u7167\u846b\u82a6\u753b\u74e2\u5b9e\u73b0 init \u51fd\u6570 void Difftest::init ( const char * ref_so_file , long img_size , int port ) { assert ( ref_so_file != NULL ); void * handle ; handle = dlopen ( ref_so_file , RTLD_LAZY ) ` ; assert ( handle ); diff_memcpy = ( ref_Difftest_memcpy ) dlsym ( handle , \"difftest_memcpy\" ); assert ( diff_memcpy ); diff_regcpy = ( ref_Difftest_regcpy ) dlsym ( handle , \"difftest_regcpy\" ); assert ( diff_regcpy ); diff_exec = ( ref_Difftest_exec ) dlsym ( handle , \"difftest_exec\" ); assert ( diff_exec ); diff_raise_intr = ( ref_Difftest_raise_intr ) dlsym ( handle , \"difftest_raise_intr\" ); assert ( diff_raise_intr ); diff_init = ( ref_difftest_init ) dlsym ( handle , \"difftest_init\" ); assert ( diff_init ); diff_init ( port ); uint64_t membase = mysim_p -> mem -> getMEMBASE (); /* \u5c06\u7a0b\u5e8f\u955c\u50cf\u6587\u4ef6\u62f7\u8d1d\u8fc7\u53bb */ diff_memcpy ( membase , mysim_p -> mem -> guest_to_host ( membase ), img_size , DIFFTEST_TO_REF ); CPU_state regs = getDutregs (); /* \u8ba9 dut \u548c ref \u5bc4\u5b58\u5668\u521d\u59cb\u503c\u4e00\u6837 */ diff_regcpy ( & regs , DIFFTEST_TO_REF ); } \u5b9e\u73b0 difftest_step \u5177\u4f53\u601d\u8def\u5c31\u662f,\u8ba9 ref:nemu \u6267\u884c\u4e00\u6b21,\u7136\u540e\u5bf9\u6bd4 dut ref \u7684\u5bc4\u5b58\u5668\u503c,\u82e5\u4e0d\u540c\u505c\u6b62\u6267\u884c,\u5e76\u62a5\u9519. void Difftest::difftest_step () { /* \u5bc4\u5b58\u5668\u4e0d\u4e00\u6837 */ diff_exec ( 1 ); if ( ! checkregs ()) { mysim_p -> top_status = mysim_p -> TOP_STOP ; } } \u5c06 difftest \u6dfb\u52a0\u5230\u539f\u59cb\u4eff\u771f\u4ee3\u7801\u4e2d [!tip] \u5728 npc \u6267\u884c\u4e00\u6761\u6307\u4ee4\u540e(\u65f6\u949f\u53d8\u5316\u4e00\u4e2a\u5468\u671f),\u8c03\u7528 difftest_step \u8ba9 ref:nemu \u4e5f\u6267\u884c\u4e00\u6761\u6307\u4ee4. \u53ea\u9700\u8981\u5728\u5177\u4f53\u7684\u6267\u884c\u51fd\u6570\u4e2d\u52a0\u4e0a difftst_step \u5c31\u884c\u4e86. \u79fb\u690d\u4e2d\u7684\u6ce8\u610f\u4e8b\u9879 \u00b6 nemu \u52a8\u6001\u5e93\u7684\u7f16\u8bd1\u4e0e\u94fe\u63a5 \u6309\u7167\u6559\u7a0b\u6765,\u4f1a\u5728 build \u76ee\u5f55\u4e0b\u751f\u6210 riscv64-nemu-interpreter-so ,\u5c06\u5176\u91cd\u547d\u540d\u4e3a libnemu.so \u5e76\u79fb\u52a8\u5230 /lib \u76ee\u5f55\u4fbf\u4e8e\u7f16\u8bd1\u5668\u67e5\u627e\u4e0e\u94fe\u63a5. \u4e3a makefile \u6587\u4ef6\u6dfb\u52a0\u94fe\u63a5\u5e93 -lasan -ldl -lnemu GCC_LDFLAGS := -LDFLAGS \"-lasan -lreadline -ldl -lnemu\" \u5176\u4e2d -lasan \u662f\u4e3a\u4e86\u89e3\u51b3\u62a5\u9519 ASan runtime does not come first in initial library list; you should either link runtime to your application or manually preload it with LD_PRELOAD. \u00b7 Issue #796 \u00b7 google/sanitizers (github.com) \u6ce8\u610f difftest \u7684\u521d\u59cb\u5316\u987a\u5e8f difftest \u5fc5\u987b\u8981\u5728 npc reset \u540e\u521d\u59cb\u5316,\u539f\u56e0\u5982\u4e0b: npc \u5728\u6ca1\u6709 reset \u65f6, pc \u7684\u503c\u4e3a 0 difftest \u5728 init \u65f6,\u4f1a\u62f7\u8d1d npc \u7684\u5bc4\u5b58\u5668\u7ec4,\u800c\u6211\u4eec\u662f\u901a\u8fc7\u6307\u9488\u4f20\u9012\u7684\u5bc4\u5b58\u5668\u7ec4\u6587\u4ef6,\u521d\u59cb\u5316\u7684\u65f6\u5019\u4e3a NULL .","title":"\u5355\u5468\u671fcpu"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#_1","text":"\u5bc4\u5b58\u5668\u8bfb\u5199 \u8bd1\u7801\u6307\u4ee4\u662f\u5426\u6b63\u786e ALU\u529f\u80fd\u7684\u6d4b\u8bd5","title":"\u6d4b\u8bd5"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#_2","text":"\u8bd1\u7801\u6a21\u5757\u8bf4\u7b80\u5355\u4e5f\u7b80\u5355\u8bf4\u590d\u6742\u4e5f\u590d\u6742\uff0c\u8fd9\u51e0\u5929\u6211\u67e5\u8be2\u4e86\u5f88\u591a\u8d44\u6599\uff0c\u53c2\u8003\u4e86\u8bb8\u591a\u5f00\u6e90CPU\u8bd1\u7801\u6a21\u5757\u7684\u8bbe\u8ba1\uff0c\u60f3\u627e\u51fa\u6bd4\u8f83\u597d\u8bd1\u7801\u7684\u65b9\u5f0f","title":"\u8bd1\u7801\u6a21\u5757"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#_3","text":"\u8fd9\u79cd\u8bd1\u7801\u65b9\u5f0f\u6700\u4e3a\u76f4\u63a5\u660e\u4e86\uff0c\u76f4\u63a5\u91c7\u7528 case \u8bed\u53e5\uff0c\u5bf9\u4e0d\u540c\u7684 opcode \u8fdb\u884c\u5206\u652f\u5904\u7406\uff0c\u5728\u6bcf\u4e00\u6761\u5206\u652f\u540e\u9762\u8fdb\u884c alu \u8fd0\u7b97\u5355\u5143\u7684\u4fe1\u53f7\u5904\u7406\u7b49\u7b49\u3002 \u4e3b\u8981\u53c2\u8003\u4ee3\u7801\uff1a ibex/ibex_decoder.sv at master \u00b7 lowRISC/ibex (github.com) tinyriscv: \u4e00\u4e2a\u4ece\u96f6\u5f00\u59cb\u5199\u7684\u6781\u7b80\u3001\u975e\u5e38\u6613\u61c2\u7684RISC-V\u5904\u7406\u5668\u6838\u3002 (gitee.com) \u53ef\u4ee5\u4ece\u4e0a\u56fe\u770b\u5230\uff0c\u8fd9\u79cd\u8bd1\u7801\u65b9\u5f0f\u7f16\u5199\u8d77\u6765\u5f88\u7b80\u5355\uff0c\u53ea\u8981\u4e0d\u65ad\u7684\u5f80\u4e0b\u52a0\u5206\u652f\u5c31\u884c\u4e86\uff0c\u4f46\u5728\u4ee3\u7801\u53ef\u8bfb\u6027\u4e0a\u5c31\u5dee\u5f88\u591a\uff0c\u9700\u8981\u6df1\u5165\u6bcf\u4e00\u6761\u6307\u4ee4\u624d\u80fd\u7406\u89e3\u4ee3\u7801\u3002\u9762\u79ef\u4f18\u5316\u4e5f\u4e0d\u591f\u597d\u3002","title":"\u884c\u4e3a\u5efa\u6a21\u65b9\u5f0f"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#_4","text":"\u8fd9\u79cd\u8bd1\u7801\u65b9\u5f0f\u6bd4\u884c\u4e3a\u5efa\u6a21\u8981\u4f18\u96c5\uff0c\u53ef\u8bfb\u6027\u4e5f\u6bd4\u8f83\u597d\u3002\u6bcf\u6761\u6307\u4ee4\u7684 opcode\u3001fun3\u3001fun7 \u90fd\u662f\u56fa\u5b9a\u7684\uff0c\u53ef\u4ee5\u4e3a\u6bcf\u6761\u6307\u4ee4\u521b\u5efa\u4e00\u4e2a mask\uff0c\u7528 inst&mast \u5c31\u53ef\u4ee5\u5224\u65ad\u5f53\u524d\u6307\u4ee4\u5c5e\u4e8e\u54ea\u4e00\u6761\u6307\u4ee4\u3002\u4e0e pa \u4e2d nemu \u89e3\u6790\u6307\u4ee4\u7684\u65b9\u5f0f\u4e00\u6837\u3002 \u4e3b\u8981\u53c2\u8003\u4ee3\u7801\uff1a riscv/riscv_decoder.v at master \u00b7 ultraembedded/riscv (github.com) nemu \u4e2d\u6307\u4ee4\u89e3\u6790\u65b9\u5f0f\u5982\u4e0b \u53c2\u8003\u7684 riscv \u8bbe\u8ba1\u4e2d\u7684 decoder \u6a21\u5757\u5982\u4e0b \u53ef\u4ee5\u770b\u5230 exec_o \u63a7\u5236\u4fe1\u53f7\u7531\u6307\u4ee4 ANDI \u3001 ADDI \u7b49\u751f\u6210\uff0c\u91c7\u7528\u4e86\u4e00\u4e2a\u6216\u903b\u8f91\u3002\u7b80\u6d01\u660e\u4e86\u3002 // andi `define INST_ANDI 32'h7013 //\u6307\u4ee4 `define INST_ANDI_MASK 32'h707f //\u6307\u4ee4mask \u8fd9\u6837\u7684\u8bbe\u8ba1\u65b9\u5f0f\uff0c\u6dfb\u52a0\u4e00\u6761\u6307\u4ee4\u5341\u5206\u7684\u65b9\u4fbf\uff0c\u53ea\u9700\u8981\u8bbe\u8ba1\u5bf9\u5e94\u7684 mask \u5c31\u884c\u4e86\uff0c\u548c nemu \u662f\u4e00\u6a21\u4e00\u6837\u7684\u3002\u4f46\u7f3a\u70b9\u4e5f\u5341\u5206\u660e\u663e\uff0c\u8fd9\u6837\u5b50\u662f\u5426\u8d44\u6e90\u6d88\u8017\u592a\u5927\u4e86\u5462\uff1f","title":"\u6a21\u677f\u5339\u914d\u65b9\u5f0f"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#_5","text":"\u8bf4\u5b9e\u8bdd\u8fd9\u4e2a\u540d\u79f0\u662f\u6211\u81ea\u5df1\u778e\u7f16\u7684\uff0c\u56e0\u4e3a\u6211\u4e0d\u592a\u6e05\u695a\u7528\u4ec0\u4e48\u53bb\u63cf\u8ff0\u3002\u65e9\u4e9b\u65f6\u5019\u5728\u7fa4\u91cc\u770b\u89c1\u6709\u4eba\u5728\u8ba8\u8bba \u8702\u9e1fe203 \u7684\u8bbe\u8ba1\u65b9\u5f0f\uff0c\u6700\u8fd1\u53bb\u4e86\u89e3\u4e86\u4e00\u4e0b\u3002\u6700\u5f00\u59cb\u5728 github \u4e0a\u770b\u89c1\u5b83\u7684 decoder \u7684\u8bbe\u8ba1\u65b9\u5f0f\u65f6\uff0c\u786e\u5b9e\u88ab\u60ca\u8273\u5230\u4e86\uff0c\u57fa\u672c\u662f\u6309\u7167\u624b\u518c\u8bbe\u8ba1\u51fa\u6765\u7684\uff0c\u5f88\u7ec6\u8282\uff0c\u548c\u5176\u4ed6\u65b9\u5f0f\u90fd\u4e0d\u4e00\u6837\u3002 \u4e3b\u8981\u53c2\u8003\u4ee3\u7801\uff1a e203_hbirdv2/e203_exu_decode.v at master \u00b7 riscv-mcu/e203_hbirdv2 (github.com) \u82b1\u4e86\u4e00\u5929\u8bfb\u5b8c\u4e86\u7684\u8be5 riscv \u8bbe\u8ba1\u7684\u914d\u5957\u4e66\u7c4d \u624b\u628a\u624b\u6559\u4f60\u8bbe\u8ba1CPU\u2014\u2014RISC-V\u5904\u7406\u5668\u7bc7 \u60f3\u6df1\u5165\u4e86\u89e3\u4e00\u4e0b decoder \u7684\u8bbe\u65b9\u5f0f\uff0c\u53d1\u73b0\u4ecb\u7ecd\u7684\u5f88\u5c11\u3002\u6ca1\u529e\u6cd5\uff0c\u53ea\u80fd\u53bb\u7814\u7a76\u6e90\u7801\u3002","title":"\u9010\u5c42\u5206\u6790\u65b9\u5f0f"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#opcode","text":"wire [ 6 : 0 ] opcode = rv32_instr [ 6 : 0 ]; wire opcode_1_0_00 = ( opcode [ 1 : 0 ] == 2 'b00 ); wire opcode_1_0_01 = ( opcode [ 1 : 0 ] == 2 'b01 ); wire opcode_1_0_10 = ( opcode [ 1 : 0 ] == 2 'b10 ); wire opcode_1_0_11 = ( opcode [ 1 : 0 ] == 2 'b11 ); // We generate the signals and reused them as much as possible to save gatecounts wire opcode_4_2_000 = ( opcode [ 4 : 2 ] == 3 'b000 ); wire opcode_4_2_001 = ( opcode [ 4 : 2 ] == 3 'b001 ); wire opcode_4_2_010 = ( opcode [ 4 : 2 ] == 3 'b010 ); wire opcode_4_2_011 = ( opcode [ 4 : 2 ] == 3 'b011 ); wire opcode_4_2_100 = ( opcode [ 4 : 2 ] == 3 'b100 ); wire opcode_4_2_101 = ( opcode [ 4 : 2 ] == 3 'b101 ); wire opcode_4_2_110 = ( opcode [ 4 : 2 ] == 3 'b110 ); wire opcode_4_2_111 = ( opcode [ 4 : 2 ] == 3 'b111 ); wire opcode_6_5_00 = ( opcode [ 6 : 5 ] == 2 'b00 ); wire opcode_6_5_01 = ( opcode [ 6 : 5 ] == 2 'b01 ); wire opcode_6_5_10 = ( opcode [ 6 : 5 ] == 2 'b10 ); wire opcode_6_5_11 = ( opcode [ 6 : 5 ] == 2 'b11 ); \u53ef\u4ee5\u770b\u5230\uff0c\u4ed6\u5c06 opcdoe \u5404\u4e2a\u4f4d\u7684\u60c5\u51b5\u76f4\u63a5\u679a\u4e3e\u51fa\u6765\u4e86\uff0c\u7528 wire \u4fe1\u53f7\u7ebf\u8868\u793a\u662f\u5426\u51fa\u73b0\u4e86\u5bf9\u5e94\u4fe1\u53f7\u3002\u4ece riscv \u624b\u518c\u5f97\u77e5\uff0c opcode \u7684\u4f4e\u4e24\u4f4d\u4e00\u5b9a\u662f 11 \uff0c opcode[6:5] \u4e0e opcode[4:2] \u7684\u4e0d\u540c\u6392\u5217\u7ec4\u5408\u8868\u793a\u4e0d\u540c\u7684\u6307\u4ee4\u7c7b\u578b\u3002\u5982\u4e0b\u56fe\uff1a \u5728\u4ee3\u7801\u4e2d\u5206\u522b\u6307\u4ee4\u7c7b\u578b\u5177\u4f53\u64cd\u4f5c\u5982\u4e0b wire rv32_nmadd = opcode_6_5_10 & opcode_4_2_011 & opcode_1_0_11 ; wire rv32_jal = opcode_6_5_11 & opcode_4_2_011 & opcode_1_0_11 ; wire rv32_op_imm = opcode_6_5_00 & opcode_4_2_100 & opcode_1_0_11 ; wire rv32_op = opcode_6_5_01 & opcode_4_2_100 & opcode_1_0_11 ; wire rv32_op_fp = opcode_6_5_10 & opcode_4_2_100 & opcode_1_0_11 ; wire rv32_system = opcode_6_5_11 & opcode_4_2_100 & opcode_1_0_11 ; wire rv32_auipc = opcode_6_5_00 & opcode_4_2_101 & opcode_1_0_11 ; wire rv32_lui = opcode_6_5_01 & opcode_4_2_101 & opcode_1_0_11 ; wire rv32_resved1 = opcode_6_5_10 & opcode_4_2_101 & opcode_1_0_11 ; wire rv32_resved2 = opcode_6_5_11 & opcode_4_2_101 & opcode_1_0_11 ; wire rv32_op_imm_32 = opcode_6_5_00 & opcode_4_2_110 & opcode_1_0_11 ; wire rv32_op_32 = opcode_6_5_01 & opcode_4_2_110 & opcode_1_0_11 ; wire rv32_custom2 = opcode_6_5_10 & opcode_4_2_110 & opcode_1_0_11 ; \u57fa\u672c\u5c31\u662f\u6309\u7167\u4e0a\u9762\u7684\u8868\u683c\u8fdb\u884c\u64cd\u4f5c\u7684\uff0c\u4e0d\u65ad\u7684\u91cd\u590d\u5229\u7528\u521a\u521a\u7684\u4fe1\u53f7\u7ebf\uff0c\u53ef\u4ee5\u8282\u7701\u8d44\u6e90\u3002\u5982\u679c\u5728\u6bcf\u4e00\u6b65\u90fd\u884c\u6bd4\u8f83\u64cd\u4f5c \uff0c\u5982\u4e0b\uff1a //\u5148\u6bd4\u8f83\u518d\u4f7f\u7528 wire rv32_op_imm = opcode_6_5_00 & opcode_4_2_100 & opcode_1_0_11 ; //\u4f7f\u7528\u65f6\u518d\u6bd4\u8f83 wire rv32_op_imm = opcode [ 6 : 5 ] == 2 'b00 & opcode [ 4 : 2 ] == 3 'b100 & opcode [ 1 : 0 ] == 2 'b00 ; \u6309\u7167\u9053\u7406\u6765\u8bf4\uff0c\u786e\u5b9e\u7b2c\u4e00\u79cd\u65b9\u5f0f\u53ef\u4ee5\u8282\u7701\u4e00\u4e9b\u6bd4\u8f83\u5668\uff0c\u4f46\u5728\u7efc\u5408\u65f6\uff0c\u4e24\u8005\u662f\u5426\u76f8\u540c\u5c31\u4e0d\u6e05\u695a\u4e86\u3002","title":"\u7b2c\u4e00\u6b65\uff1a\u5206\u89e3 opcode"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#_6","text":"func7 func3 \u4e5f\u548c opcode \u540c\u6837\u88ab\u5206\u89e3\u4e86\uff0c\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u786e\u8ba4\u662f\u54ea\u4e00\u6761\u6307\u4ee4\u3002 wire rv32_add = rv32_op & rv32_func3_000 & rv32_func7_0000000 ; wire rv32_sub = rv32_op & rv32_func3_000 & rv32_func7_0100000 ; wire rv32_sll = rv32_op & rv32_func3_001 & rv32_func7_0000000 ; wire rv32_slt = rv32_op & rv32_func3_010 & rv32_func7_0000000 ; wire rv32_sltu = rv32_op & rv32_func3_011 & rv32_func7_0000000 ; wire rv32_xor = rv32_op & rv32_func3_100 & rv32_func7_0000000 ; wire rv32_srl = rv32_op & rv32_func3_101 & rv32_func7_0000000 ; wire rv32_sra = rv32_op & rv32_func3_101 & rv32_func7_0100000 ; wire rv32_or = rv32_op & rv32_func3_110 & rv32_func7_0000000 ; wire rv32_and = rv32_op & rv32_func3_111 & rv32_func7_0000000 ; \u5982\u4e0a\u6240\u793a\uff0c\u6bcf\u6761\u6307\u4ee4\u90fd\u6709\u4e00\u6761\u5355\u72ec\u7684\u4fe1\u53f7\u7ebf wire \uff0c\u4e3a 1 \u65f6\uff0c\u4ee3\u8868\u4e3a\u5f53\u524d\u6307\u4ee4\u3002\u4e5f\u90fd\u662f\u6309\u7167\u624b\u518c\u4e00\u6b65\u6b65\u5206\u6790\u7684\u3002","title":"\u7b2c\u4e8c\u90e8\uff1a\u786e\u5b9a\u6bcf\u6761\u6307\u4ee4"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#_7","text":"\u5728\u7b2c\u4e8c\u6b65\u4e2d\u786e\u5b9a\u4e86\u6307\u4ee4\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u6839\u636e\u6bcf\u6761\u6307\u4ee4\u751f\u6210\u76f8\u5bf9\u4e8e\u7684\u63a7\u5236\u4fe1\u53f7\u4e86\uff0c\u6709\u4e9b\u6307\u4ee4\u7684\u63a7\u5236\u4fe1\u53f7\u53ef\u4ee5\u5408\u5e76\u3002\u6e90\u7801\u4e2d\u7684\u63a7\u5236\u4fe1\u53f7\u6bd4\u8f83\u590d\u6742\uff0c\u4e0d\u592a\u5bb9\u6613\u770b\u61c2\u3002 \u4e0d\u8fc7\u6ca1\u5173\u7cfb\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u6df1\u5165\u7406\u89e3\uff0c\u4e86\u89e3\u4e00\u4e0b\u8bd1\u7801\u601d\u8def\u5c31\u884c\u4e86\uff0c\u63a7\u5236\u4fe1\u53f7\u53ef\u4ee5\u81ea\u5df1\u81ea\u5b9a\u4e49\u3002","title":"\u7b2c\u4e09\u6b65\uff1a\u751f\u6210\u63a7\u5236\u4fe1\u53f7"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#_8","text":"\u521d\u770b decoder \u7684\u4ee3\u7801\u5176\u5b9e\u4f1a\u4e00\u8138\u832b\u7136\uff0c\u4e0d\u77e5\u9053\u5728\u5e72\u4ec0\u4e48\uff0c\u6ca1\u6709\u4e0a\u9762\u4e24\u79cd\u597d\u61c2\u3002\u4f46\u5176\u5b9e\u5bf9\u7740\u624b\u518c\u53bb\u7406\u89e3\uff0c\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u8bd1\u7801\u601d\u8def\u57fa\u672c\u662f\u6309\u7167 riscv\u624b\u518c \u6765\u7684\u3002\u660e\u767d\u4e86\u6d41\u7a0b\u4ee5\u540e\u5341\u5206\u6e05\u6670\u660e\u4e86\uff0c\u6dfb\u52a0\u6307\u4ee4\u4e5f\u5f88\u7b80\u5355\u3002\u5176\u5b9e\u8fd9\u79cd\u8bd1\u7801\u65b9\u5f0f\u5f88\u50cf\u7b2c\u4e00\u79cd\u884c\u4e3a\u5efa\u6a21\u65b9\u5f0f\uff0c\u4e5f\u662f\u770b opcode func3 func7 \u4f46\u66f4\u52a0\u7684\u4f18\u96c5\u7b80\u6d01\uff0c\u4ee3\u7801\u6613\u61c2\u3002\u53ea\u4f7f\u7528\u5230\u4e86 assign \u8bed\u53e5\uff0c\u5229\u4e8e\u4e86\u89e3\u7efc\u5408\u540e\u7684\u7535\u8def\u7ed3\u6784\u3002","title":"\u4f18\u70b9"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#alu","text":"Index of /~teodorescu.1/download/teaching/cse675.au08 (ohio-state.edu)","title":"ALU\u8bbe\u8ba1"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#_9","text":"verilog \u4e2d\u5176\u5b9e\u4ee5\u53ca\u5185\u7f6e\u4e86 + - \u7b49\u57fa\u7840\u8fd0\u7b97\u65b9\u5f0f\u3002 \u5185\u7f6e\u7684 + - * / \u8fd0\u7b97 \u8fd9\u4e2a\u6211\u67e5\u4e86\u4e00\u4e0b\u8d44\u6599\uff0c\u5982\u679c\u662f\u90e8\u7f72\u5728 fpga \u4e0a\u9762\uff0c fpga \u4e00\u822c\u90fd\u4f1a\u6709 \u52a0\u6cd5\u5668 \u4e58\u6cd5\u5668 \u7b49\u8d44\u6e90\uff0c\u4f1a\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e0a\u9762\u7684\u8d44\u6e90\u3002\u4f46\u5982\u679c\u6ca1\u6709\u5462\uff1f\u4f1a\u88ab\u7efc\u5408\u6210\u4e0a\u9762\u6837\u5b50\u5462\uff1f\u8fd9\u4e2a\u6211\u627e\u4e86\u627e\u8d44\u6599\u6700\u540e\u4e5f\u4e0d\u592a\u6e05\u695a\u3002 \u4e32\u884c\u8fdb\u4f4d\u52a0\u6cd5\u5668 \u8fd9\u4e2a\u5b66\u8fc7\u6570\u7535\u7684\u90fd\u505a\u8fc7\u5b9e\u9a8c \u8d85\u524d\u8fdb\u4f4d\u52a0\u6cd5 \u8fd9\u4e2a\u8d44\u6599\u4e5f\u5f88\u591a\uff0c\u4e0d\u8fc7\u4f4d\u6570\u8fc7\u9ad8\u540e\uff0c\u8017\u8d39\u7684\u903b\u8f91\u8d44\u6e90\u662f\u5f88\u591a\u7684\u3002 \u51cf\u6cd5\u5668 \u5728\u786c\u4ef6\u5c42\u9762\uff0c\u51cf\u6cd5\u90fd\u662f\u7528\u52a0\u6cd5\u6765\u5b9e\u73b0\u7684\uff0c\u4e0d\u591a\u4ecb\u7ecd","title":"\u52a0\u6cd5\u5668\u4e0e\u51cf\u6cd5\u5668"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#_10","text":"\u53ea\u7528\u4e00\u4e2a\u52a0\u6cd5\u5668\u5b9e\u73b0\u65e0\u7b26\u53f7\u6570\u548c\u6709\u7b26\u53f7\u6570\u7684\u52a0\u51cf\u8fd0\u7b97 \u5c06\u6bd4\u8f83\u8fd0\u7b97\u7528\u51cf\u6cd5\u52a0\u6807\u5fd7\u4f4d\u5b9e\u73b0 \u52a0\u6cd5\u5668\u7528\u5185\u7f6e\u7684 + \uff0c\u4e58\u6cd5\u5668\u7528\u5185\u7f6e\u7684 * \uff0c\u9664\u6cd5\u5668\u7528\u5185\u7f6e\u7684 / \uff0c\u540e\u7eed\u6709\u65f6\u95f4\u53ef\u4ee5\u5728\u6765\u7814\u7a76\u548c\u66ff\u6362\u3002","title":"\u672c\u6b21\u76ee\u6807"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#_11","text":"","title":"\u6807\u5fd7\u4f4d\u751f\u6210"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#_12","text":"\u6761\u4ef6\u8f6c\u79fb\u6307\u4ee4 - \u5feb\u61c2\u767e\u79d1 (baike.com) x86 Control Flow (usc.edu) \u52a0\u6cd5\u5668 \u51cf\u6cd5\u5668\uff0c\u901a\u8fc7\u52a0\u6cd5\u5b9e\u73b0 \u79fb\u4f4d\u5668 \u6bd4\u8f83\u8fd0\u7b97\uff0c\u901a\u8fc7\u52a0\u6cd5\u548c\u6bd4\u8f83\u5b9e\u73b0 \u5f02\u6216 \u4e0e \u6216","title":"\u6761\u4ef6\u8f6c\u79fb\u6307\u4ee4"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#_13","text":"","title":"\u903b\u8f91\u79fb\u4f4d\u4e0e\u7b97\u6570\u79fb\u4f4d"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#_14","text":"\u91c7\u7528 for \u5faa\u73af\u53c2\u6570\u5316\u65b9\u5f0f module test_invert ( input [ 16 - 1 : 0 ] in , output [ 16 - 1 : 0 ] out ); invertTem #( . DATA_LEN ( 16 ) ) u_invertTem ( . in ( in ), . out ( out ) ); endmodule module invertTem #( DATA_LEN = 1 ) ( input [ DATA_LEN - 1 : 0 ] in , input [ DATA_LEN - 1 : 0 ] out ); integer i ; always @( * ) begin for ( i = 0 ; i < DATA_LEN ; i = i + 1 ) begin out [ i ] = in [ DATA_LEN - 1 - i ]; end end endmodule \u7efc\u5408\u540e\u7535\u8def\u56fe\u5982\u4e0b \u91c7\u7528\u62fc\u63a5\u65b9\u5f0f module test_invert ( input [ 16 - 1 : 0 ] in , output [ 16 - 1 : 0 ] out ); assign out = { in [ 00 ], in [ 01 ], in [ 02 ], in [ 03 ], in [ 04 ], in [ 05 ], in [ 06 ], in [ 07 ], in [ 08 ], in [ 09 ], in [ 10 ], in [ 11 ], in [ 12 ], in [ 13 ], in [ 14 ], in [ 15 ] }; endmodule \u7efc\u5408\u540e\u7535\u8def\u56fe\uff1a \u603b\u7ed3 \u7b2c\u4e00\u79cd\u65b9\u5f0f\u7701\u8d44\u6e90\uff0c\u4f46\u64cd\u4f5c\u590d\u6742 \u7b2c\u4e8c\u7ae0\u65b9\u5f0f\u591a\u4e86\u4e00\u4e2a i \uff0c\u4f46\u5229\u7528\u53c2\u6570\u5316\u64cd\u4f5c\uff0c\u5f88\u65b9\u4fbf\u3002","title":"\u4f4d\u98a0\u5012\u8bbe\u8ba1"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#_15","text":"\u6700\u8fd1\u5728\u770bALU\u7684\u5e95\u5c42\u8bbe\u8ba1\u65b9\u5f0f\uff0c\u8be6\u7ec6\u770b\u4e86\u9f99\u82af\u51fa\u54c1\u7684\u300a\u8ba1\u7b97\u673a\u7cfb\u7edf\u7ed3\u6784\u57fa\u7840\u300b\uff0c\u5728\u8fd9\u91cc\u9762\u8bf4\u5728\u8bbe\u8ba1\u79fb\u4f4d\u5668\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u7528\u5de6\u79fb\u4ee3\u66ff\u53f3\u79fb\uff0c\u4ee5\u8282\u7701\u786c\u4ef6\u8d44\u6e90\u3002 \u770b\u89c1\u4e0a\u9762\u90a3\u6bb5\u8bdd\uff0c\u6211\u4ed4\u7ec6\u601d\u8003\u4e86\u4e00\u4e0b\u3002\u5c06\u903b\u8f91\u53f3\u79fb\u8f6c\u6362\u4e3a\u903b\u8f91\u5de6\u79fb\u9700\u8981\u4e24\u6b21\u4f4d\u98a0\u5012\u64cd\u4f5c\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u89e3\u51b3\u3002\u90a3\u4e48\u5982\u4f55\u5c06\u7b97\u6570\u53f3\u79fb\u8f6c\u6362\u4e3a\u5de6\u79fb\u5462\uff1f\u8fd9\u4e2a\u6211\u81ea\u5df1\u4e5f\u60f3\u4e86\u4e00\u6bb5\u65f6\u95f4\uff0c\u80fd\u529b\u6709\u9650\u3002\u5c31\u53bb\u7814\u7a76\u5176\u4ed6\u5f00\u6e90\u5904\u7406\u5668\u5982\u4f55\u5b9e\u73b0ALU\u64cd\u4f5c\u7684\u3002","title":"\u79fb\u4f4d\u5668\u8bbe\u8ba1"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#case","text":"\u76f4\u63a5\u4e3a\u6bcf\u4e00\u79cd\u79fb\u4f4d\u64cd\u4f5c\u8bbe\u8ba1\u4e00\u4e2a\u64cd\u4f5c\uff0c << >> \uff0c\u5b9e\u73b0\u79fb\u4f4d\u64cd\u4f5c \u8fd9\u4e2a\u65b9\u6cd5\u663e\u7136\u7b80\u5355\u7c97\u66b4\uff0c\u53ef\u9760\u6027\u9ad8\u4f46\u4e0d\u662f\u6211\u60f3\u8981\u7684\u3002","title":"\u7b80\u5355\u7c97\u66b4\u7684case\u8bed\u53e5"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#_16","text":"\u6211\u5728\u7814\u7a76\u8702\u9e1fe203 alu \u8bbe\u8ba1\u7684\u65f6\u5019\uff0c\u53d1\u73b0\u4e86\u8fd9\u79cd\u5de7\u5999\u7684\u79fb\u4f4d\u5668\u8bbe\u8ba1\u65b9\u6cd5\u3002 \u8702\u9e1fe203 \u4e0a\u9762\u5f88\u591a\u6a21\u5757\u7684\u8bbe\u8ba1\u65b9\u6cd5\u90fd\u5f88\u5389\u5bb3\uff0c\u5b83\u7684 ALU \u5b9e\u73b0\u4e5f\u548c\u6211\u5e73\u5e38\u5b66\u7684\u4e0d\u540c\uff0c\u5b83\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u6570\u636e\u901a\u8def\uff0c\u6240\u6709\u7684\u6570\u636e\u8ba1\u7b97\u90fd\u662f\u6570\u636e\u901a\u8def\u8d1f\u8d23\uff0c ALU \u53ea\u662f\u5411\u6570\u636e\u901a\u8def\u8bf7\u6c42\u6570\u636e\u3002\u8fd9\u4e5f\u589e\u52a0\u4e86\u6e90\u7801\u7684\u7406\u89e3\u96be\u5ea6\uff0c\u4e0d\u8fc7\u6211\u4e0d\u9700\u8981\u5173\u7cfb\u8fd9\u4e48\u591a\uff0c\u6211\u53ea\u9700\u8981\u627e\u4ed6\u5b83\u5177\u4f53\u8ba1\u7b97\u7684\u5730\u65b9\u5c31\u884c\u4e86\u3002 \u7ecf\u8fc7\u4e00\u6bb5\u65f6\u95f4\u7684\u7406\u89e3\uff0c\u627e\u4e86\u7684\u6e90\u7801\u4e2d\u5173\u4e8e\u79fb\u4f4d\u5668\u7684\u8bbe\u8ba1 // Impelment the Left-Shifter // // The Left-Shifter will be used to handle the shift op wire [ `E203_XLEN - 1 : 0 ] shifter_in1 ; //\u8981\u79fb\u4f4d\u7684\u6570 wire [ 5 - 1 : 0 ] shifter_in2 ; //\u79fb\u52a8\u6b21\u6570 wire [ `E203_XLEN - 1 : 0 ] shifter_res ; // \u662f\u5426\u79fb\u4f4d wire op_shift = op_sra | op_sll | op_srl ; // Make sure to use logic-gating to gateoff the /* \u5c06\u53f3\u79fb\u52a8\u8f6c\u6362\u4e3a\u5de6\u79fb */ assign shifter_in1 = { `E203_XLEN { op_shift }} & // In order to save area and just use one left-shifter, we // convert the right-shift op into left-shift operation ( ( op_sra | op_srl ) ? { shifter_op1 [ 00 ], shifter_op1 [ 01 ], shifter_op1 [ 02 ], shifter_op1 [ 03 ], shifter_op1 [ 04 ], shifter_op1 [ 05 ], shifter_op1 [ 06 ], shifter_op1 [ 07 ], shifter_op1 [ 08 ], shifter_op1 [ 09 ], shifter_op1 [ 10 ], shifter_op1 [ 11 ], shifter_op1 [ 12 ], shifter_op1 [ 13 ], shifter_op1 [ 14 ], shifter_op1 [ 15 ], shifter_op1 [ 16 ], shifter_op1 [ 17 ], shifter_op1 [ 18 ], shifter_op1 [ 19 ], shifter_op1 [ 20 ], shifter_op1 [ 21 ], shifter_op1 [ 22 ], shifter_op1 [ 23 ], shifter_op1 [ 24 ], shifter_op1 [ 25 ], shifter_op1 [ 26 ], shifter_op1 [ 27 ], shifter_op1 [ 28 ], shifter_op1 [ 29 ], shifter_op1 [ 30 ], shifter_op1 [ 31 ] } : shifter_op1 ); assign shifter_in2 = { 5 { op_shift }} & shifter_op2 [ 4 : 0 ]; /* \u5b9e\u9645\u5de6\u79fb\u64cd\u4f5c */ assign shifter_res = ( shifter_in1 << shifter_in2 ); /* \u903b\u8f91\u79fb\u4f4d\u7ed3\u679c */ wire [ `E203_XLEN - 1 : 0 ] sll_res = shifter_res ; wire [ `E203_XLEN - 1 : 0 ] srl_res = { shifter_res [ 00 ], shifter_res [ 01 ], shifter_res [ 02 ], shifter_res [ 03 ], shifter_res [ 04 ], shifter_res [ 05 ], shifter_res [ 06 ], shifter_res [ 07 ], shifter_res [ 08 ], shifter_res [ 09 ], shifter_res [ 10 ], shifter_res [ 11 ], shifter_res [ 12 ], shifter_res [ 13 ], shifter_res [ 14 ], shifter_res [ 15 ], shifter_res [ 16 ], shifter_res [ 17 ], shifter_res [ 18 ], shifter_res [ 19 ], shifter_res [ 20 ], shifter_res [ 21 ], shifter_res [ 22 ], shifter_res [ 23 ], shifter_res [ 24 ], shifter_res [ 25 ], shifter_res [ 26 ], shifter_res [ 27 ], shifter_res [ 28 ], shifter_res [ 29 ], shifter_res [ 30 ], shifter_res [ 31 ] }; /* \u7b97\u6570\u53f3\u79fb\u7ed3\u679c */ wire [ `E203_XLEN - 1 : 0 ] eff_mask = ( ~ ( `E203_XLEN 'b0 )) >> shifter_in2 ; wire [ `E203_XLEN - 1 : 0 ] sra_res = ( srl_res & eff_mask ) | ({ 32 { shifter_op1 [ 31 ]}} & ( ~ eff_mask )); + \u9996\u5148\u6700\u57fa\u7840\u7684\u4fe1\u53f7 wire [ `E203_XLEN - 1 : 0 ] shifter_in1 ; //\u8981\u79fb\u4f4d\u7684\u64cd\u4f5c\u6570 wire [ 5 - 1 : 0 ] shifter_in2 ; //\u79fb\u52a8\u6b21\u6570 wire [ `E203_XLEN - 1 : 0 ] shifter_res ; //\u79fb\u4f4d\u540e\u7684\u7ed3\u679c // \u662f\u5426\u8fdb\u884c\u79fb\u4f4d\u64cd\u4f5c wire op_shift = op_sra | op_sll | op_srl ; op_sra op_sll op_srl \u5206\u522b\u5bf9\u5e94\u7740 \u7b97\u6570\u53f3\u79fb \u903b\u8f91\u5de6\u79fb \u903b\u8f91\u53f3\u79fb \uff0c\u56e0\u4e3a\u7b26\u53f7\u4f4d\u5728\u6700\u53f3\u8fb9\uff0c\u6240\u4ee5\u6ca1\u6709\u7b97\u6570\u5de6\u79fb\u3002\u8fd9\u4e09\u4e2a\u4fe1\u53f7\u7531\u5916\u90e8\u7ed9\u51fa\u3002 + \u63a5\u4e0b\u6765\u662f\u5c06\u53f3\u79fb\u64cd\u4f5c\u8f6c\u6362\u4e3a\u5de6\u79fb\u3002 /* \u5c06\u53f3\u79fb\u52a8\u8f6c\u6362\u4e3a\u5de6\u79fb */ assign shifter_in1 = { `E203_XLEN { op_shift }} & // In order to save area and just use one left-shifter, we // convert the right-shift op into left-shift operation ( ( op_sra | op_srl ) ? { shifter_op1 [ 00 ], shifter_op1 [ 01 ], shifter_op1 [ 02 ], shifter_op1 [ 03 ], shifter_op1 [ 04 ], shifter_op1 [ 05 ], shifter_op1 [ 06 ], shifter_op1 [ 07 ], shifter_op1 [ 08 ], shifter_op1 [ 09 ], shifter_op1 [ 10 ], shifter_op1 [ 11 ], shifter_op1 [ 12 ], shifter_op1 [ 13 ], shifter_op1 [ 14 ], shifter_op1 [ 15 ], shifter_op1 [ 16 ], shifter_op1 [ 17 ], shifter_op1 [ 18 ], shifter_op1 [ 19 ], shifter_op1 [ 20 ], shifter_op1 [ 21 ], shifter_op1 [ 22 ], shifter_op1 [ 23 ], shifter_op1 [ 24 ], shifter_op1 [ 25 ], shifter_op1 [ 26 ], shifter_op1 [ 27 ], shifter_op1 [ 28 ], shifter_op1 [ 29 ], shifter_op1 [ 30 ], shifter_op1 [ 31 ] } : shifter_op1 ); \u4ee3\u7801\u7684\u610f\u601d\u4e5f\u5f88\u7b80\u5355 shifter_op1 \u662f\u539f\u59cb\u8981\u79fb\u4f4d\u7684\u6570\u636e\uff0c\u5982\u679c\u662f op_sra \u6216\u8005 op_srl \u5c31\u5c06 shifter_op1 \u98a0\u5012\u7ed9 shifter_in1 + \u5b9e\u9645\u7684\u79fb\u4f4d\u64cd\u4f5c /* \u53ea\u6709 op_shift \u4e3a 1 \u624d\u79fb\u4f4d */ assign shifter_in2 = { 5 { op_shift }} & shifter_op2 [ 4 : 0 ]; /* \u5b9e\u9645\u5de6\u79fb\u64cd\u4f5c */ assign shifter_res = ( shifter_in1 << shifter_in2 ); + \u79fb\u4f4d\u7ed3\u679c\u8f6c\u6362 /* \u903b\u8f91\u5de6\u79fb\u79fb\u4f4d\u7ed3\u679c */ wire [ `E203_XLEN - 1 : 0 ] sll_res = shifter_res ; /* \u903b\u8f91\u53f3\u79fb\u7ed3\u679c\u9700\u8981\u518d\u6b21\u98a0\u5012\u4e00\u6b21\uff0c\u8d1f\u8d1f\u5f97\u6b63 */ wire [ `E203_XLEN - 1 : 0 ] srl_res = { shifter_res [ 00 ], shifter_res [ 01 ], shifter_res [ 02 ], shifter_res [ 03 ], shifter_res [ 04 ], shifter_res [ 05 ], shifter_res [ 06 ], shifter_res [ 07 ], shifter_res [ 08 ], shifter_res [ 09 ], shifter_res [ 10 ], shifter_res [ 11 ], shifter_res [ 12 ], shifter_res [ 13 ], shifter_res [ 14 ], shifter_res [ 15 ], shifter_res [ 16 ], shifter_res [ 17 ], shifter_res [ 18 ], shifter_res [ 19 ], shifter_res [ 20 ], shifter_res [ 21 ], shifter_res [ 22 ], shifter_res [ 23 ], shifter_res [ 24 ], shifter_res [ 25 ], shifter_res [ 26 ], shifter_res [ 27 ], shifter_res [ 28 ], shifter_res [ 29 ], shifter_res [ 30 ], shifter_res [ 31 ] }; /* \u7b97\u6570\u53f3\u79fb\u7ed3\u679c */ wire [ `E203_XLEN - 1 : 0 ] eff_mask = ( ~ ( `E203_XLEN 'b0 )) >> shifter_in2 ; wire [ `E203_XLEN - 1 : 0 ] sra_res = ( srl_res & eff_mask ) | ({ 32 { shifter_op1 [ 31 ]}} & ( ~ eff_mask )); + \u5982\u4f55\u5904\u7406\u7b97\u6570\u53f3\u79fb \u8fd9\u4e2a\u7406\u89e3\u8d77\u6765\u8fd8\u662f\u6709\u4e00\u70b9\u96be\u5ea6\uff0c\u7b97\u6570\u53f3\u79fb\u662f\u5728\u903b\u8f91\u53f3\u79fb\u7684\u7ed3\u679c\u4e0a\u8fdb\u884c\u5904\u7406\u7684\u3002 1. \u5236\u4f5c\u79fb\u4f4d\u63a9\u7801 eff_mask \uff0c\u622a\u53d6\u7b26\u53f7\u4f4d\u5b9e\u9645\u4e2a\u6570\u3002 \u5047\u5982\u539f\u59cb\u64cd\u4f5c\u4e3a 1111_0000 \u5f80\u53f3\u79fb\u52a8 2 \u4f4d\uff0c\u90a3\u4e48\u903b\u8f91\u79fb\u4f4d\u7ed3\u679c\u4e3a 0011_1100 \uff0c\u7b97\u6570\u79fb\u4f4d\u7ed3\u679c\u4e3a 1111_1100 \u3002\u6211\u4eec\u8ba9 1111_1111 \u4e5f\u5411\u53f3\u903b\u8f91\u79fb\u52a8\u4e24\u4f4d\u4f5c\u4e3a\u6211\u4eec\u7684 eff_mask \u63a9\u7801\u3002 0011_1111 2. \u901a\u8fc7\u63a9\u7801\u8865\u5168\u7b26\u53f7\u4f4d eff_mask & srl_res \uff0c \u63a9\u7801 \u4e0e\u4e0a \u903b\u8f91\u53f3\u79fb\u7ed3\u679c \uff0c\u521b\u9020 \u7b97\u6570\u53f3\u79fb \u7ed3\u679c\u7684\u540e\u534a\u90e8\u5206 0011_1100 \uff0c ~eff_mask & 1111_1111 \u521b\u9020\u7b26\u53f7\u4f4d\u7684\u63a9\u7801 mask2 1100_0000 \uff0c\u901a\u8fc7\u539f\u59cb\u8f93\u5165\u83b7\u5f97\u6570\u636e\u7684\u7b26\u53f7\u4f4d X \u3002 mask2&XXXX_XXXX \u5f97\u5230 \u7b97\u6570\u53f3\u79fb\u7684\u524d\u534a\u90e8\u5206 \u3002\u5c06\u524d\u534a\u90e8\u5206\u4e0e\u540e\u534a\u90e8\u5206\u76f8 \u4e0e \u5c31\u5f97\u5230\u7b97\u6570\u53f3\u79fb\u6700\u540e\u7684\u7ed3\u679c\u4e86\u3002 \u6574\u4e2a\u8ba1\u7b97\u8fc7\u7a0b\u8fd8\u662f\u975e\u5e38\u5de7\u5999\u7684\uff0c\u5229\u7528\u79fb\u4f4d\u64cd\u4f5c\u521b\u9020\u63a9\u7801\uff0c\u901a\u8fc7\u63a9\u7801\u5f97\u5230\u6700\u540e\u7684\u7ed3\u679c\u3002 [!note] 11111 123123 123123123","title":"\u5168\u90e8\u8f6c\u6362\u4e3a\u5de6\u79fb\u64cd\u4f5c"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#_17","text":"\u6267\u884c\u6a21\u5757\u8f93\u5165\uff1a 1. rs1_data 2. rs2_data 3. rd_data 4. imm_data 5. rs1_valid 6. rs2_valid 7. rd_valid 8. imm_valid 9. \u8bbf\u5b58\u8bfb 10. \u8bbf\u5b58\u5199 11.","title":"\u6267\u884c\u6a21\u5757"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#alu_1","text":"+ - ^ | & \u903b\u8f91\u5de6\u79fb \u903b\u8f91\u53f3\u79fb \u7b97\u6570\u53f3\u79fb <\uff08\u6709\u7b26\u53f7\u3001\u65e0\u7b26\u53f7\uff09 == \uff01= =(\u6709\u7b26\u53f7\u65e0\u7b26\u53f7) \uff08\u6709\u7b26\u53f7\u3001\u65e0\u7b26\u53f7\uff09\uff08\u9ad832\u3001\u4f4e32\uff09 \\ \uff08\u6709\u7b26\u53f7\u3001\u65e0\u7b26\u53f7\uff09 \u53d6\u4f59\u6570 \uff08\u6709\u7b26\u53f7\u65e0\u7b26\u53f7\uff09","title":"ALU\u9700\u8981\u5b9e\u73b0\u7684\u64cd\u4f5c"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#alu_2","text":"1bit\u6bd4\u8f83\u8f93\u51fa 64bit \u8fd0\u7b97\u8f93\u51fa","title":"ALU \u8f93\u51fa"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#alu_3","text":"64bit A\u64cd\u4f5c\u6570 64bit B\u64cd\u4f5c\u6570 ALU \u64cd\u4f5c\u7801","title":"ALU\u8f93\u5165"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#_18","text":"rd-idx \u6570\u636e\u8f93\u5165","title":"\u56de\u5199\u6a21\u5757"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#npchalt","text":"","title":"\u4e3aNPC\u6dfb\u52a0halt"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#halt","text":"\u7531\u4e8evscode\u8df3\u8f6c\u9519\u8bef\uff0c\u627e\u6e90\u7801\u627e\u4e86\u4e00\u6bb5\u65f6\u95f4\u3002\u6700\u5f00\u59cb\u8df3\u8f6c\u5230 am.h \u627e\u4e86\u5927\u5927\u6982\u6709\u5341\u5206\u949f\u624d\u627e\u5230\u6b63\u771f\u7684 halt \u51fd\u6570\uff0c\u8def\u5f84\u4e3a abstract-machine/am/src/riscv/npc/trm.c \uff0c\u53ef\u4ee5\u770b\u5230\u662f\u4e00\u4e2a while(1) \u6b7b\u5faa\u73af. \u6c47\u7f16\u4ee3\u7801\u4e5f\u662f\u4e00\u4e2a\u6b7b\u5faa\u73af.","title":"\u5b9a\u4f4d halt \u51fd\u6570"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#halt-ebreak","text":"\u4e3a\u4e86\u628a halt \u4e2d\u7684 while(1) \u6539\u4e3a ebreak ,\u8bf4\u5b9e\u8bdd\u786e\u5b9e\u4e0d\u77e5\u9053\u8be5\u600e\u4e48\u529e,\u4f46 nemu \u4e2d\u5df2\u7ecf\u5b9e\u73b0\u4e86 ebreak \u51fd\u6570,\u5f53\u7136\u662f\u53c2\u8003\u522b\u4eba\u7684\u4e86( cv\u5de5\u7a0b\u5e08 ).\u7ecf\u8fc7\u5bfb\u627e nemu \u4e2d\u96be\u5ea6 halt \u51fd\u6570\u4f4d\u4e8e\u8def\u5f84 /home/leesum/ysyx-workbench/abstract-machine/am/src/platform/nemu/trm.c . \u5168\u5c40\u641c\u7d22 nemu_trap ,\u5728 nemu.h \u4e0b\u627e\u5230\u5b8f\u5b9a\u4e49. \u53ef\u4ee5\u770b\u5230\u4e0d\u540c\u67b6\u6784\u4e0b\u7684 trap \u51fd\u6570\u662f\u4e0d\u4e00\u6837\u7684, riscv \u4f7f\u7528\u4e86\u5185\u8054\u6c47\u7f16 asm volatile ( \" mv a0 , % 0 ; ebreak\" : :\"r\"(code)) \u6211\u4eec\u76f4\u63a5\u590d\u5236\u7c98\u8d34\u5c31\u597d\u4e86. \u518d\u6b21\u6c47\u7f16\u67e5\u770b\u7ed3\u679c 1. npc \u6c47\u7f16\u7ed3\u679c 2. nemu \u6c47\u7f16\u7ed3\u679c \u4e00\u6a21\u4e00\u6837,\u6539\u9020\u5b8c\u6210!!!","title":"\u5b9e\u73b0 halt \u51fd\u6570 ebreak"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#npchit-goodbad-trap","text":"\u8fd8\u662f\u8001\u65b9\u6cd5,\u5148\u53c2\u8003\u522b\u4eba\u7684\u6e90\u7801,\u518d\u7167\u7740\u522b\u4eba\u7684\u601d\u8def\u5b9e\u73b0\u81ea\u5df1\u7684\u4ee3\u7801.","title":"\u4e3aNPC\u5b9e\u73b0HIT GOOD/BAD TRAP"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#nemu-hit-goodbad-trap","text":"\u8fd9\u4e2a\u6211\u4e4b\u524d\u505a pa \u7684\u65f6\u5019\u7814\u7a76\u4e86\u4e00\u4e0b,\u597d\u50cf\u662f\u901a\u8fc7 a0 \u5bc4\u5b58\u5668\u7684\u503c\u6765\u5224\u8bfb\u7684. 1. \u627e\u5230 ebreak \u6307\u4ee4\u5b9e\u73b0\u7ec6\u8282 2. \u8ddf\u968f NEMUTRAP \u5c42\u5c42\u8df3\u8f6c \u6700\u603b\u5b9a\u4f4d\u5230 set_nemu_state \u51fd\u6570 \u5176\u4e2d state \u4e3a NEMU_END ; pc \u4e3a s->pc ; code \u4e3a a0 \u5bc4\u5b58\u5668\u7684\u503c. \u6700\u7ec8\u5c06 a0 \u5bc4\u5b58\u5668\u7684\u503c\u8d4b\u7ed9\u4e86 nemu_state.halt_ret . 3. \u627e\u5230\u6700\u7ec8\u5224\u65ad\u548c\u8f93\u51fa\u7684\u5730\u65b9 \u4e0a\u4e00\u6b65\u627e\u5230 nemu_state.halt_ret \u540e\u7ebf\u7d22\u5c31\u65ad\u4e86,\u6211\u4eec\u5168\u5c40\u641c\u7d22 HIT GOOD ,\u6700\u7ec8\u5728 ysyx-workbench/nemu/src/cpu/cpu-exec.c \u4e2d\u627e\u5230\u4e86\u76f8\u5173\u51fd\u6570 cpu_exec .\u5176\u4e2d case NEMU_ABORT : Log ( \"nemu: %s at pc = \" FMT_WORD , ( nemu_state . state == NEMU_ABORT ? ANSI_FMT ( \"ABORT\" , ANSI_FG_RED ) : ( nemu_state . halt_ret == 0 ? ANSI_FMT ( \"HIT GOOD TRAP\" , ANSI_FG_GREEN ) : ANSI_FMT ( \"HIT BAD TRAP\" , ANSI_FG_RED ))), nemu_state . halt_pc ); \u8bf4\u660e\u4e86\u5177\u4f53\u7684\u903b\u8f91 nemu_state.halt_ret == 0 \u5219 HIT GOOD \u5426\u5219 HIT BAD TRAP .","title":"nemu \u4e2d\u7684 HIT GOOD/BAD TRAP"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#npc-hit-goodbad-trap","text":"[!hint] \u5177\u4f53\u601d\u8def\u53c2\u8003\u4e0a\u9762\u7684 nemu \u65b9\u5f0f\u5c31\u884c\u4e86,\u5728\u6267\u884c\u5230 ebreak \u6307\u4ee4\u65f6,\u8bfb\u53d6\u4e00\u4e0b a0 \u5bc4\u5b58\u5668\u5668\u7684\u503c.","title":"\u4e3a npc \u6dfb\u52a0HIT GOOD/BAD TRAP"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#ebreak","text":"verilog \u5b9e\u73b0\u65b9\u6cd5\u5982\u4e0b \u5728\u6267\u884c\u7684\u65f6\u5019,\u5982\u679c\u6307\u4ee4\u65f6 ebreak ,\u76f4\u63a5\u8c03\u7528\u7ed3\u675f\u51fd\u6570 finish . cpp \u5b9e\u73b0\u65b9\u6cd5. \u5f88\u7b80\u5355,\u4e0d\u591a\u8bf4.","title":"\u901a\u8fc7 ebreak \u6307\u4ee4\u901a\u77e5\u4eff\u771f\u7ed3\u675f"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#hit-goodbad-trap","text":"while ( ! top -> contextp () -> gotFinish ()) { mysim . stepCycle (); } // \u4eff\u771f\u7ed3\u675f\u65f6,\u4f1a\u8df3\u5230\u8fd9\u91cc\u6765,\u5728\u8fd9\u91cc\u8bfb\u53d6 a0 \u5bc4\u5b58\u5668\u7684\u503c\u6765\u5224\u65ad \u5177\u4f53\u5b9e\u73b0\u5982\u4e0b void Simtop::npcTrap () { this -> registerfile = cpu_gpr ; this -> pc = cpu_pc ; uint64_t a0 = registerfile [ 10 ]; cout << \"a0:\" << a0 << endl ; if ( a0 == 0 ) { cout << \"PC:\" << hex << pc << \" \\t HIT GOOD\" << endl ; } else { cout << \"PC:\" << hex << pc << \" \\t BAD TRAP\" << endl ; } }","title":"\u6dfb\u52a0 HIT GOOD/BAD TRAP"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#npc-nemu","text":"[!quote] \u9605\u8bfb nemu \u7684\u6e90\u7801\u540e,\u53d1\u73b0\u4ed6\u4f7f\u7528\u7684\u662f readline \u6765\u5b9e\u73b0\u7684\u547d\u4ee4\u884c\u4ea4\u4e92\u63a7\u5236.\u800c\u6211\u4f7f\u7528\u7684\u662f\u4e00\u4e2a github \u4e0a\u5f00\u6e90\u5e93.(\u57fa\u4e8e readline ) Svalorzen/cpp-readline: A very simple C++ wrapper for GNU readline. (github.com) \u4f7f\u7528\u5f88\u7b80\u5355,\u770b\u770b\u91cc\u9762\u7684 example \u5c31\u884c. \u9700\u8981\u6ce8\u610f\u7684\u662f,\u91cc\u9762\u5185\u7f6e\u4e86\u9000\u51fa\u547d\u4ee4 quit exit . \u79fb\u690d\u540e\u4e3b\u51fd\u6570\u5f20\u8fd9\u6837 int main () { /* \u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u5c06 Simtop mysim \u58f0\u660e\u4e3a\u5168\u5c40\u53d8\u91cf\u4f1a\u5d29\u6e83*/ mysim_p = new Simtop ; static Vtop * top = mysim_p -> getTop (); mysim_p -> reset (); /* \u6ce8\u518c\u547d\u4ee4 */ cr :: Console c ( \">:\" ); c . registerCommand ( \"info\" , cmd_info ); c . registerCommand ( \"x\" , cmd_x ); c . registerCommand ( \"si\" , cmd_si ); c . registerCommand ( \"c\" , cmd_c ); c . registerCommand ( \"p\" , cmd_p ); c . registerCommand ( \"help\" , cmd_help ); c . registerCommand ( \"w\" , cmd_w ); int retCode ; do { retCode = c . readLine (); // We can also change the prompt based on last return value: if ( retCode == ret :: Ok ) c . setGreeting ( \">\" ); else c . setGreeting ( \"!>\" ); if ( retCode == 1 ) { std :: cout << \"Received error code 1 \\n \" ; } else if ( retCode == 2 ) { std :: cout << \"Received error code 2 \\n \" ; } } while ( retCode != ret :: Quit ); mysim_p -> npcTrap (); return 0 ; }","title":"\u4e3a npc \u6dfb\u52a0\u7c7b\u4f3c nemu \u7684\u547d\u4ee4\u884c\u4ea4\u4e92\u754c\u9762"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#npc","text":"[!example] \u79fb\u690d\u547d\u4ee4\u884c\u4ea4\u4e92\u754c\u9762\u540e,\u6dfb\u52a0\u547d\u4ee4\u5c31\u548c nemu \u5dee\u4e0d\u591a\u4e86,\u53ef\u4ee5\u5c06 nemu \u4e0a\u5b9e\u73b0\u7684\u547d\u4ee4\u642c\u8fc7\u6765,\u4f46\u662f\u4e5f\u9700\u8981\u4e00\u4e9b\u4fee\u6539.","title":"\u4e3a npc \u6dfb\u52a0\u547d\u4ee4"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#npc-difftest","text":"[!NOTE] \u611f\u609f \u7531\u4e8e\u6211 pa \u6ca1\u6709\u505a\u5230 difftest \u7ae0\u8282,\u521d\u770b\u6e90\u7801\u662f\u6709\u70b9\u61f5\u7684,\u4f46\u53c2\u8003\u4e86\u4e00\u4e0b\u522b\u4eba\u7684\u5b9e\u73b0\u65b9\u5f0f,\u8865\u5145\u4e86\u4e00\u4e0b\u52a8\u6001\u94fe\u63a5\u5e93\u7684\u77e5\u8bc6\u540e,\u8fd8\u662f\u53ef\u4ee5\u7406\u89e3\u7684.","title":"\u4e3a npc \u6dfb\u52a0 difftest"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#linux","text":"[!note] \u52a8\u6001\u94fe\u63a5\u4e0e\u9759\u6001\u94fe\u63a5\u5728 408 \u4e2d\u5b66\u8fc7,\u4f46\u4e5f\u4ec5\u4ec5\u662f\u5b66\u8fc7,\u4e00\u822c\u5728\u7f16\u7a0b\u7684\u65f6\u5019\u5c31\u662f\u7f16\u8bd1\u7684\u65f6\u5019\u52a0\u4e0a\u7ed9 -l \u53c2\u6570,\u6dfb\u52a0\u4e00\u4e9b\u7cfb\u7edf\u5e93,\u4e5f\u6ca1\u6709\u6df1\u5165\u4e86\u89e3. 1. \u9996\u5148\u6211\u4eec\u5148\u5c06 nemu \u7f16\u8bd1\u6210\u52a8\u6001\u94fe\u63a5\u5e93\u6587\u4ef6. \u5728 build \u76ee\u5f55\u4e0b\u627e\u5230 so \u6587\u4ef6.\u6267\u884c\u547d\u4ee4\u53ef\u4ee5\u67e5\u770b\u94fe\u63a5\u5e93\u91cc\u9762\u7684\u51fd\u6570. nm riscv64-nemu-interpreter-so \u53ef\u4ee5\u770b\u5230\u786e\u5b9e\u6709\u6211\u4eec\u4e3a difftest \u51c6\u5907\u7684\u51fd\u6570. 2. \u53c2\u8003 nemu \u52a8\u6001\u94fe\u63a5\u5e93\u7684\u4f7f\u7528\u65b9\u5f0f \u6587\u4ef6\u8def\u5f84 src/cpu/difftest/dut.c \u9996\u5148\u5b9a\u4e49\u4e86\u51fd\u6570\u6307\u9488,\u7528\u4e8e\u540e\u9762\u63a5\u6536\u51fd\u6570. \u7136\u540e\u7528 dlopen \u6253\u5f00\u52a8\u6001\u94fe\u63a5\u5e93 so \u6587\u4ef6 \u5176\u6b21\u7528 dlsym \u53bb\u5bfb\u627e\u52a8\u6001\u94fe\u63a5\u5e93\u4e2d\u7684\u51fd\u6570\u5730\u5740,\u5e76\u7528\u51fd\u6570\u6307\u9488\u4fdd\u5b58\u8d77\u6765. \u6700\u540e\u76f4\u63a5\u4f7f\u7528\u51fd\u6570\u6307\u9488,\u5c31\u53ef\u4ee5\u50cf\u666e\u901a\u51fd\u6570\u4e00\u6837\u4f7f\u7528\u4e86. [!info] \u601d\u8003 \u53ef\u4ee5\u770b\u5230,\u5b9a\u4e49\u51fd\u6570\u6307\u9488\u7684\u65f6\u5019\u9700\u8981\u6307\u5b9a\u51fd\u6570\u7684\u53c2\u6570,\u8fd4\u56de\u503c\u7b49\u7b49,\u8fd9\u4e2a\u662f\u548c\u52a8\u6001\u94fe\u63a5\u5e93\u4e2d\u7684\u51fd\u6570\u4e00\u4e00\u5bf9\u5e94\u7684,\u4f46\u4e0a\u9762\u6211\u4eec\u7528 nm \u547d\u4ee4\u67e5\u770b\u51fd\u6570\u65f6,\u53ea\u80fd\u770b\u5230\u540d\u5b57,\u4e0d\u80fd\u770b\u5230\u53c2\u6570.\u4e00\u822c\u52a8\u6001\u94fe\u63a5\u5e93\u7684\u4f5c\u8005\u4f1a\u7ed9\u4f60\u4e00\u4e2a h \u6587\u4ef6\u65b9\u4fbf\u4f7f\u7528.","title":"Linux \u52a8\u6001\u94fe\u63a5\u5e93\u7f16\u7a0b"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#nemu-refc","text":"// \u5728DUT host memory\u7684`buf`\u548cREF guest memory\u7684`dest`\u4e4b\u95f4\u62f7\u8d1d`n`\u5b57\u8282, // `direction`\u6307\u5b9a\u62f7\u8d1d\u7684\u65b9\u5411, `DIFFTEST_TO_DUT`\u8868\u793a\u5f80DUT\u62f7\u8d1d, `DIFFTEST_TO_REF`\u8868\u793a\u5f80REF\u62f7\u8d1d void difftest_memcpy ( paddr_t addr , void * buf , size_t n , bool direction ) { /* \u4e00\u4e2a\u4e00\u4e2a\u5b57\u8282\u62f7\u8d1d,\u53ea\u9700\u8981\u5b9e\u73b0 dut->ref \u65b9\u5411*/ if ( direction == DIFFTEST_TO_REF ) { for ( size_t i = 0 ; i < n ; i ++ ) { paddr_write ( addr + i , 1 , * (( uint8_t * ) buf + i )); } } else { assert ( 0 ); } } // `direction`\u4e3a`DIFFTEST_TO_DUT`\u65f6, \u83b7\u53d6REF\u7684\u5bc4\u5b58\u5668\u72b6\u6001\u5230`dut`; // `direction`\u4e3a`DIFFTEST_TO_REF`\u65f6, \u8bbe\u7f6eREF\u7684\u5bc4\u5b58\u5668\u72b6\u6001\u4e3a`dut`; //riscv64_CPU_state // dut \u4e3a\u4e00\u4e2a\u6307\u9488 void difftest_regcpy ( void * dut , bool direction ) { CPU_state * reg_p = dut ; if ( DIFFTEST_TO_REF == direction ) { for ( int i = 0 ; i < 32 ; i ++ ) { cpu . gpr [ i ] = reg_p -> gpr [ i ]; } cpu . pc = reg_p -> pc ; } else { for ( int i = 0 ; i < 32 ; i ++ ) { reg_p -> gpr [ i ] = cpu . gpr [ i ]; } reg_p -> pc = cpu . pc ; } } // \u8ba9REF\u6267\u884c`n`\u6761\u6307\u4ee4 void difftest_exec ( uint64_t n ) { cpu_exec ( n ); } void difftest_raise_intr ( word_t NO ) { assert ( 0 ); } // \u521d\u59cb\u5316REF\u7684DiffTest\u529f\u80fd void difftest_init ( int port ) { /* Perform ISA dependent initialization. */ init_isa (); } \u5176\u4e2d CPU_state \u7ed3\u6784\u4f53\u4e3a typedef struct { word_t gpr [ 32 ]; // 64\u4f4d vaddr_t pc ; // 64\u4f4d } riscv64_CPU_state ;","title":"\u5b8c\u5584 nemu \u7684 ref.c"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#npc-difftest_1","text":"[!note] \u53c2\u8003 nemu \u4e2d difftest \u7684\u5b9e\u73b0\u65b9\u5f0f,\u6211\u8fd9\u91cc\u521b\u5efa\u4e86\u4e00\u4e2a difftest \u7c7b\u65b9\u4fbf\u7ba1\u7406 \u58f0\u660e\u51fd\u6570\u6307\u9488 \u7167\u846b\u82a6\u753b\u74e2\u5b9e\u73b0 init \u51fd\u6570 void Difftest::init ( const char * ref_so_file , long img_size , int port ) { assert ( ref_so_file != NULL ); void * handle ; handle = dlopen ( ref_so_file , RTLD_LAZY ) ` ; assert ( handle ); diff_memcpy = ( ref_Difftest_memcpy ) dlsym ( handle , \"difftest_memcpy\" ); assert ( diff_memcpy ); diff_regcpy = ( ref_Difftest_regcpy ) dlsym ( handle , \"difftest_regcpy\" ); assert ( diff_regcpy ); diff_exec = ( ref_Difftest_exec ) dlsym ( handle , \"difftest_exec\" ); assert ( diff_exec ); diff_raise_intr = ( ref_Difftest_raise_intr ) dlsym ( handle , \"difftest_raise_intr\" ); assert ( diff_raise_intr ); diff_init = ( ref_difftest_init ) dlsym ( handle , \"difftest_init\" ); assert ( diff_init ); diff_init ( port ); uint64_t membase = mysim_p -> mem -> getMEMBASE (); /* \u5c06\u7a0b\u5e8f\u955c\u50cf\u6587\u4ef6\u62f7\u8d1d\u8fc7\u53bb */ diff_memcpy ( membase , mysim_p -> mem -> guest_to_host ( membase ), img_size , DIFFTEST_TO_REF ); CPU_state regs = getDutregs (); /* \u8ba9 dut \u548c ref \u5bc4\u5b58\u5668\u521d\u59cb\u503c\u4e00\u6837 */ diff_regcpy ( & regs , DIFFTEST_TO_REF ); } \u5b9e\u73b0 difftest_step \u5177\u4f53\u601d\u8def\u5c31\u662f,\u8ba9 ref:nemu \u6267\u884c\u4e00\u6b21,\u7136\u540e\u5bf9\u6bd4 dut ref \u7684\u5bc4\u5b58\u5668\u503c,\u82e5\u4e0d\u540c\u505c\u6b62\u6267\u884c,\u5e76\u62a5\u9519. void Difftest::difftest_step () { /* \u5bc4\u5b58\u5668\u4e0d\u4e00\u6837 */ diff_exec ( 1 ); if ( ! checkregs ()) { mysim_p -> top_status = mysim_p -> TOP_STOP ; } } \u5c06 difftest \u6dfb\u52a0\u5230\u539f\u59cb\u4eff\u771f\u4ee3\u7801\u4e2d [!tip] \u5728 npc \u6267\u884c\u4e00\u6761\u6307\u4ee4\u540e(\u65f6\u949f\u53d8\u5316\u4e00\u4e2a\u5468\u671f),\u8c03\u7528 difftest_step \u8ba9 ref:nemu \u4e5f\u6267\u884c\u4e00\u6761\u6307\u4ee4. \u53ea\u9700\u8981\u5728\u5177\u4f53\u7684\u6267\u884c\u51fd\u6570\u4e2d\u52a0\u4e0a difftst_step \u5c31\u884c\u4e86.","title":"\u5b8c\u5584 npc \u4eff\u771f\u7aef\u7684 difftest"},{"location":"ysyx/%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/#_19","text":"nemu \u52a8\u6001\u5e93\u7684\u7f16\u8bd1\u4e0e\u94fe\u63a5 \u6309\u7167\u6559\u7a0b\u6765,\u4f1a\u5728 build \u76ee\u5f55\u4e0b\u751f\u6210 riscv64-nemu-interpreter-so ,\u5c06\u5176\u91cd\u547d\u540d\u4e3a libnemu.so \u5e76\u79fb\u52a8\u5230 /lib \u76ee\u5f55\u4fbf\u4e8e\u7f16\u8bd1\u5668\u67e5\u627e\u4e0e\u94fe\u63a5. \u4e3a makefile \u6587\u4ef6\u6dfb\u52a0\u94fe\u63a5\u5e93 -lasan -ldl -lnemu GCC_LDFLAGS := -LDFLAGS \"-lasan -lreadline -ldl -lnemu\" \u5176\u4e2d -lasan \u662f\u4e3a\u4e86\u89e3\u51b3\u62a5\u9519 ASan runtime does not come first in initial library list; you should either link runtime to your application or manually preload it with LD_PRELOAD. \u00b7 Issue #796 \u00b7 google/sanitizers (github.com) \u6ce8\u610f difftest \u7684\u521d\u59cb\u5316\u987a\u5e8f difftest \u5fc5\u987b\u8981\u5728 npc reset \u540e\u521d\u59cb\u5316,\u539f\u56e0\u5982\u4e0b: npc \u5728\u6ca1\u6709 reset \u65f6, pc \u7684\u503c\u4e3a 0 difftest \u5728 init \u65f6,\u4f1a\u62f7\u8d1d npc \u7684\u5bc4\u5b58\u5668\u7ec4,\u800c\u6211\u4eec\u662f\u901a\u8fc7\u6307\u9488\u4f20\u9012\u7684\u5bc4\u5b58\u5668\u7ec4\u6587\u4ef6,\u521d\u59cb\u5316\u7684\u65f6\u5019\u4e3a NULL .","title":"\u79fb\u690d\u4e2d\u7684\u6ce8\u610f\u4e8b\u9879"},{"location":"ysyx/%E5%A6%82%E4%BD%95%E6%8F%90%E9%97%AE/","text":"\u8bfb\u540e\u611f \u00b6 \u6211\u662f\u4e00\u4e2a\u559c\u6b22\u6363\u9f13\u65b0\u4e1c\u897f\u7684\u4eba\uff0c\u6bcf\u6b21\u5b66\u4e60\u65b0\u4e8b\u7269\u65f6\uff0c\u6211\u90fd\u4f1a\u6309\u7167\u4ee5\u4e0b\u51e0\u6b65\u8fdb\u884c\u5b66\u4e60\u3002 1. \u5148\u8dd1\u4e00\u4e2a\u5b98\u65b9\u6216\u8005\u7b2c\u4e09\u65b9\u7684\u5c0f\u4f8b\u5b50 \u5f53\u7136\u5728\u8fd9\u4e2d\u95f4\u4e5f\u4f1a\u9047\u89c1\u5f88\u591a\u95ee\u9898\u3001\u4e5f\u53ef\u80fd\u6709\u8bb8\u591a\u5de5\u5177\u4f60\u6ca1\u6709\u7528\u8fc7\uff0c\u4e0d\u719f\u7ec3\u5bfc\u81f4\u4e86\u95ee\u9898\u7684\u53d1\u751f\u3002\u8fd9\u4e2a\u65f6\u5019\u5c31\u5e94\u8be5\u505c\u4e0b\u6765\uff0c\u5148\u53bb\u4e86\u89e3\u4e00\u4e0b\u5de5\u5177\u7684\u57fa\u672c\u4f7f\u7528\uff0c\u5982\u679c\u5f3a\u884c\u8fdb\u884c\u4e0b\u53bb\u7684\u8bdd\uff0c\u95ee\u9898\u76f4\u4f1a\u8d8a\u6765\u8d8a\u591a\u3002\u4f8b\u5982\u6211\u4ee5\u524d\u914d\u7f6e\u4e00\u4e2a opencv \u7684 tensorflow \u73af\u5883\u65f6\uff0c\u7531\u4e8e\u7248\u672c\u4e0d\u5339\u914d\u7684\u95ee\u9898\u9700\u8981\u914d\u7f6e\u865a\u62df\u73af\u5883\u3002\u4f46\u5728\u8fd9\u4e2a\u9636\u6bb5\u9047\u89c1\u7684\u95ee\u9898\u90fd\u662f\u4e00\u4e9b\u5e38\u89c1\u95ee\u9898\uff0c\u53ea\u8981\u613f\u610f \u767e\u5ea6 \u8c37\u6b4c \u90fd\u5f88\u597d\u89e3\u51b3\u3002 2. \u5c1d\u8bd5\u4fee\u6539\u522b\u4eba\u7684\u4f8b\u5b50\uff0c\u5b9e\u73b0\u4e00\u4e9b\u9884\u671f\u7684\u529f\u80fd \u8fd9\u4e2a\u9636\u6bb5\u5982\u679c\u9047\u89c1\u95ee\u9898\uff0c\u4e5f\u90fd\u662f\u4e00\u4e9b\u5f88\u57fa\u7840\u7684\u95ee\u9898\uff0c\u53ea\u8981\u613f\u610f\u53bb\u7ffb\u624b\u518c\u3001\u53bb\u641c\u7d22\u3002\u4e5f\u90fd\u5f88\u597d\u89e3\u51b3\u3002 3. \u7f16\u5199\u81ea\u5df1\u7684\u5e94\u7528 \u5728\u8fd9\u4e2a\u9636\u6bb5\u4f1a\u9047\u89c1\u5927\u91cf\u7684\u95ee\u9898\u3001\u53ef\u80fd\u662f\u4e00\u4e9b\u57fa\u7840\u7684\u3001\u4e5f\u53ef\u80fd\u662f\u4e00\u4e9b\u5751\u3002\u4f46\u6211\u9047\u89c1\u95ee\u9898\u65f6\uff0c\u90fd\u4f1a\u5148\u5c1d\u8bd5\u7740\u81ea\u5df1\u53bb\u89e3\u51b3\u3002\u6211\u5bf9\u5728\u4e92\u8054\u7f51\u4e0a\u5206\u4eab\u81ea\u5df1\u8e29\u5751\u7ecf\u5386\u3001\u56de\u7b54\u522b\u4eba\u95ee\u9898\u7684\u4eba\u662f\u975e\u5e38\u611f\u8c22\u7684\uff0c\u5e2e\u52a9\u4e86\u65e0\u6570\u4e2a\u5c0f\u767d\u5ea6\u8fc7\u4e86\u6700\u56f0\u96be\u7684\u65f6\u523b\u3002 \u6211\u4e5f\u52a0\u5165\u4e86\u8bb8\u591a\u6280\u672f\u7231\u597d\u8005\u4ea4\u6d41\u7fa4\uff0c\u91cc\u9762\u4e5f\u6709\u5f88\u591a\u4eba\u63d0\u95ee\uff0c\u6211\u53ea\u8981\u770b\u89c1\u4e86\u6211\u66fe\u7ecf\u8e29\u8fc7\u7684\u5751\uff0c\u6211\u90fd\u4f1a\u70ed\u5fc3\u5206\u4eab\u6211\u89e3\u51b3\u7684\u529e\u6cd5\uff0c\u56e0\u4e3a\u6211\u7406\u89e3\u8e29\u5751\u7684\u75db\u82e6\u3002\u5e76\u4e0d\u662f\u6240\u6709\u7684\u5751\u90fd\u503c\u5f97\u53bb\u8e29\u3002\u5f53\u7136\u5728\u7fa4\u91cc\u4e5f\u4f1a\u5145\u65a5\u7740\u5927\u91cf\u7684\u4f4e\u7ea7\u7684\u95ee\u9898\uff0c\u4f8b\u5982\uff1a + \u62ff\u624b\u673a\u62cd\u5c4f\u5e55\uff0c\u8fd9\u6837\u7684\u63d0\u95ee\u8ba9\u4eba\u770b\u7740\u5c31\u6ca1\u6709\u5174\u8da3 + \u5e38\u89c1\u7684\u95ee\u9898\uff0c\u53ea\u8981\u613f\u610f\u52a8\u52a8\u624b\u767e\u5ea6\u4e00\u4e0b\u5c31\u53ef\u4ee5\u89e3\u51b3\uff0c\u4f8b\u5982 \u5b57\u7b26\u4e32\u8f6c\u6574\u5f62 \u3002 \u6211\u4ee5\u524d\u8ba4\u4e3a\u767e\u5ea6\u662f\u4e07\u80fd\u7684\uff0c\u4ec0\u4e48\u4e0d\u4f1a\u53bb\u767e\u5ea6\u4ee5\u4e0b\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u3002\u73b0\u5728\u53d1\u73b0\u641c\u7d22\u5f15\u64ce\u53ea\u80fd\u7ed9\u4f60\u4e00\u4e9b\u521d\u7ea7\u95ee\u9898\u7684\u7b54\u6848\u3001\u66f4\u52a0\u6df1\u5165\u7684\u7406\u89e3\u9700\u8981\u81ea\u5df1\u53bb\u63a2\u7d22\u3002\u4f46\u641c\u7d22\u5f15\u64ce\u786e\u5b9e\u662f\u4e00\u4e2a\u597d\u4e1c\u897f\u3001\u56e0\u4e3a\u5e73\u65f6\u9047\u89c1\u7684\u95ee\u9898\u6709\u767e\u5206\u4e4b\u516b\u5341\u90fd\u662f\u521d\u7ea7\u95ee\u9898\u3002\u5728\u5e73\u65f6\u7684\u5b66\u4e60\u4e2d\uff0c\u6211\u4e5f\u7ecf\u5e38\u9762\u5411\u767e\u5ea6\u7f16\u7a0b\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u4eba\u90fd\u80fd\u591f\u628a\u6240\u6709 Linux \u547d\u4ee4\u90fd\u7262\u8bb0\u4e8e\u5fc3\uff0c\u4e5f\u4e0d\u662f\u6240\u6709\u4eba\u90fd\u80fd\u591f\u638c\u63e1\u57fa\u7840\u51fd\u6570\u7684\u7528\u6cd5\u3002\u4f46\u8fd9\u4e9b\u90fd\u65e0\u5173\u7d27\u8981\u3001\u54ea\u91cc\u4e0d\u4f1a\u5b66\u54ea\u91cc\u3002\u53ea\u8981\u638c\u63e1\u4e86\u72ec\u7acb\u5b66\u4e60\u3001\u89e3\u51b3\u95ee\u9898\u7684\u80fd\u529b\uff0c\u5927\u90e8\u5206\u56f0\u96be\u90fd\u5f88\u7b80\u5355\u3002\u5176\u5b9e\u5927\u90e8\u5206\u95ee\u9898\u95ee\u51fa\u53bb\u540e\u90fd\u6ca1\u6709\u7ed3\u679c\uff0c\u8981\u4e48\u592a\u7b80\u5355\u3001\u522b\u4eba\u4f1a\u8ba4\u4e3a\u4f60\u6ca1\u6709\u8ba4\u771f\u601d\u8003\u5c31\u95ee\u51fa\u6765\u3002\u8981\u4e48\u592a\u96be\uff0c\u522b\u4eba\u4e5f\u6ca1\u6709\u9047\u89c1\u8fc7\u3002\u8ba9\u81ea\u5df1\u95ee\u9898\u53d8\u5f97\u6709\u4ef7\u503c\uff0c\u624d\u4f1a\u6709\u4eba\u56de\u7b54\uff0c\u63d0\u51fa\u95ee\u9898\u3001\u5f97\u5230\u89e3\u7b54\u786e\u5b9e\u662f\u4e00\u4ef6\u5f88\u5e78\u8fd0\u7684\u4e8b\u60c5\u3002","title":"\u8bfb\u540e\u611f"},{"location":"ysyx/%E5%A6%82%E4%BD%95%E6%8F%90%E9%97%AE/#_1","text":"\u6211\u662f\u4e00\u4e2a\u559c\u6b22\u6363\u9f13\u65b0\u4e1c\u897f\u7684\u4eba\uff0c\u6bcf\u6b21\u5b66\u4e60\u65b0\u4e8b\u7269\u65f6\uff0c\u6211\u90fd\u4f1a\u6309\u7167\u4ee5\u4e0b\u51e0\u6b65\u8fdb\u884c\u5b66\u4e60\u3002 1. \u5148\u8dd1\u4e00\u4e2a\u5b98\u65b9\u6216\u8005\u7b2c\u4e09\u65b9\u7684\u5c0f\u4f8b\u5b50 \u5f53\u7136\u5728\u8fd9\u4e2d\u95f4\u4e5f\u4f1a\u9047\u89c1\u5f88\u591a\u95ee\u9898\u3001\u4e5f\u53ef\u80fd\u6709\u8bb8\u591a\u5de5\u5177\u4f60\u6ca1\u6709\u7528\u8fc7\uff0c\u4e0d\u719f\u7ec3\u5bfc\u81f4\u4e86\u95ee\u9898\u7684\u53d1\u751f\u3002\u8fd9\u4e2a\u65f6\u5019\u5c31\u5e94\u8be5\u505c\u4e0b\u6765\uff0c\u5148\u53bb\u4e86\u89e3\u4e00\u4e0b\u5de5\u5177\u7684\u57fa\u672c\u4f7f\u7528\uff0c\u5982\u679c\u5f3a\u884c\u8fdb\u884c\u4e0b\u53bb\u7684\u8bdd\uff0c\u95ee\u9898\u76f4\u4f1a\u8d8a\u6765\u8d8a\u591a\u3002\u4f8b\u5982\u6211\u4ee5\u524d\u914d\u7f6e\u4e00\u4e2a opencv \u7684 tensorflow \u73af\u5883\u65f6\uff0c\u7531\u4e8e\u7248\u672c\u4e0d\u5339\u914d\u7684\u95ee\u9898\u9700\u8981\u914d\u7f6e\u865a\u62df\u73af\u5883\u3002\u4f46\u5728\u8fd9\u4e2a\u9636\u6bb5\u9047\u89c1\u7684\u95ee\u9898\u90fd\u662f\u4e00\u4e9b\u5e38\u89c1\u95ee\u9898\uff0c\u53ea\u8981\u613f\u610f \u767e\u5ea6 \u8c37\u6b4c \u90fd\u5f88\u597d\u89e3\u51b3\u3002 2. \u5c1d\u8bd5\u4fee\u6539\u522b\u4eba\u7684\u4f8b\u5b50\uff0c\u5b9e\u73b0\u4e00\u4e9b\u9884\u671f\u7684\u529f\u80fd \u8fd9\u4e2a\u9636\u6bb5\u5982\u679c\u9047\u89c1\u95ee\u9898\uff0c\u4e5f\u90fd\u662f\u4e00\u4e9b\u5f88\u57fa\u7840\u7684\u95ee\u9898\uff0c\u53ea\u8981\u613f\u610f\u53bb\u7ffb\u624b\u518c\u3001\u53bb\u641c\u7d22\u3002\u4e5f\u90fd\u5f88\u597d\u89e3\u51b3\u3002 3. \u7f16\u5199\u81ea\u5df1\u7684\u5e94\u7528 \u5728\u8fd9\u4e2a\u9636\u6bb5\u4f1a\u9047\u89c1\u5927\u91cf\u7684\u95ee\u9898\u3001\u53ef\u80fd\u662f\u4e00\u4e9b\u57fa\u7840\u7684\u3001\u4e5f\u53ef\u80fd\u662f\u4e00\u4e9b\u5751\u3002\u4f46\u6211\u9047\u89c1\u95ee\u9898\u65f6\uff0c\u90fd\u4f1a\u5148\u5c1d\u8bd5\u7740\u81ea\u5df1\u53bb\u89e3\u51b3\u3002\u6211\u5bf9\u5728\u4e92\u8054\u7f51\u4e0a\u5206\u4eab\u81ea\u5df1\u8e29\u5751\u7ecf\u5386\u3001\u56de\u7b54\u522b\u4eba\u95ee\u9898\u7684\u4eba\u662f\u975e\u5e38\u611f\u8c22\u7684\uff0c\u5e2e\u52a9\u4e86\u65e0\u6570\u4e2a\u5c0f\u767d\u5ea6\u8fc7\u4e86\u6700\u56f0\u96be\u7684\u65f6\u523b\u3002 \u6211\u4e5f\u52a0\u5165\u4e86\u8bb8\u591a\u6280\u672f\u7231\u597d\u8005\u4ea4\u6d41\u7fa4\uff0c\u91cc\u9762\u4e5f\u6709\u5f88\u591a\u4eba\u63d0\u95ee\uff0c\u6211\u53ea\u8981\u770b\u89c1\u4e86\u6211\u66fe\u7ecf\u8e29\u8fc7\u7684\u5751\uff0c\u6211\u90fd\u4f1a\u70ed\u5fc3\u5206\u4eab\u6211\u89e3\u51b3\u7684\u529e\u6cd5\uff0c\u56e0\u4e3a\u6211\u7406\u89e3\u8e29\u5751\u7684\u75db\u82e6\u3002\u5e76\u4e0d\u662f\u6240\u6709\u7684\u5751\u90fd\u503c\u5f97\u53bb\u8e29\u3002\u5f53\u7136\u5728\u7fa4\u91cc\u4e5f\u4f1a\u5145\u65a5\u7740\u5927\u91cf\u7684\u4f4e\u7ea7\u7684\u95ee\u9898\uff0c\u4f8b\u5982\uff1a + \u62ff\u624b\u673a\u62cd\u5c4f\u5e55\uff0c\u8fd9\u6837\u7684\u63d0\u95ee\u8ba9\u4eba\u770b\u7740\u5c31\u6ca1\u6709\u5174\u8da3 + \u5e38\u89c1\u7684\u95ee\u9898\uff0c\u53ea\u8981\u613f\u610f\u52a8\u52a8\u624b\u767e\u5ea6\u4e00\u4e0b\u5c31\u53ef\u4ee5\u89e3\u51b3\uff0c\u4f8b\u5982 \u5b57\u7b26\u4e32\u8f6c\u6574\u5f62 \u3002 \u6211\u4ee5\u524d\u8ba4\u4e3a\u767e\u5ea6\u662f\u4e07\u80fd\u7684\uff0c\u4ec0\u4e48\u4e0d\u4f1a\u53bb\u767e\u5ea6\u4ee5\u4e0b\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u3002\u73b0\u5728\u53d1\u73b0\u641c\u7d22\u5f15\u64ce\u53ea\u80fd\u7ed9\u4f60\u4e00\u4e9b\u521d\u7ea7\u95ee\u9898\u7684\u7b54\u6848\u3001\u66f4\u52a0\u6df1\u5165\u7684\u7406\u89e3\u9700\u8981\u81ea\u5df1\u53bb\u63a2\u7d22\u3002\u4f46\u641c\u7d22\u5f15\u64ce\u786e\u5b9e\u662f\u4e00\u4e2a\u597d\u4e1c\u897f\u3001\u56e0\u4e3a\u5e73\u65f6\u9047\u89c1\u7684\u95ee\u9898\u6709\u767e\u5206\u4e4b\u516b\u5341\u90fd\u662f\u521d\u7ea7\u95ee\u9898\u3002\u5728\u5e73\u65f6\u7684\u5b66\u4e60\u4e2d\uff0c\u6211\u4e5f\u7ecf\u5e38\u9762\u5411\u767e\u5ea6\u7f16\u7a0b\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u4eba\u90fd\u80fd\u591f\u628a\u6240\u6709 Linux \u547d\u4ee4\u90fd\u7262\u8bb0\u4e8e\u5fc3\uff0c\u4e5f\u4e0d\u662f\u6240\u6709\u4eba\u90fd\u80fd\u591f\u638c\u63e1\u57fa\u7840\u51fd\u6570\u7684\u7528\u6cd5\u3002\u4f46\u8fd9\u4e9b\u90fd\u65e0\u5173\u7d27\u8981\u3001\u54ea\u91cc\u4e0d\u4f1a\u5b66\u54ea\u91cc\u3002\u53ea\u8981\u638c\u63e1\u4e86\u72ec\u7acb\u5b66\u4e60\u3001\u89e3\u51b3\u95ee\u9898\u7684\u80fd\u529b\uff0c\u5927\u90e8\u5206\u56f0\u96be\u90fd\u5f88\u7b80\u5355\u3002\u5176\u5b9e\u5927\u90e8\u5206\u95ee\u9898\u95ee\u51fa\u53bb\u540e\u90fd\u6ca1\u6709\u7ed3\u679c\uff0c\u8981\u4e48\u592a\u7b80\u5355\u3001\u522b\u4eba\u4f1a\u8ba4\u4e3a\u4f60\u6ca1\u6709\u8ba4\u771f\u601d\u8003\u5c31\u95ee\u51fa\u6765\u3002\u8981\u4e48\u592a\u96be\uff0c\u522b\u4eba\u4e5f\u6ca1\u6709\u9047\u89c1\u8fc7\u3002\u8ba9\u81ea\u5df1\u95ee\u9898\u53d8\u5f97\u6709\u4ef7\u503c\uff0c\u624d\u4f1a\u6709\u4eba\u56de\u7b54\uff0c\u63d0\u51fa\u95ee\u9898\u3001\u5f97\u5230\u89e3\u7b54\u786e\u5b9e\u662f\u4e00\u4ef6\u5f88\u5e78\u8fd0\u7684\u4e8b\u60c5\u3002","title":"\u8bfb\u540e\u611f"}]}